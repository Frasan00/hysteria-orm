{"version":3,"sources":["../src/Mysql/Models/Model.ts","../src/Mysql/Models/Relations/Relation.ts","../src/Mysql/Models/Relations/HasOne.ts","../src/Mysql/Models/Relations/HasMany.ts","../src/Mysql/Models/Relations/BelongsTo.ts","../src/Datasource.ts","../src/Mysql/MysqlDatasource.ts","../src/Mysql/Templates/Query/SELECT.ts","../src/Mysql/Templates/Query/INSERT.ts","../src/Mysql/Templates/Query/UPDATE.ts","../src/Mysql/Templates/Query/DELETE.ts","../src/Logger.ts","../src/Mysql/Templates/Query/RELATIONS.ts","../src/Mysql/Templates/Query/WHERE.TS.ts","../src/Mysql/Models/ModelManager/ModelManagerUtils.ts","../src/Mysql/Models/QueryBuilder/QueryBuilder.ts","../src/Mysql/Templates/Query/TRANSACTION.ts","../src/Mysql/Transaction/Transaction.ts","../src/Mysql/Models/ModelManager/ModelManager.ts","../src/Mysql/Migrations/Columns/Column.ts","../src/Mysql/Migrations/Columns/DropColumn.ts","../src/Mysql/Migrations/Columns/ColumnBuilders/ColumnConfigBuilder.ts","../src/Mysql/Migrations/Columns/ColumnBuilders/ColumnTypeBuilder.ts","../src/Mysql/Migrations/Table.ts","../src/Mysql/Migrations/Migration.ts"],"sourcesContent":["/*\n * Represents a model in the Database\n */\nexport interface Metadata {\n  readonly tableName: string;\n  readonly primaryKey?: string;\n}\n\nexport abstract class Model {\n  public metadata: Metadata;\n\n  protected constructor(tableName?: string, primaryKey?: string) {\n    this.metadata = {\n      tableName: tableName || this.constructor.name,\n      primaryKey: primaryKey,\n    };\n  }\n\n  public setProps<T extends this>(data: Partial<T>): void {\n    for (const key in data) {\n      Object.assign(this, { [key]: data[key] });\n    }\n  }\n}\n","import { Model } from \"../Model\";\n\nexport enum RelationType {\n  hasOne = \"hasOne\", // One to One without foreign key\n  belongsTo = \"belongsTo\", // One to One with foreign key\n  hasMany = \"hasMany\",\n}\n\n/**\n * Main Model -> Related Model\n */\n\nexport abstract class Relation {\n  public abstract type: RelationType;\n  public foreignKey?: string;\n  public relatedModel: string;\n\n  protected constructor(relatedModel: string) {\n    this.relatedModel = relatedModel;\n  }\n}\n","import { Relation, RelationType } from \"./Relation\";\nimport { Model } from \"../Model\";\n\nexport class HasOne extends Relation {\n  public type: RelationType;\n  public foreignKey: string;\n\n  public constructor(relatedModel: string, foreignKey: string) {\n    super(relatedModel);\n    this.foreignKey = foreignKey;\n    this.type = RelationType.hasOne;\n  }\n}\n","import { Relation, RelationType } from \"./Relation\";\nimport { Model } from \"../Model\";\n\nexport class HasMany extends Relation {\n  public type: RelationType = RelationType.hasMany;\n  public foreignKey: string;\n\n  public constructor(relatedModel: string, foreignKey: string) {\n    super(relatedModel);\n    this.foreignKey = foreignKey;\n    this.type = RelationType.hasMany;\n  }\n}\n","import { Relation, RelationType } from \"./Relation\";\nimport { Model } from \"../Model\";\n\nexport class BelongsTo extends Relation {\n  public type: RelationType;\n  public foreignKey: string;\n\n  public constructor(relatedModel: string, foreignKey: string) {\n    super(relatedModel);\n    this.foreignKey = foreignKey;\n    this.type = RelationType.belongsTo;\n  }\n}\n","import { Model } from \"./Mysql/Models/Model\";\nimport { ModelManager } from \"./Mysql/Models/ModelManager/ModelManager\";\n\n/*\n * Creates a datasource for the selected database type with the provided credentials\n */\ntype DatasourceType = \"mysql\";\n\nexport interface DatasourceInput {\n  readonly type: DatasourceType;\n  readonly host: string;\n  readonly port: number;\n  readonly username: string;\n  readonly password: string;\n  readonly database: string;\n  readonly logs?: boolean;\n}\n\nexport abstract class Datasource {\n  protected type: DatasourceType;\n  protected host: string;\n  protected port: number;\n  protected username: string;\n  protected password: string;\n  protected database: string;\n  protected logs: boolean;\n\n  protected constructor(input: DatasourceInput) {\n    this.type = input.type;\n    this.host = input.host;\n    this.port = input.port;\n    this.username = input.username;\n    this.password = input.password;\n    this.database = input.database;\n    this.logs = input.logs || false;\n  }\n\n  public abstract connect(): Promise<void>;\n  public abstract getModelManager(model: typeof Model): ModelManager<Model>;\n}\n","import { Datasource, DatasourceInput } from \"../Datasource\";\nimport { PoolConnection, Pool, createPool } from \"mysql2/promise\";\nimport { Model } from \"./Models/Model\";\nimport { ModelManager } from \"./Models/ModelManager/ModelManager\";\n\n/*\n * Creates a datasource for the selected database type with the provided credentials\n */\n\ntype MigrationInput = {\n  migrationsPath?: string;\n};\n\nexport class MysqlDatasource extends Datasource {\n  protected pool!: Pool;\n  protected connection!: PoolConnection;\n  protected migrationsPath?: string;\n\n  constructor(input: DatasourceInput & MigrationInput) {\n    super(input);\n    this.migrationsPath = input.migrationsPath;\n  }\n\n  /**\n   * @description Connects to the database establishing a connection pool.\n   */\n  public async connect(): Promise<void> {\n    this.pool = createPool({\n      host: this.host,\n      port: this.port,\n      user: this.username,\n      password: this.password,\n      database: this.database,\n    });\n  }\n\n  /**\n   * @description Returns raw mysql pool\n   */\n  public async getRawPool(): Promise<Pool> {\n    return createPool({\n      host: this.host,\n      port: this.port,\n      user: this.username,\n      password: this.password,\n      database: this.database,\n    });\n  }\n\n  /**\n   * @description Returns raw mysql PoolConnection\n   */\n  public async getRawPoolConnection(): Promise<PoolConnection> {\n    return createPool({\n      host: this.host,\n      port: this.port,\n      user: this.username,\n      password: this.password,\n      database: this.database,\n    }).getConnection();\n  }\n\n  /**\n   * @description Returns model manager for the provided model\n   * @param model\n   */\n  public getModelManager<T extends Model>(model: new () => T): ModelManager<T> {\n    return new ModelManager<T>(model, this.pool, this.logs);\n  }\n}\n","const selectTemplate = (table: string) => {\n  return {\n    selectAll: `SELECT * FROM ${table} `,\n    selectById: (id: string) => `SELECT * FROM ${table} WHERE id = ${id} `,\n    selectColumns: (...columns: string[]) =>\n      `SELECT ${columns.join(\", \")} FROM ${table} `,\n    selectCount: `SELECT COUNT(*) FROM ${table} `,\n    selectDistinct: (...columns: string[]) =>\n      `SELECT DISTINCT ${columns.join(\", \")} FROM ${table} `,\n    selectSum: (column: string) => `SELECT SUM(${column}) FROM ${table} `,\n    orderBy: (column: string[], order?: \"ASC\" | \"DESC\") =>\n      `\\nORDER BY ${column.join(\", \")} ${order}`,\n    groupBy: (...columns: string[]) => `\\nGROUP BY ${columns.join(\", \")} `,\n    limit: (limit: number) => `\\nLIMIT ${limit} `,\n    offset: (offset: number) => `\\nOFFSET ${offset} `,\n  };\n};\n\nexport type SelectTemplateType = {\n  selectAll: string;\n  selectById: (id: string) => string;\n  selectColumns: (...columns: string[]) => string;\n  selectCount: string;\n  selectDistinct: (...columns: string[]) => string;\n  selectSum: (column: string) => string;\n  orderBy: (column: string[], order?: \"ASC\" | \"DESC\") => string;\n  groupBy: (...columns: string[]) => string;\n  limit: (limit: number) => string;\n  offset: (offset: number) => string;\n};\n\nexport default selectTemplate;\n","const insertTemplate = (tableName: string) => {\n  return {\n    insert: (columns: string[], values: string[]) => {\n      values = parseValues(values);\n      return `INSERT INTO ${tableName} (${columns.join(\", \")})\n       VALUES (${values.join(\", \")});`;\n    },\n    insertMany: (columns: string[], values: string[][]) => {\n      const parsedValues = values.map(parseValues);\n      const valueSets = parsedValues.map((val) => `(${val.join(\", \")})`);\n      return `INSERT INTO ${tableName} (${columns.join(\", \")})\n       VALUES ${valueSets.join(\", \")};`;\n    },\n  };\n};\n\nfunction parseValues(values: string[]) {\n  return values.map((value: any) => {\n    if (typeof value === \"string\") {\n      return `'${value}'`;\n    }\n\n    return value || \"DEFAULT\";\n  });\n}\n\nexport default insertTemplate;\n","const updateTemplate = (table: string) => {\n  return {\n    update: (\n      columns: string[],\n      values: string[],\n      primaryKey?: string,\n      primaryKeyValue?: string | undefined,\n    ) =>\n      `UPDATE ${table} SET ${columns\n        .map((column, index) => parseColumnValue(column, values[index]))\n        .join(\", \")} WHERE ${primaryKey} = ${primaryKeyValue};`,\n  };\n};\n\nfunction parseColumnValue(column: string, value: any) {\n  if (typeof value === \"string\") {\n    return `${column} = '${value}'`;\n  }\n\n  return `${column} = ${value}`;\n}\n\nexport default updateTemplate;\n","const deleteTemplate = (tableName: string) => {\n  return {\n    delete: (column: string, value: string) =>\n      `\\nDELETE FROM ${tableName} WHERE ${column} = ${value} `,\n  };\n};\n\nexport default deleteTemplate;\n","import winston from \"winston\";\n\ninterface LogColors {\n  info: string;\n  warn: string;\n  error: string;\n  [key: string]: string;\n}\n\nconst colors: LogColors = {\n  info: \"\\x1b[32m\",\n  warn: \"\\x1b[33m\",\n  error: \"\\x1b[31m\",\n};\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.printf(({ level, message, timestamp }) => {\n    const color = colors[level] || \"\\x1b[0m\";\n    return `${timestamp} ${color}${level}\\x1b[0m: ${color}${message}\\x1b[0m`;\n  }),\n);\n\nconst consoleTransport = new winston.transports.Console();\nconst fileTransport = new winston.transports.File({ filename: \"logfile.log\" });\n\nconst logger = winston.createLogger({\n  format: logFormat,\n  transports: [consoleTransport, fileTransport],\n});\n\nexport function log(query: string, logs: boolean) {\n  if (!logs) {\n    return;\n  }\n\n  logger.info(\"\\n\" + query);\n}\nexport function queryError(error: any) {\n  logger.error(\"Query Failed \", error);\n}\n\nexport default logger;\n","/**\n * @description Queries to retrieve model's relations from the related relation type\n */\nimport { Relation, RelationType } from \"../../Models/Relations/Relation\";\nimport { Model } from \"../../Models/Model\";\n\nfunction relationTemplates<T extends Model>(model: T, relation: Relation) {\n  const primaryKey = model.metadata.primaryKey as keyof T;\n  switch (relation.type) {\n    case RelationType.hasOne:\n      return `SELECT * FROM ${relation.relatedModel} WHERE ${relation.relatedModel}.${relation.foreignKey} = ${model[primaryKey]} LIMIT 1;`;\n\n    case RelationType.belongsTo:\n      return `SELECT * FROM ${relation.relatedModel} WHERE ${\n        relation.relatedModel\n      }.id = ${model[relation.foreignKey as keyof T]};`;\n\n    case RelationType.hasMany:\n      return `SELECT * FROM ${relation.relatedModel} WHERE ${relation.relatedModel}.${relation.foreignKey} = ${model[primaryKey]};`;\n\n    default:\n      return \"\";\n  }\n}\n\nexport default relationTemplates;\n","export type WhereOperatorType = \"=\" | \"!=\" | \">\" | \"<\" | \">=\" | \"<=\" | \"LIKE\";\n\nconst whereTemplate = (tableName: string) => {\n  return {\n    where: (column: string, value: string, operator: WhereOperatorType = \"=\") =>\n      `\\nWHERE ${tableName}.${column} = ${value} `,\n    andWhere: (\n      column: string,\n      value: string,\n      operator: WhereOperatorType = \"=\",\n    ) => ` AND ${tableName}.${column} = ${value} `,\n    orWhere: (\n      column: string,\n      value: string,\n      operator: WhereOperatorType = \"=\",\n    ) => ` OR ${tableName}.${column} = ${value} `,\n    whereNot: (column: string, value: string) =>\n      `\\nWHERE ${tableName}.${column} != ${value} `,\n    andWhereNot: (column: string, value: string) =>\n      ` AND ${tableName}.${column} != ${value} `,\n    orWhereNot: (column: string, value: string) =>\n      ` OR ${tableName}.${column} != ${value} `,\n    whereNull: (column: string) => `\\nWHERE ${tableName}.${column} IS NULL `,\n    andWhereNull: (column: string) => ` AND ${tableName}.${column} IS NULL `,\n    orWhereNull: (column: string) => ` OR ${tableName}.${column} IS NULL `,\n    whereNotNull: (column: string) =>\n      `\\nWHERE ${tableName}.${column} IS NOT NULL `,\n    andWhereNotNull: (column: string) =>\n      ` AND ${tableName}.${column} IS NOT NULL `,\n    orWhereNotNull: (column: string) =>\n      ` OR ${tableName}.${column} IS NOT NULL `,\n    whereBetween: (column: string, min: string, max: string) =>\n      `\\nWHERE ${tableName}.${column} BETWEEN ${min} AND ${max} `,\n    andWhereBetween: (column: string, min: string, max: string) =>\n      ` AND ${tableName}.${column} BETWEEN ${min} AND ${max} `,\n    orWhereBetween: (column: string, min: string, max: string) =>\n      ` OR ${tableName}.${column} BETWEEN ${min} AND ${max} `,\n    whereNotBetween: (column: string, min: string, max: string) =>\n      `\\nWHERE ${tableName}.${column} NOT BETWEEN ${min} AND ${max} `,\n    andWhereNotBetween: (column: string, min: string, max: string) =>\n      ` AND ${tableName}.${column} NOT BETWEEN ${min} AND ${max} `,\n    orWhereNotBetween: (column: string, min: string, max: string) =>\n      ` OR ${tableName}.${column} NOT BETWEEN ${min} AND ${max} `,\n    whereIn: (column: string, values: string[]) =>\n      `\\nWHERE ${tableName}.${column} IN (${values.join(\", \")}) `,\n    andWhereIn: (column: string, values: string[]) =>\n      ` AND ${tableName}.${column} IN (${values.join(\", \")}) `,\n    orWhereIn: (column: string, values: string[]) =>\n      ` OR ${tableName}.${column} IN (${values.join(\", \")}) `,\n    whereNotIn: (column: string, values: string[]) =>\n      `\\nWHERE ${tableName}.${column} NOT IN (${values.join(\", \")}) `,\n    andWhereNotIn: (column: string, values: string[]) =>\n      ` AND ${tableName}.${column} NOT IN (${values.join(\", \")}) `,\n    orWhereNotIn: (column: string, values: string[]) =>\n      ` OR ${tableName}.${column} NOT IN (${values.join(\", \")}) `,\n    rawWhere: (query: string) => `\\nWHERE ${query} `,\n    rawAndWhere: (query: string) => ` AND ${query} `,\n    rawOrWhere: (query: string) => ` OR ${query} `,\n  };\n};\n\nexport type WhereTemplateType = {\n  where: (column: string, value: string, operator: WhereOperatorType) => string;\n  andWhere: (\n    column: string,\n    value: string,\n    operator: WhereOperatorType,\n  ) => string;\n  orWhere: (\n    column: string,\n    value: string,\n    operator: WhereOperatorType,\n  ) => string;\n  whereNot: (column: string, value: string) => string;\n  andWhereNot: (column: string, value: string) => string;\n  orWhereNot: (column: string, value: string) => string;\n  whereNull: (column: string) => string;\n  andWhereNull: (column: string) => string;\n  orWhereNull: (column: string) => string;\n  whereNotNull: (column: string) => string;\n  andWhereNotNull: (column: string) => string;\n  orWhereNotNull: (column: string) => string;\n  whereBetween: (column: string, min: string, max: string) => string;\n  andWhereBetween: (column: string, min: string, max: string) => string;\n  orWhereBetween: (column: string, min: string, max: string) => string;\n  whereNotBetween: (column: string, min: string, max: string) => string;\n  andWhereNotBetween: (column: string, min: string, max: string) => string;\n  orWhereNotBetween: (column: string, min: string, max: string) => string;\n  whereIn: (column: string, values: string[]) => string;\n  andWhereIn: (column: string, values: string[]) => string;\n  orWhereIn: (column: string, values: string[]) => string;\n  whereNotIn: (column: string, values: string[]) => string;\n  andWhereNotIn: (column: string, values: string[]) => string;\n  orWhereNotIn: (column: string, values: string[]) => string;\n  rawWhere: (query: string) => string;\n  rawAndWhere: (query: string) => string;\n  rawOrWhere: (query: string) => string;\n};\n\nexport default whereTemplate;\n","import { FindType, FindOneType } from \"./ModelManagerTypes\";\nimport selectTemplate from \"../../Templates/Query/SELECT\";\nimport { Model } from \"../Model\";\nimport insertTemplate from \"../../Templates/Query/INSERT\";\nimport updateTemplate from \"../../Templates/Query/UPDATE\";\nimport deleteTemplate from \"../../Templates/Query/DELETE\";\nimport { Relation } from \"../Relations/Relation\";\nimport { log, queryError } from \"../../../Logger\";\nimport relationTemplates from \"../../Templates/Query/RELATIONS\";\nimport { Pool, PoolConnection, RowDataPacket } from \"mysql2/promise\";\nimport whereTemplate from \"../../Templates/Query/WHERE.TS\";\n\nclass ModelManagerUtils<T extends Model> {\n  public parseSelectQueryInput(\n    model: T,\n    input: FindType | FindOneType,\n  ): string {\n    let query = \"\";\n    query += this.parseSelect(model.metadata.tableName, input);\n    query += this.parseWhere(model.metadata.tableName, input);\n    query += this.parseQueryFooter(model.metadata.tableName, input);\n\n    return query;\n  }\n\n  private parseSelect(\n    tableName: string,\n    input: FindType | FindOneType,\n  ): string {\n    const select = selectTemplate(tableName);\n    return input.select\n      ? select.selectColumns(...input.select)\n      : select.selectAll;\n  }\n\n  private parseWhere(tableName: string, input: FindType | FindOneType): string {\n    const where = whereTemplate(tableName);\n    if (!input.where) {\n      return \"\";\n    }\n\n    let query = \"\";\n    const entries = Object.entries(input.where);\n    for (let index = 0; index < entries.length; index++) {\n      const [key, value] = entries[index];\n\n      if (index === 0) {\n        query += where.where(key, value);\n        continue;\n      }\n      query += where.andWhere(key, value);\n    }\n\n    return query;\n  }\n  private parseQueryFooter(\n    tableName: string,\n    input: FindType | FindOneType,\n  ): string {\n    if (!this.isFindType(input)) {\n      return \"\";\n    }\n\n    const select = selectTemplate(tableName);\n    let query = \"\";\n    if (input.offset) {\n      query += select.offset(input.offset);\n    }\n\n    if (input.groupBy) {\n      query += select.groupBy(...input.groupBy);\n    }\n\n    if (input.orderBy) {\n      query += select.orderBy([...input.orderBy.columns], input.orderBy.type);\n    }\n\n    if (input.limit) {\n      query += select.limit(input.limit);\n    }\n\n    return query;\n  }\n\n  public parseInsert(model: T): string {\n    const filteredModel = this.filterRelationsAndMetadata(model);\n    const keys = Object.keys(filteredModel);\n    const values = Object.values(filteredModel);\n    const insert = insertTemplate(model.metadata.tableName);\n\n    return insert.insert(keys, values);\n  }\n\n  public parseUpdate(model: T, modelName?: string): string {\n    const update = updateTemplate(modelName || model.metadata.tableName);\n    const filteredModel = this.filterRelationsAndMetadata(model);\n    const keys = Object.keys(filteredModel);\n    const values = Object.values(filteredModel);\n\n    const primaryKey = model.metadata.primaryKey as string;\n    const primaryKeyValue = model[primaryKey as keyof T];\n\n    return update.update(keys, values, primaryKey, primaryKeyValue as string);\n  }\n\n  private filterRelationsAndMetadata(model: T): T {\n    const filteredModel = {};\n\n    const keys = Object.keys(model);\n    for (const key of keys) {\n      if (key === \"metadata\") {\n        continue;\n      }\n\n      if (\n        typeof model[key as keyof T] === \"object\" &&\n        (model[key as keyof T] !== null ||\n          !Array.isArray(model[key as keyof T]))\n      ) {\n        continue;\n      }\n\n      Object.assign(filteredModel, { [key]: model[key as keyof T] });\n    }\n\n    return filteredModel as T;\n  }\n\n  public parseDelete(\n    tableName: string,\n    column: string,\n    value: string | number | boolean,\n  ): string {\n    return deleteTemplate(tableName).delete(column, value.toString());\n  }\n\n  private isFindType(input: FindType | FindOneType): input is FindType {\n    const instance = input as FindType;\n    return (\n      instance.hasOwnProperty(\"offset\") ||\n      instance.hasOwnProperty(\"groupBy\") ||\n      instance.hasOwnProperty(\"orderBy\") ||\n      instance.hasOwnProperty(\"limit\")\n    );\n  }\n\n  /*private _parseJoin(model: T, input: FindType | FindOneType): string {\n    if (!input.relations) {\n      return \"\";\n    }\n\n    const relations: string[] = input.relations.map((relationField) => {\n      const relation: Relation = this.getRelationFromModel(\n        model,\n        relationField,\n      );\n      const join = joinTemplate(model.metadata.tableName, relation.relatedModel);\n      switch (relation.type) {\n        case RelationType.belongsTo:\n          const belongsTo = relation as BelongsTo;\n          return join.belongsTo(belongsTo.foreignKey);\n\n        case RelationType.hasOne:\n          return join.hasOne();\n        case RelationType.hasMany:\n          return join.hasMany(model.metadata.primaryKey as string);\n\n        default:\n          throw new Error(\"Relation type not supported\");\n      }\n    });\n\n    return relations.join(\"\\n\");\n  }*/\n\n  private getRelationFromModel(model: T, relationField: string): Relation {\n    const relation = model[relationField as keyof T] as Relation;\n    if (!relation) {\n      throw new Error(\n        \"Relation \" +\n          relationField +\n          \" not found in model \" +\n          model.metadata.tableName,\n      );\n    }\n\n    return relation;\n  }\n\n  // Parses and fills input relations directly into the model\n  public async parseRelationInput(\n    model: T,\n    input: FindOneType,\n    mysqlConnection: Pool,\n    logs: boolean,\n  ): Promise<void> {\n    if (!input.relations) {\n      return;\n    }\n\n    if (!model.metadata.primaryKey) {\n      throw new Error(\"Model does not have a primary key\");\n    }\n\n    try {\n      const relationPromises = input.relations.map(\n        async (inputRelation: string) => {\n          const relation = this.getRelationFromModel(model, inputRelation);\n          const relationQuery = relationTemplates(model, relation);\n          console.log(relationQuery);\n\n          const [relatedModels] =\n            await mysqlConnection.query<RowDataPacket[]>(relationQuery);\n          if (relatedModels.length === 0) {\n            Object.assign(model, { [inputRelation as keyof T]: null });\n            log(relationQuery, logs);\n            return;\n          }\n\n          if (relatedModels.length === 1) {\n            Object.assign(model, {\n              [inputRelation as keyof T]: relatedModels[0],\n            });\n            log(relationQuery, logs);\n            return;\n          }\n\n          Object.assign(model, { [inputRelation as keyof T]: relatedModels });\n          log(relationQuery, logs);\n        },\n      );\n\n      await Promise.all(relationPromises);\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to parse relations \" + error);\n    }\n  }\n\n  // Parses and fills input relations directly into the model\n  public async parseQueryBuilderRelations(\n    model: T,\n    input: string[],\n    mysqlConnection: Pool,\n    logs: boolean,\n  ): Promise<void> {\n    if (input.length === 0) {\n      return;\n    }\n\n    if (!model.metadata.primaryKey) {\n      throw new Error(\"Model does not have a primary key\");\n    }\n\n    let relationQuery: string = \"\";\n    try {\n      const relationPromises = input.map(async (inputRelation: string) => {\n        const relation = this.getRelationFromModel(model, inputRelation);\n        relationQuery = relationTemplates(model, relation);\n\n        const [relatedModels] =\n          await mysqlConnection.query<RowDataPacket[]>(relationQuery);\n        if (relatedModels.length === 0) {\n          Object.assign(model, { [inputRelation as keyof T]: null });\n          log(relationQuery, logs);\n          return;\n        }\n\n        if (relatedModels.length === 1) {\n          Object.assign(model, {\n            [inputRelation as keyof T]: relatedModels[0],\n          });\n          log(relationQuery, logs);\n          return;\n        }\n\n        Object.assign(model, { [inputRelation as keyof T]: relatedModels });\n        log(relationQuery, logs);\n      });\n\n      await Promise.all(relationPromises);\n    } catch (error) {\n      queryError(\"Query Error: \" + relationQuery + error);\n      throw new Error(\"Failed to parse relations \" + error);\n    }\n  }\n}\n\nexport default new ModelManagerUtils();\n","import { Pool, PoolConnection, RowDataPacket } from \"mysql2/promise\";\nimport selectTemplate, {\n  SelectTemplateType,\n} from \"../../Templates/Query/SELECT\";\nimport { Model } from \"../Model\";\nimport { log } from \"../../../Logger\";\nimport ModelManagerUtils from \"../ModelManager/ModelManagerUtils\";\nimport whereTemplate, {\n  WhereOperatorType,\n  WhereTemplateType,\n} from \"../../Templates/Query/WHERE.TS\";\n\nexport class QueryBuilder<T extends Model> {\n  protected selectQuery: string = \"\";\n  protected relations: string[] = [];\n  protected whereQuery: string = \"\";\n  protected groupByQuery: string = \"\";\n  protected orderByQuery: string = \"\";\n  protected limitQuery: string = \"\";\n  protected offsetQuery: string = \"\";\n\n  protected model: new () => Model;\n  protected tableName: string;\n  protected mysqlConnection: Pool;\n  protected logs: boolean;\n\n  protected selectTemplate: SelectTemplateType;\n  protected whereTemplate: WhereTemplateType;\n\n  /**\n   * @description Constructs a QueryBuilder instance.\n   * @param model - The model class associated with the table.\n   * @param tableName - The name of the table.\n   * @param mysqlConnection - The MySQL connection pool.\n   * @param logs - A boolean indicating whether to log queries.\n   */\n  public constructor(\n    model: new () => Model,\n    tableName: string,\n    mysqlConnection: Pool,\n    logs: boolean,\n  ) {\n    this.model = model;\n    this.mysqlConnection = mysqlConnection;\n    this.logs = logs;\n    this.tableName = tableName;\n    this.selectQuery = selectTemplate(this.tableName).selectAll;\n    this.selectTemplate = selectTemplate(this.tableName);\n    this.whereTemplate = whereTemplate(this.tableName);\n  }\n\n  /**\n   * @description Executes the query and retrieves the first result.\n   * @returns A Promise resolving to the first result or null.\n   */\n  public async one(): Promise<T | null> {\n    let query = this.selectQuery;\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    log(query, this.logs);\n    const model = new this.model();\n    try {\n      const [rows] = await this.mysqlConnection.query<RowDataPacket[]>(query);\n      const modelData = rows[0] as T;\n\n      // merge model data into model\n      Object.assign(model, modelData);\n\n      // relations parsing on the queried model\n      await ModelManagerUtils.parseQueryBuilderRelations(\n        model,\n        this.relations,\n        this.mysqlConnection,\n        this.logs,\n      );\n\n      return model as T;\n    } catch (error) {\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Executes the query and retrieves multiple results.\n   * @returns A Promise resolving to an array of results.\n   */\n  public async many(): Promise<T[]> {\n    let query = this.selectQuery;\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    query += this.groupFooterQuery();\n\n    log(query, this.logs);\n    const model = new this.model();\n    try {\n      const [rows] = await this.mysqlConnection.query<RowDataPacket[]>(query);\n      return Promise.all(\n        rows.map(async (row) => {\n          const modelData = rows[0] as T;\n\n          // merge model data into model\n          Object.assign(model, modelData);\n\n          // relations parsing on the queried model\n          await ModelManagerUtils.parseQueryBuilderRelations(\n            model,\n            this.relations,\n            this.mysqlConnection,\n            this.logs,\n          );\n\n          return model as T;\n        }),\n      );\n    } catch (error) {\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Columns are customizable with aliases. By default, without this function, all columns are selected\n   * @param columns\n   */\n  public select(...columns: string[]) {\n    const select = selectTemplate(this.tableName);\n    this.selectQuery = select.selectColumns(...columns);\n  }\n\n  public addRelations(relations: string[]) {\n    this.relations = relations;\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public where(\n    column: string,\n    operator: WhereOperatorType,\n    value: string | number | boolean | Date,\n  ): this {\n    if (this.whereQuery) {\n      this.whereQuery += this.whereTemplate.andWhere(\n        column,\n        value.toString(),\n        operator,\n      );\n      return this;\n    }\n    this.whereQuery = this.whereTemplate.where(\n      column,\n      value.toString(),\n      operator,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public andWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: string | number | boolean | Date,\n  ): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.where(\n        column,\n        value.toString(),\n        operator,\n      );\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhere(\n      column,\n      value.toString(),\n      operator,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public orWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: string | number | boolean | Date,\n  ): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.where(\n        column,\n        value.toString(),\n        operator,\n      );\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhere(\n      column,\n      value.toString(),\n      operator,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public whereBetween(column: string, min: string, max: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public andWhereBetween(column: string, min: string, max: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public orWhereBetween(column: string, min: string, max: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public whereNotBetween(column: string, min: string, max: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNotBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNotBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public orWhereNotBetween(column: string, min: string, max: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNotBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public whereIn(column: string, values: string[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereIn(column, values);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public andWhereIn(column: string, values: string[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereIn(column, values);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public orWhereIn(column: string, values: string[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereIn(column, values);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public whereNotIn(column: string, values: string[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNotIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNotIn(column, values);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public orWhereNotIn(column: string, values: string[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNotIn(\n      column,\n      values,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public whereNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public andWhereNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public orWhereNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public whereNotNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNotNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNotNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public andWhereNotNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereNotNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public orWhereNotNull(column: string) {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNotNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public rawWhere(query: string) {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.rawAndWhere(query);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).rawWhere(query);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw AND WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public rawAndWhere(query: string) {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.rawWhere(query);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).rawAndWhere(query);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw OR WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public rawOrWhere(query: string) {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.rawWhere(query);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).rawOrWhere(query);\n    return this;\n  }\n\n  /**\n   * @description Adds GROUP BY conditions to the query.\n   * @param columns - The columns to group by.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public groupBy(...columns: string[]) {\n    this.groupByQuery = this.selectTemplate.groupBy(...columns);\n    return this;\n  }\n\n  /**\n   * @description Adds ORDER BY conditions to the query.\n   * @param column - The column to order by.\n   * @param order - The order direction, either \"ASC\" or \"DESC\".\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public orderBy(column: string[], order: \"ASC\" | \"DESC\") {\n    this.orderByQuery = this.selectTemplate.orderBy(column, order);\n    return this;\n  }\n\n  /**\n   * @description Adds a LIMIT condition to the query.\n   * @param limit - The maximum number of rows to return.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public limit(limit: number) {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    return this;\n  }\n\n  /**\n   * @description Adds an OFFSET condition to the query.\n   * @param offset - The number of rows to skip.\n   * @returns The QueryBuilder instance for chaining.\n   */\n  public offset(offset: number) {\n    this.offsetQuery = this.selectTemplate.offset(offset);\n    return this;\n  }\n\n  protected groupFooterQuery(): string {\n    return (\n      this.groupByQuery + this.orderByQuery + this.limitQuery + this.offsetQuery\n    );\n  }\n}\n","export const BEGIN_TRANSACTION = \"START TRANSACTION; \\n\";\nexport const COMMIT_TRANSACTION = \"COMMIT; \\n\";\nexport const ROLLBACK_TRANSACTION = \"ROLLBACK; \\n\";\n","import { Pool, PoolConnection, RowDataPacket } from \"mysql2/promise\";\nimport { BEGIN_TRANSACTION } from \"../Templates/Query/TRANSACTION\";\nimport { COMMIT_TRANSACTION } from \"../Templates/Query/TRANSACTION\";\nimport { ROLLBACK_TRANSACTION } from \"../Templates/Query/TRANSACTION\";\nimport { log, queryError } from \"../../Logger\";\nimport { Metadata, Model } from \"../Models/Model\";\nimport selectTemplate from \"../Templates/Query/SELECT\";\n\nexport class Transaction {\n  protected tableName: string;\n  protected mysql: Pool;\n  protected mysqlConnection!: PoolConnection;\n  protected logs: boolean;\n\n  constructor(mysql: Pool, tableName: string, logs: boolean) {\n    this.logs = logs;\n    this.mysql = mysql;\n    this.tableName = tableName;\n  }\n\n  public async queryInsert<T extends Model>(\n    query: string,\n    metadata: Metadata,\n    params?: any[],\n  ): Promise<T> {\n    if (!this.mysqlConnection) {\n      throw new Error(\"Transaction not started.\");\n    }\n\n    log(query, this.logs);\n    const [rows]: any = await this.mysqlConnection.query<RowDataPacket[]>(\n      query,\n      params,\n    );\n    const insertId = rows.insertId;\n    const select = selectTemplate(this.tableName).selectById(insertId);\n    const [savedModel] =\n      await this.mysqlConnection.query<RowDataPacket[]>(select);\n    Object.assign(savedModel[0], { metadata });\n    return savedModel[0] as T;\n  }\n\n  public async queryUpdate<T extends Model>(\n    query: string,\n    params?: any[],\n  ): Promise<number> {\n    if (!this.mysqlConnection) {\n      throw new Error(\"Transaction not started.\");\n    }\n\n    log(query, this.logs);\n    const [rows]: any = await this.mysqlConnection.query<RowDataPacket[]>(\n      query,\n      params,\n    );\n    return rows.affectedRows;\n  }\n\n  public async queryDelete(query: string, params?: any[]): Promise<number> {\n    if (!this.mysqlConnection) {\n      throw new Error(\"Transaction not started.\");\n    }\n\n    log(query, this.logs);\n    const [rows]: any = await this.mysqlConnection.query<RowDataPacket[]>(\n      query,\n      params,\n    );\n\n    return rows.affectedRows;\n  }\n\n  /**\n   * Start transaction.\n   */\n  async start(): Promise<void> {\n    try {\n      log(BEGIN_TRANSACTION, this.logs);\n      this.mysqlConnection = await this.mysql.getConnection();\n      await this.mysqlConnection.query(BEGIN_TRANSACTION);\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to start transaction \" + error);\n    }\n  }\n\n  /**\n   * Commit transaction.\n   */\n  async commit(): Promise<void> {\n    if (!this.mysqlConnection) {\n      throw new Error(\"Transaction not started.\");\n    }\n\n    try {\n      log(COMMIT_TRANSACTION, this.logs);\n      await this.mysqlConnection.query(COMMIT_TRANSACTION);\n      this.mysqlConnection.release();\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to commit transaction \" + error);\n    }\n  }\n\n  /**\n   * Rollback transaction.\n   */\n  async rollback(): Promise<void> {\n    if (!this.mysqlConnection) {\n      return;\n    }\n\n    try {\n      log(ROLLBACK_TRANSACTION, this.logs);\n      await this.mysqlConnection.query(ROLLBACK_TRANSACTION);\n      this.mysqlConnection.release();\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to rollback transaction \" + error);\n    }\n  }\n}\n","/*\n * This class is used to make operations on models\n */\nimport { Model } from \"../Model\";\nimport { FindOneType, FindType } from \"./ModelManagerTypes\";\nimport { Pool, PoolConnection, RowDataPacket } from \"mysql2/promise\";\nimport selectTemplate from \"../../Templates/Query/SELECT\";\nimport ModelManagerQueryUtils from \"./ModelManagerUtils\";\nimport { log, queryError } from \"../../../Logger\";\nimport { QueryBuilder } from \"../QueryBuilder/QueryBuilder\";\nimport ModelManagerUtils from \"./ModelManagerUtils\";\nimport { Transaction } from \"../../Transaction/Transaction\";\n\nexport class ModelManager<T extends Model> {\n  protected logs: boolean;\n  protected mysqlPool: Pool;\n  protected model: new () => T;\n  protected modelInstance: T;\n  public tableName: string;\n\n  /**\n   * Constructor for ModelManager class.\n   *\n   * @param {new () => T} model - Model constructor.\n   * @param {Pool} mysqlConnection - MySQL connection pool.\n   * @param {boolean} logs - Flag to enable or disable logging.\n   */\n  constructor(model: new () => T, mysqlConnection: Pool, logs: boolean) {\n    this.logs = logs;\n    this.tableName = model.name;\n    this.model = model;\n    this.modelInstance = new this.model();\n    this.mysqlPool = mysqlConnection;\n  }\n\n  /**\n   * Find method to retrieve multiple records from the database based on the input conditions.\n   *\n   * @param {FindType} input - Optional query parameters for filtering, ordering, and pagination.\n   * @returns Promise resolving to an array of models.\n   */\n  public async find(input?: FindType): Promise<T[]> {\n    try {\n      if (!input) {\n        const select = selectTemplate(this.tableName);\n        log(select.selectAll, this.logs);\n        const [rows] = await this.mysqlPool.query<RowDataPacket[]>(\n          select.selectAll,\n        );\n        return rows.map((row) => row as T) || [];\n      }\n\n      const model = new this.model();\n      const query = ModelManagerQueryUtils.parseSelectQueryInput(\n        new this.model(),\n        input,\n      );\n      log(query, this.logs);\n      const [rows] = await this.mysqlPool.query<RowDataPacket[]>(query);\n      return Promise.all(\n        rows.map(async (row) => {\n          const modelData = rows[0] as T;\n\n          // merge model data into model\n          Object.assign(model, modelData);\n\n          // relations parsing on the queried model\n          await ModelManagerUtils.parseRelationInput(\n            model,\n            input,\n            this.mysqlPool,\n            this.logs,\n          );\n\n          return model;\n        }),\n      );\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record from the database based on the input conditions.\n   *\n   * @param {FindOneType} input - Query parameters for filtering and selecting a single record.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOne(input: FindOneType): Promise<T | null> {\n    const model = new this.model();\n    try {\n      const query = ModelManagerQueryUtils.parseSelectQueryInput(model, input);\n      log(query, this.logs);\n      const [rows] = await this.mysqlPool.query<RowDataPacket[]>(query);\n      const modelData = rows[0] as T;\n\n      // merge model data into model\n      Object.assign(model, modelData);\n\n      // relations parsing on the queried model\n      await ModelManagerUtils.parseRelationInput(\n        model,\n        input,\n        this.mysqlPool,\n        this.logs,\n      );\n\n      return model;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record by its ID from the database.\n   *\n   * @param {string | number} id - ID of the record to retrieve.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOneById(id: string | number): Promise<T | null> {\n    const select = selectTemplate(this.tableName);\n    try {\n      const stringedId = typeof id === \"number\" ? id.toString() : id;\n      const query = select.selectById(stringedId);\n      log(query, this.logs);\n      const [rows] = await this.mysqlPool.query<RowDataPacket[]>(query);\n      return rows[0] as T;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Save a new model instance to the database.\n   *\n   * @param {Model} model - Model instance to be saved.\n   * @param {Transaction} trx - Transaction to be used on the save operation.\n   * @returns Promise resolving to the saved model or null if saving fails.\n   */\n  public async save(model: T, trx?: Transaction): Promise<T | null> {\n    if (trx) {\n      return await trx.queryInsert<T>(\n        ModelManagerQueryUtils.parseInsert(model),\n        this.modelInstance.metadata,\n      );\n    }\n\n    try {\n      const insertQuery = ModelManagerQueryUtils.parseInsert(model);\n      log(insertQuery, this.logs);\n      const [rows] = await this.mysqlPool.query<RowDataPacket[]>(insertQuery);\n\n      return (await this.findOneById(rows[0].insertId)) || null;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Update an existing model instance in the database.\n   * @param {Model} model - Model instance to be updated.\n   * @param {Transaction} trx - Transaction to be used on the update operation.\n   * @returns Promise resolving to the updated model or null if updating fails.\n   */\n  public async update(model: T, trx?: Transaction): Promise<number> {\n    if (trx) {\n      const primaryKeyValue = model[\"metadata\"][\"primaryKey\"];\n      return await trx.queryUpdate<T>(\n        ModelManagerQueryUtils.parseUpdate(model),\n      );\n    }\n\n    try {\n      const updateQuery = ModelManagerQueryUtils.parseUpdate(model);\n      log(updateQuery, this.logs);\n      const [rows]: any =\n        await this.mysqlPool.query<RowDataPacket[]>(updateQuery);\n\n      return rows.affectedRows;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Delete a record from the database from the given column and value.\n   *\n   * @param {string} column - Column to filter by.\n   * @param {string | number | boolean} value - Value to filter by.\n   * @param {Transaction} trx - Transaction to be used on the delete operation.\n   * @returns Promise resolving to the deleted model or null if deleting fails.\n   */\n  public async deleteByColumn(\n    column: string,\n    value: string | number | boolean,\n    trx?: Transaction,\n  ): Promise<number> {\n    if (trx) {\n      return await trx.queryDelete(\n        ModelManagerQueryUtils.parseDelete(this.tableName, column, value),\n      );\n    }\n\n    try {\n      const deleteQuery = ModelManagerQueryUtils.parseDelete(\n        this.tableName,\n        column,\n        value,\n      );\n      log(deleteQuery, this.logs);\n      const [rows]: any =\n        await this.mysqlPool.query<RowDataPacket[]>(deleteQuery);\n      return rows.affectedRows;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Delete a record from the database from the given model.\n   *\n   * @param {Model} model - Model to delete.\n   * @param {Transaction} trx - Transaction to be used on the delete operation.\n   * @returns Promise resolving to the deleted model or null if deleting fails.\n   */\n  public async delete(model: T, trx?: Transaction): Promise<number> {\n    try {\n      if (!model.metadata.primaryKey) {\n        throw new Error(\n          \"Model \" +\n            model.metadata.tableName +\n            \" has no primary key to be deleted from, try deleteByColumn\",\n        );\n      }\n      const deleteQuery = ModelManagerQueryUtils.parseDelete(\n        this.tableName,\n        model.metadata.primaryKey,\n        model.metadata[\"primaryKey\"],\n      );\n\n      if (trx) {\n        return await trx.queryDelete(deleteQuery);\n      }\n\n      log(deleteQuery, this.logs);\n      const [rows]: any =\n        await this.mysqlPool.query<RowDataPacket[]>(deleteQuery);\n      return rows.affectedRows;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Creates a new transaction.\n   * @returns {Transaction} - Instance of Transaction.\n   */\n  public createTransaction(): Transaction {\n    return new Transaction(this.mysqlPool, this.tableName, this.logs);\n  }\n\n  /**\n   * Create and return a new instance of the QueryBuilder for building more complex SQL queries.\n   *\n   * @returns {QueryBuilder<Model>} - Instance of QueryBuilder.\n   */\n  public queryBuilder(): QueryBuilder<T> {\n    return new QueryBuilder<T>(\n      this.model,\n      this.tableName,\n      this.mysqlPool,\n      this.logs,\n    );\n  }\n}\n","import { ColumnConfig, ColumnType } from \"./ColumnTypes\";\n\nexport class Column {\n  public name!: string;\n  public oldName?: string; // used for alter table\n  public type!: ColumnType;\n  public values?: string[];\n  public length?: number;\n  public alter?: boolean; // used for alter table\n  public after?: string; // used for alter table\n  public config: ColumnConfig = {\n    nullable: true,\n    unique: false,\n    autoIncrement: false,\n    primary: false,\n    defaultValue: false,\n    autoCreate: false,\n    autoUpdate: false,\n    references: undefined,\n    unsigned: false,\n    cascade: false,\n  };\n\n  public getColumn(): Column {\n    return this;\n  }\n}\n","export class DropColumn {\n  public name: string;\n  public foreignKey: boolean;\n\n  constructor(name: string, foreignKey: boolean = false) {\n    this.name = name;\n    this.foreignKey = foreignKey;\n  }\n\n  public getColumn(): DropColumn {\n    return this;\n  }\n}\n","import { Column } from \"../Column\";\nimport { Table } from \"../../Table\";\nimport { MigrationType } from \"../../Migration\";\n\nexport class ColumnConfigBuilder {\n  protected column: Column;\n  protected table: Table;\n  protected migrationType: MigrationType;\n\n  constructor(column: Column, table: Table, migrationType: MigrationType) {\n    this.column = column;\n    this.table = table;\n    this.migrationType = migrationType;\n  }\n\n  public nullable(): ColumnConfigBuilder {\n    this.column.config.nullable = true;\n    return this;\n  }\n\n  public notNullable(): ColumnConfigBuilder {\n    this.column.config.nullable = false;\n    return this;\n  }\n\n  public unique(): ColumnConfigBuilder {\n    this.column.config.unique = true;\n    return this;\n  }\n\n  public autoIncrement(): ColumnConfigBuilder {\n    this.column.config.autoIncrement = true;\n    return this;\n  }\n\n  public primary(): ColumnConfigBuilder {\n    this.column.config.primary = true;\n    return this;\n  }\n\n  public cascade(): ColumnConfigBuilder {\n    this.column.config.cascade = true;\n    return this;\n  }\n\n  public defaultValue(value: string): ColumnConfigBuilder {\n    this.column.config.defaultValue = value;\n    return this;\n  }\n\n  public autoCreate(): ColumnConfigBuilder {\n    this.column.config.autoCreate = true;\n    return this;\n  }\n\n  public autoUpdate(): ColumnConfigBuilder {\n    this.column.config.autoUpdate = true;\n    return this;\n  }\n\n  public references(table: string, column: string): ColumnConfigBuilder {\n    this.column.config.references = {\n      table,\n      column,\n    };\n    return this;\n  }\n\n  public unsigned(): ColumnConfigBuilder {\n    this.column.config.unsigned = true;\n    return this;\n  }\n\n  public commit(): void {\n    switch (this.migrationType) {\n      case \"create\":\n        this.table.columnsToAdd.push(this.column);\n        break;\n      case \"alter\":\n        this.table.columnsToAlter.push(this.column);\n        break;\n    }\n  }\n\n  public alter(): ColumnConfigBuilder {\n    this.column.alter = true;\n    return this;\n  }\n\n  public after(columnName: string): ColumnConfigBuilder {\n    this.column.after = columnName;\n    return this;\n  }\n}\n","import { Column } from \"../Column\";\nimport { ColumnConfigBuilder } from \"./ColumnConfigBuilder\";\nimport { Table } from \"../../Table\";\nimport { MigrationType } from \"../../Migration\";\n\nexport class ColumnTypeBuilder {\n  protected column: Column;\n  protected table: Table;\n  protected migrationType: MigrationType;\n\n  constructor(column: Column, table: Table, migrationType: MigrationType) {\n    this.column = column;\n    this.table = table;\n    this.migrationType = migrationType;\n  }\n\n  public string(name: string, length: number = 100): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"VARCHAR\";\n    this.column.length = length;\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public text(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"TEXT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public int(name: string, length: number = 100): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"INT\";\n    this.column.length = length;\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public bigInt(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"BIGINT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public float(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"FLOAT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public double(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"DOUBLE\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public decimal(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"DECIMAL\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public boolean(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"BOOLEAN\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public date(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"DATE\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public dateTime(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"DATETIME\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public time(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"TIME\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public timestamp(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"TIMESTAMP\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public bit(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"BIT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public enum(name: string, values: string[]): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"ENUM\";\n    this.column.values = values;\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public set(name: string, values: string[]): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"SET\";\n    this.column.values = values;\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public uuid(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"UUID\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public char(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"CHAR\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public tinyText(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"TINYTEXT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public mediumText(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"MEDIUMTEXT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public longText(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"LONGTEXT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public tinyInteger(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"TINYINT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public smallInteger(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"SMALLINT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public mediumInteger(name: string): ColumnConfigBuilder {\n    this.column.name = name;\n    this.column.type = \"MEDIUMINT\";\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public renameColumn(oldName: string, newName: string): ColumnConfigBuilder {\n    this.column.oldName = oldName;\n    this.column.name = newName;\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public commit(): void {\n    switch (this.migrationType) {\n      case \"create\":\n        this.table.columnsToAdd.push(this.column);\n        break;\n      case \"alter\":\n        this.table.columnsToAlter.push(this.column);\n        break;\n    }\n  }\n\n  public alter(): ColumnConfigBuilder {\n    this.column.alter = true;\n    return new ColumnConfigBuilder(this.column, this.table, this.migrationType);\n  }\n\n  public after(columnName: string): ColumnTypeBuilder {\n    this.column.after = columnName;\n    return this;\n  }\n}\n","import { Column } from \"./Columns/Column\";\nimport { DropColumn } from \"./Columns/DropColumn\";\nimport { ColumnTypeBuilder } from \"./Columns/ColumnBuilders/ColumnTypeBuilder\";\nimport { MigrationType } from \"./Migration\";\n\nexport class Table {\n  public tableName: string;\n  public columnsToAdd: Column[] = [];\n  public columnsToAlter: Column[] = [];\n  public columnsToDelete: DropColumn[] = [];\n  public dropTable: boolean = false;\n  public truncateTable: boolean = false;\n  public migrationType!: MigrationType;\n\n  constructor(tableName: string, migrationType: MigrationType) {\n    this.tableName = tableName;\n    this.migrationType = migrationType;\n  }\n\n  public column(): ColumnTypeBuilder {\n    const column = new Column();\n    return new ColumnTypeBuilder(column, this, this.migrationType);\n  }\n\n  public dropColumn(columnName: string, foreignKey?: boolean): void {\n    const column = new DropColumn(columnName, foreignKey);\n    this.columnsToDelete.push(column);\n  }\n\n  public drop(): void {\n    this.dropTable = true;\n  }\n\n  public truncate(): void {\n    this.truncateTable = true;\n  }\n}\n","import { Table } from \"./Table\";\nimport path from \"path\";\n\nexport type MigrationType = \"create\" | \"alter\" | \"rawQuery\" | \"drop\";\n\nexport abstract class Migration {\n  public migrationName: string = path.basename(__filename);\n  public tableName!: string;\n  public migrationType!: MigrationType;\n  public table!: Table;\n  public rawQuery: string = \"\";\n\n  public abstract up(): void;\n  public abstract down(): void;\n\n  /**\n   * @description Use this method to manage a table in your database (create, alter, drop)\n   * @param tableName\n   * @param migrationType\n   */\n  public useTable(tableName: string, migrationType: MigrationType): void {\n    this.tableName = tableName;\n    this.migrationType = migrationType;\n    this.table = new Table(this.tableName, this.migrationType);\n  }\n\n  /**\n   * @description Use this method to run a raw query in your database\n   * @param query\n   */\n  public useRawQuery(query: string): void {\n    this.migrationType = \"rawQuery\";\n    this.rawQuery = query;\n  }\n}\n"],"mappings":";;;;;;;;AAQO,IAAe,QAAf,MAAqB;AAAA,EAGhB,YAAY,WAAoB,YAAqB;AAF/D,wBAAO;AAGL,SAAK,WAAW;AAAA,MACd,WAAW,aAAa,KAAK,YAAY;AAAA,MACzC;AAAA,IACF;AAAA,EACF;AAAA,EAEO,SAAyB,MAAwB;AACtD,eAAW,OAAO,MAAM;AACtB,aAAO,OAAO,MAAM,EAAE,CAAC,GAAG,GAAG,KAAK,GAAG,EAAE,CAAC;AAAA,IAC1C;AAAA,EACF;AACF;;;ACXO,IAAe,WAAf,MAAwB;AAAA,EAKnB,YAAY,cAAsB;AAH5C,wBAAO;AACP,wBAAO;AAGL,SAAK,eAAe;AAAA,EACtB;AACF;;;ACjBO,IAAM,SAAN,cAAqB,SAAS;AAAA,EAI5B,YAAY,cAAsB,YAAoB;AAC3D,UAAM,YAAY;AAJpB,wBAAO;AACP,wBAAO;AAIL,SAAK,aAAa;AAClB,SAAK;AAAA,EACP;AACF;;;ACTO,IAAM,UAAN,cAAsB,SAAS;AAAA,EAI7B,YAAY,cAAsB,YAAoB;AAC3D,UAAM,YAAY;AAJpB,wBAAO;AACP,wBAAO;AAIL,SAAK,aAAa;AAClB,SAAK;AAAA,EACP;AACF;;;ACTO,IAAM,YAAN,cAAwB,SAAS;AAAA,EAI/B,YAAY,cAAsB,YAAoB;AAC3D,UAAM,YAAY;AAJpB,wBAAO;AACP,wBAAO;AAIL,SAAK,aAAa;AAClB,SAAK;AAAA,EACP;AACF;;;ACMO,IAAe,aAAf,MAA0B;AAAA,EASrB,YAAY,OAAwB;AAR9C,wBAAU;AACV,wBAAU;AACV,wBAAU;AACV,wBAAU;AACV,wBAAU;AACV,wBAAU;AACV,wBAAU;AAGR,SAAK,OAAO,MAAM;AAClB,SAAK,OAAO,MAAM;AAClB,SAAK,OAAO,MAAM;AAClB,SAAK,WAAW,MAAM;AACtB,SAAK,WAAW,MAAM;AACtB,SAAK,WAAW,MAAM;AACtB,SAAK,OAAO,MAAM,QAAQ;AAAA,EAC5B;AAIF;;;ACtCA,SAA+B,kBAAkB;;;ACDjD,IAAM,iBAAiB,CAAC,UAAkB;AACxC,SAAO;AAAA,IACL,WAAW,iBAAiB,KAAK;AAAA,IACjC,YAAY,CAAC,OAAe,iBAAiB,KAAK,eAAe,EAAE;AAAA,IACnE,eAAe,IAAI,YACjB,UAAU,QAAQ,KAAK,IAAI,CAAC,SAAS,KAAK;AAAA,IAC5C,aAAa,wBAAwB,KAAK;AAAA,IAC1C,gBAAgB,IAAI,YAClB,mBAAmB,QAAQ,KAAK,IAAI,CAAC,SAAS,KAAK;AAAA,IACrD,WAAW,CAAC,WAAmB,cAAc,MAAM,UAAU,KAAK;AAAA,IAClE,SAAS,CAAC,QAAkB,UAC1B;AAAA,WAAc,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK;AAAA,IAC1C,SAAS,IAAI,YAAsB;AAAA,WAAc,QAAQ,KAAK,IAAI,CAAC;AAAA,IACnE,OAAO,CAAC,UAAkB;AAAA,QAAW,KAAK;AAAA,IAC1C,QAAQ,CAAC,WAAmB;AAAA,SAAY,MAAM;AAAA,EAChD;AACF;AAeA,IAAO,iBAAQ;;;AC/Bf,IAAM,iBAAiB,CAAC,cAAsB;AAC5C,SAAO;AAAA,IACL,QAAQ,CAAC,SAAmB,WAAqB;AAC/C,eAAS,YAAY,MAAM;AAC3B,aAAO,eAAe,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAAA,iBAC3C,OAAO,KAAK,IAAI,CAAC;AAAA,IAC9B;AAAA,IACA,YAAY,CAAC,SAAmB,WAAuB;AACrD,YAAM,eAAe,OAAO,IAAI,WAAW;AAC3C,YAAM,YAAY,aAAa,IAAI,CAAC,QAAQ,IAAI,IAAI,KAAK,IAAI,CAAC,GAAG;AACjE,aAAO,eAAe,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAAA,gBAC5C,UAAU,KAAK,IAAI,CAAC;AAAA,IAChC;AAAA,EACF;AACF;AAEA,SAAS,YAAY,QAAkB;AACrC,SAAO,OAAO,IAAI,CAAC,UAAe;AAChC,QAAI,OAAO,UAAU,UAAU;AAC7B,aAAO,IAAI,KAAK;AAAA,IAClB;AAEA,WAAO,SAAS;AAAA,EAClB,CAAC;AACH;AAEA,IAAO,iBAAQ;;;AC1Bf,IAAM,iBAAiB,CAAC,UAAkB;AACxC,SAAO;AAAA,IACL,QAAQ,CACN,SACA,QACA,YACA,oBAEA,UAAU,KAAK,QAAQ,QACpB,IAAI,CAAC,QAAQ,UAAU,iBAAiB,QAAQ,OAAO,KAAK,CAAC,CAAC,EAC9D,KAAK,IAAI,CAAC,UAAU,UAAU,MAAM,eAAe;AAAA,EAC1D;AACF;AAEA,SAAS,iBAAiB,QAAgB,OAAY;AACpD,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO,GAAG,MAAM,OAAO,KAAK;AAAA,EAC9B;AAEA,SAAO,GAAG,MAAM,MAAM,KAAK;AAC7B;AAEA,IAAO,iBAAQ;;;ACtBf,IAAM,iBAAiB,CAAC,cAAsB;AAC5C,SAAO;AAAA,IACL,QAAQ,CAAC,QAAgB,UACvB;AAAA,cAAiB,SAAS,UAAU,MAAM,MAAM,KAAK;AAAA,EACzD;AACF;AAEA,IAAO,iBAAQ;;;ACPf,OAAO,aAAa;AASpB,IAAM,SAAoB;AAAA,EACxB,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AACT;AAEA,IAAM,YAAY,QAAQ,OAAO;AAAA,EAC/B,QAAQ,OAAO,UAAU,EAAE,QAAQ,sBAAsB,CAAC;AAAA,EAC1D,QAAQ,OAAO,OAAO,CAAC,EAAE,OAAO,SAAS,UAAU,MAAM;AACvD,UAAM,QAAQ,OAAO,KAAK,KAAK;AAC/B,WAAO,GAAG,SAAS,IAAI,KAAK,GAAG,KAAK,YAAY,KAAK,GAAG,OAAO;AAAA,EACjE,CAAC;AACH;AAEA,IAAM,mBAAmB,IAAI,QAAQ,WAAW,QAAQ;AACxD,IAAM,gBAAgB,IAAI,QAAQ,WAAW,KAAK,EAAE,UAAU,cAAc,CAAC;AAE7E,IAAM,SAAS,QAAQ,aAAa;AAAA,EAClC,QAAQ;AAAA,EACR,YAAY,CAAC,kBAAkB,aAAa;AAC9C,CAAC;AAEM,SAAS,IAAI,OAAe,MAAe;AAChD,MAAI,CAAC,MAAM;AACT;AAAA,EACF;AAEA,SAAO,KAAK,OAAO,KAAK;AAC1B;AACO,SAAS,WAAW,OAAY;AACrC,SAAO,MAAM,iBAAiB,KAAK;AACrC;;;AClCA,SAAS,kBAAmC,OAAU,UAAoB;AACxE,QAAM,aAAa,MAAM,SAAS;AAClC,UAAQ,SAAS,MAAM;AAAA,IACrB;AACE,aAAO,iBAAiB,SAAS,YAAY,UAAU,SAAS,YAAY,IAAI,SAAS,UAAU,MAAM,MAAM,UAAU,CAAC;AAAA,IAE5H;AACE,aAAO,iBAAiB,SAAS,YAAY,UAC3C,SAAS,YACX,SAAS,MAAM,SAAS,UAAqB,CAAC;AAAA,IAEhD;AACE,aAAO,iBAAiB,SAAS,YAAY,UAAU,SAAS,YAAY,IAAI,SAAS,UAAU,MAAM,MAAM,UAAU,CAAC;AAAA,IAE5H;AACE,aAAO;AAAA,EACX;AACF;AAEA,IAAO,oBAAQ;;;ACvBf,IAAM,gBAAgB,CAAC,cAAsB;AAC3C,SAAO;AAAA,IACL,OAAO,CAAC,QAAgB,OAAe,WAA8B,QACnE;AAAA,QAAW,SAAS,IAAI,MAAM,MAAM,KAAK;AAAA,IAC3C,UAAU,CACR,QACA,OACA,WAA8B,QAC3B,QAAQ,SAAS,IAAI,MAAM,MAAM,KAAK;AAAA,IAC3C,SAAS,CACP,QACA,OACA,WAA8B,QAC3B,OAAO,SAAS,IAAI,MAAM,MAAM,KAAK;AAAA,IAC1C,UAAU,CAAC,QAAgB,UACzB;AAAA,QAAW,SAAS,IAAI,MAAM,OAAO,KAAK;AAAA,IAC5C,aAAa,CAAC,QAAgB,UAC5B,QAAQ,SAAS,IAAI,MAAM,OAAO,KAAK;AAAA,IACzC,YAAY,CAAC,QAAgB,UAC3B,OAAO,SAAS,IAAI,MAAM,OAAO,KAAK;AAAA,IACxC,WAAW,CAAC,WAAmB;AAAA,QAAW,SAAS,IAAI,MAAM;AAAA,IAC7D,cAAc,CAAC,WAAmB,QAAQ,SAAS,IAAI,MAAM;AAAA,IAC7D,aAAa,CAAC,WAAmB,OAAO,SAAS,IAAI,MAAM;AAAA,IAC3D,cAAc,CAAC,WACb;AAAA,QAAW,SAAS,IAAI,MAAM;AAAA,IAChC,iBAAiB,CAAC,WAChB,QAAQ,SAAS,IAAI,MAAM;AAAA,IAC7B,gBAAgB,CAAC,WACf,OAAO,SAAS,IAAI,MAAM;AAAA,IAC5B,cAAc,CAAC,QAAgB,KAAa,QAC1C;AAAA,QAAW,SAAS,IAAI,MAAM,YAAY,GAAG,QAAQ,GAAG;AAAA,IAC1D,iBAAiB,CAAC,QAAgB,KAAa,QAC7C,QAAQ,SAAS,IAAI,MAAM,YAAY,GAAG,QAAQ,GAAG;AAAA,IACvD,gBAAgB,CAAC,QAAgB,KAAa,QAC5C,OAAO,SAAS,IAAI,MAAM,YAAY,GAAG,QAAQ,GAAG;AAAA,IACtD,iBAAiB,CAAC,QAAgB,KAAa,QAC7C;AAAA,QAAW,SAAS,IAAI,MAAM,gBAAgB,GAAG,QAAQ,GAAG;AAAA,IAC9D,oBAAoB,CAAC,QAAgB,KAAa,QAChD,QAAQ,SAAS,IAAI,MAAM,gBAAgB,GAAG,QAAQ,GAAG;AAAA,IAC3D,mBAAmB,CAAC,QAAgB,KAAa,QAC/C,OAAO,SAAS,IAAI,MAAM,gBAAgB,GAAG,QAAQ,GAAG;AAAA,IAC1D,SAAS,CAAC,QAAgB,WACxB;AAAA,QAAW,SAAS,IAAI,MAAM,QAAQ,OAAO,KAAK,IAAI,CAAC;AAAA,IACzD,YAAY,CAAC,QAAgB,WAC3B,QAAQ,SAAS,IAAI,MAAM,QAAQ,OAAO,KAAK,IAAI,CAAC;AAAA,IACtD,WAAW,CAAC,QAAgB,WAC1B,OAAO,SAAS,IAAI,MAAM,QAAQ,OAAO,KAAK,IAAI,CAAC;AAAA,IACrD,YAAY,CAAC,QAAgB,WAC3B;AAAA,QAAW,SAAS,IAAI,MAAM,YAAY,OAAO,KAAK,IAAI,CAAC;AAAA,IAC7D,eAAe,CAAC,QAAgB,WAC9B,QAAQ,SAAS,IAAI,MAAM,YAAY,OAAO,KAAK,IAAI,CAAC;AAAA,IAC1D,cAAc,CAAC,QAAgB,WAC7B,OAAO,SAAS,IAAI,MAAM,YAAY,OAAO,KAAK,IAAI,CAAC;AAAA,IACzD,UAAU,CAAC,UAAkB;AAAA,QAAW,KAAK;AAAA,IAC7C,aAAa,CAAC,UAAkB,QAAQ,KAAK;AAAA,IAC7C,YAAY,CAAC,UAAkB,OAAO,KAAK;AAAA,EAC7C;AACF;AAwCA,IAAO,mBAAQ;;;ACvFf,IAAM,oBAAN,MAAyC;AAAA,EAChC,sBACL,OACA,OACQ;AACR,QAAI,QAAQ;AACZ,aAAS,KAAK,YAAY,MAAM,SAAS,WAAW,KAAK;AACzD,aAAS,KAAK,WAAW,MAAM,SAAS,WAAW,KAAK;AACxD,aAAS,KAAK,iBAAiB,MAAM,SAAS,WAAW,KAAK;AAE9D,WAAO;AAAA,EACT;AAAA,EAEQ,YACN,WACA,OACQ;AACR,UAAM,SAAS,eAAe,SAAS;AACvC,WAAO,MAAM,SACT,OAAO,cAAc,GAAG,MAAM,MAAM,IACpC,OAAO;AAAA,EACb;AAAA,EAEQ,WAAW,WAAmB,OAAuC;AAC3E,UAAM,QAAQ,iBAAc,SAAS;AACrC,QAAI,CAAC,MAAM,OAAO;AAChB,aAAO;AAAA,IACT;AAEA,QAAI,QAAQ;AACZ,UAAM,UAAU,OAAO,QAAQ,MAAM,KAAK;AAC1C,aAAS,QAAQ,GAAG,QAAQ,QAAQ,QAAQ,SAAS;AACnD,YAAM,CAAC,KAAK,KAAK,IAAI,QAAQ,KAAK;AAElC,UAAI,UAAU,GAAG;AACf,iBAAS,MAAM,MAAM,KAAK,KAAK;AAC/B;AAAA,MACF;AACA,eAAS,MAAM,SAAS,KAAK,KAAK;AAAA,IACpC;AAEA,WAAO;AAAA,EACT;AAAA,EACQ,iBACN,WACA,OACQ;AACR,QAAI,CAAC,KAAK,WAAW,KAAK,GAAG;AAC3B,aAAO;AAAA,IACT;AAEA,UAAM,SAAS,eAAe,SAAS;AACvC,QAAI,QAAQ;AACZ,QAAI,MAAM,QAAQ;AAChB,eAAS,OAAO,OAAO,MAAM,MAAM;AAAA,IACrC;AAEA,QAAI,MAAM,SAAS;AACjB,eAAS,OAAO,QAAQ,GAAG,MAAM,OAAO;AAAA,IAC1C;AAEA,QAAI,MAAM,SAAS;AACjB,eAAS,OAAO,QAAQ,CAAC,GAAG,MAAM,QAAQ,OAAO,GAAG,MAAM,QAAQ,IAAI;AAAA,IACxE;AAEA,QAAI,MAAM,OAAO;AACf,eAAS,OAAO,MAAM,MAAM,KAAK;AAAA,IACnC;AAEA,WAAO;AAAA,EACT;AAAA,EAEO,YAAY,OAAkB;AACnC,UAAM,gBAAgB,KAAK,2BAA2B,KAAK;AAC3D,UAAM,OAAO,OAAO,KAAK,aAAa;AACtC,UAAM,SAAS,OAAO,OAAO,aAAa;AAC1C,UAAM,SAAS,eAAe,MAAM,SAAS,SAAS;AAEtD,WAAO,OAAO,OAAO,MAAM,MAAM;AAAA,EACnC;AAAA,EAEO,YAAY,OAAU,WAA4B;AACvD,UAAM,SAAS,eAAe,aAAa,MAAM,SAAS,SAAS;AACnE,UAAM,gBAAgB,KAAK,2BAA2B,KAAK;AAC3D,UAAM,OAAO,OAAO,KAAK,aAAa;AACtC,UAAM,SAAS,OAAO,OAAO,aAAa;AAE1C,UAAM,aAAa,MAAM,SAAS;AAClC,UAAM,kBAAkB,MAAM,UAAqB;AAEnD,WAAO,OAAO,OAAO,MAAM,QAAQ,YAAY,eAAyB;AAAA,EAC1E;AAAA,EAEQ,2BAA2B,OAAa;AAC9C,UAAM,gBAAgB,CAAC;AAEvB,UAAM,OAAO,OAAO,KAAK,KAAK;AAC9B,eAAW,OAAO,MAAM;AACtB,UAAI,QAAQ,YAAY;AACtB;AAAA,MACF;AAEA,UACE,OAAO,MAAM,GAAc,MAAM,aAChC,MAAM,GAAc,MAAM,QACzB,CAAC,MAAM,QAAQ,MAAM,GAAc,CAAC,IACtC;AACA;AAAA,MACF;AAEA,aAAO,OAAO,eAAe,EAAE,CAAC,GAAG,GAAG,MAAM,GAAc,EAAE,CAAC;AAAA,IAC/D;AAEA,WAAO;AAAA,EACT;AAAA,EAEO,YACL,WACA,QACA,OACQ;AACR,WAAO,eAAe,SAAS,EAAE,OAAO,QAAQ,MAAM,SAAS,CAAC;AAAA,EAClE;AAAA,EAEQ,WAAW,OAAkD;AACnE,UAAM,WAAW;AACjB,WACE,SAAS,eAAe,QAAQ,KAChC,SAAS,eAAe,SAAS,KACjC,SAAS,eAAe,SAAS,KACjC,SAAS,eAAe,OAAO;AAAA,EAEnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BQ,qBAAqB,OAAU,eAAiC;AACtE,UAAM,WAAW,MAAM,aAAwB;AAC/C,QAAI,CAAC,UAAU;AACb,YAAM,IAAI;AAAA,QACR,cACE,gBACA,yBACA,MAAM,SAAS;AAAA,MACnB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,MAAa,mBACX,OACA,OACA,iBACA,MACe;AACf,QAAI,CAAC,MAAM,WAAW;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,MAAM,SAAS,YAAY;AAC9B,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AAEA,QAAI;AACF,YAAM,mBAAmB,MAAM,UAAU;AAAA,QACvC,OAAO,kBAA0B;AAC/B,gBAAM,WAAW,KAAK,qBAAqB,OAAO,aAAa;AAC/D,gBAAM,gBAAgB,kBAAkB,OAAO,QAAQ;AACvD,kBAAQ,IAAI,aAAa;AAEzB,gBAAM,CAAC,aAAa,IAClB,MAAM,gBAAgB,MAAuB,aAAa;AAC5D,cAAI,cAAc,WAAW,GAAG;AAC9B,mBAAO,OAAO,OAAO,EAAE,CAAC,aAAwB,GAAG,KAAK,CAAC;AACzD,gBAAI,eAAe,IAAI;AACvB;AAAA,UACF;AAEA,cAAI,cAAc,WAAW,GAAG;AAC9B,mBAAO,OAAO,OAAO;AAAA,cACnB,CAAC,aAAwB,GAAG,cAAc,CAAC;AAAA,YAC7C,CAAC;AACD,gBAAI,eAAe,IAAI;AACvB;AAAA,UACF;AAEA,iBAAO,OAAO,OAAO,EAAE,CAAC,aAAwB,GAAG,cAAc,CAAC;AAClE,cAAI,eAAe,IAAI;AAAA,QACzB;AAAA,MACF;AAEA,YAAM,QAAQ,IAAI,gBAAgB;AAAA,IACpC,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,+BAA+B,KAAK;AAAA,IACtD;AAAA,EACF;AAAA;AAAA,EAGA,MAAa,2BACX,OACA,OACA,iBACA,MACe;AACf,QAAI,MAAM,WAAW,GAAG;AACtB;AAAA,IACF;AAEA,QAAI,CAAC,MAAM,SAAS,YAAY;AAC9B,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AAEA,QAAI,gBAAwB;AAC5B,QAAI;AACF,YAAM,mBAAmB,MAAM,IAAI,OAAO,kBAA0B;AAClE,cAAM,WAAW,KAAK,qBAAqB,OAAO,aAAa;AAC/D,wBAAgB,kBAAkB,OAAO,QAAQ;AAEjD,cAAM,CAAC,aAAa,IAClB,MAAM,gBAAgB,MAAuB,aAAa;AAC5D,YAAI,cAAc,WAAW,GAAG;AAC9B,iBAAO,OAAO,OAAO,EAAE,CAAC,aAAwB,GAAG,KAAK,CAAC;AACzD,cAAI,eAAe,IAAI;AACvB;AAAA,QACF;AAEA,YAAI,cAAc,WAAW,GAAG;AAC9B,iBAAO,OAAO,OAAO;AAAA,YACnB,CAAC,aAAwB,GAAG,cAAc,CAAC;AAAA,UAC7C,CAAC;AACD,cAAI,eAAe,IAAI;AACvB;AAAA,QACF;AAEA,eAAO,OAAO,OAAO,EAAE,CAAC,aAAwB,GAAG,cAAc,CAAC;AAClE,YAAI,eAAe,IAAI;AAAA,MACzB,CAAC;AAED,YAAM,QAAQ,IAAI,gBAAgB;AAAA,IACpC,SAAS,OAAO;AACd,iBAAW,kBAAkB,gBAAgB,KAAK;AAClD,YAAM,IAAI,MAAM,+BAA+B,KAAK;AAAA,IACtD;AAAA,EACF;AACF;AAEA,IAAO,4BAAQ,IAAI,kBAAkB;;;ACpR9B,IAAM,eAAN,MAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBlC,YACL,OACA,WACA,iBACA,MACA;AA5BF,wBAAU,eAAsB;AAChC,wBAAU,aAAsB,CAAC;AACjC,wBAAU,cAAqB;AAC/B,wBAAU,gBAAuB;AACjC,wBAAU,gBAAuB;AACjC,wBAAU,cAAqB;AAC/B,wBAAU,eAAsB;AAEhC,wBAAU;AACV,wBAAU;AACV,wBAAU;AACV,wBAAU;AAEV,wBAAU;AACV,wBAAU;AAeR,SAAK,QAAQ;AACb,SAAK,kBAAkB;AACvB,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,cAAc,eAAe,KAAK,SAAS,EAAE;AAClD,SAAK,iBAAiB,eAAe,KAAK,SAAS;AACnD,SAAK,gBAAgB,iBAAc,KAAK,SAAS;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAa,MAAyB;AACpC,QAAI,QAAQ,KAAK;AACjB,QAAI,KAAK,YAAY;AACnB,eAAS,KAAK;AAAA,IAChB;AAEA,QAAI,OAAO,KAAK,IAAI;AACpB,UAAM,QAAQ,IAAI,KAAK,MAAM;AAC7B,QAAI;AACF,YAAM,CAAC,IAAI,IAAI,MAAM,KAAK,gBAAgB,MAAuB,KAAK;AACtE,YAAM,YAAY,KAAK,CAAC;AAGxB,aAAO,OAAO,OAAO,SAAS;AAG9B,YAAM,0BAAkB;AAAA,QACtB;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAEA,aAAO;AAAA,IACT,SAAS,OAAO;AACd,YAAM,IAAI,MAAM,kBAAkB,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAa,OAAqB;AAChC,QAAI,QAAQ,KAAK;AACjB,QAAI,KAAK,YAAY;AACnB,eAAS,KAAK;AAAA,IAChB;AAEA,aAAS,KAAK,iBAAiB;AAE/B,QAAI,OAAO,KAAK,IAAI;AACpB,UAAM,QAAQ,IAAI,KAAK,MAAM;AAC7B,QAAI;AACF,YAAM,CAAC,IAAI,IAAI,MAAM,KAAK,gBAAgB,MAAuB,KAAK;AACtE,aAAO,QAAQ;AAAA,QACb,KAAK,IAAI,OAAO,QAAQ;AACtB,gBAAM,YAAY,KAAK,CAAC;AAGxB,iBAAO,OAAO,OAAO,SAAS;AAG9B,gBAAM,0BAAkB;AAAA,YACtB;AAAA,YACA,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,UACP;AAEA,iBAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF,SAAS,OAAO;AACd,YAAM,IAAI,MAAM,kBAAkB,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,UAAU,SAAmB;AAClC,UAAM,SAAS,eAAe,KAAK,SAAS;AAC5C,SAAK,cAAc,OAAO,cAAc,GAAG,OAAO;AAAA,EACpD;AAAA,EAEO,aAAa,WAAqB;AACvC,SAAK,YAAY;AACjB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,MACL,QACA,UACA,OACM;AACN,QAAI,KAAK,YAAY;AACnB,WAAK,cAAc,KAAK,cAAc;AAAA,QACpC;AAAA,QACA,MAAM,SAAS;AAAA,QACf;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,SAAK,aAAa,KAAK,cAAc;AAAA,MACnC;AAAA,MACA,MAAM,SAAS;AAAA,MACf;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,SACL,QACA,UACA,OACM;AACN,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc;AAAA,QACnC;AAAA,QACA,MAAM,SAAS;AAAA,QACf;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE;AAAA,MAC/C;AAAA,MACA,MAAM,SAAS;AAAA,MACf;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,QACL,QACA,UACA,OACM;AACN,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc;AAAA,QACnC;AAAA,QACA,MAAM,SAAS;AAAA,QACf;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE;AAAA,MAC/C;AAAA,MACA,MAAM,SAAS;AAAA,MACf;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,aAAa,QAAgB,KAAa,KAAmB;AAClE,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,aAAa,QAAQ,KAAK,GAAG;AAClE,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE;AAAA,MAC/C;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,gBAAgB,QAAgB,KAAa,KAAmB;AACrE,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,aAAa,QAAQ,KAAK,GAAG;AAClE,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE;AAAA,MAC/C;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,eAAe,QAAgB,KAAa,KAAmB;AACpE,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,aAAa,QAAQ,KAAK,GAAG;AAClE,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE;AAAA,MAC/C;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,gBAAgB,QAAgB,KAAa,KAAmB;AACrE,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,mBAAmB,QAAQ,KAAK,GAAG;AACxE,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE;AAAA,MAC/C;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,kBAAkB,QAAgB,KAAa,KAAmB;AACvE,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,gBAAgB,QAAQ,KAAK,GAAG;AACrE,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE;AAAA,MAC/C;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,QAAQ,QAAgB,QAAwB;AACrD,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,QAAQ,QAAQ,MAAM;AAC3D,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,QAAQ,QAAQ,MAAM;AACvE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,WAAW,QAAgB,QAAwB;AACxD,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,QAAQ,QAAQ,MAAM;AAC3D,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,WAAW,QAAQ,MAAM;AAC1E,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,UAAU,QAAgB,QAAwB;AACvD,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,QAAQ,QAAQ,MAAM;AAC3D,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,UAAU,QAAQ,MAAM;AACzE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,WAAW,QAAgB,QAAwB;AACxD,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,cAAc,QAAQ,MAAM;AACjE,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,WAAW,QAAQ,MAAM;AAC1E,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,aAAa,QAAgB,QAAwB;AAC1D,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,WAAW,QAAQ,MAAM;AAC9D,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE;AAAA,MAC/C;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,UAAU,QAAsB;AACrC,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,aAAa,MAAM;AACxD,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,UAAU,MAAM;AACjE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,aAAa,QAAsB;AACxC,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,UAAU,MAAM;AACrD,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,aAAa,MAAM;AACpE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAY,QAAsB;AACvC,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,UAAU,MAAM;AACrD,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,YAAY,MAAM;AACnE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,aAAa,QAAsB;AACxC,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,gBAAgB,MAAM;AAC3D,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,aAAa,MAAM;AACpE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,gBAAgB,QAAsB;AAC3C,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,aAAa,MAAM;AACxD,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,gBAAgB,MAAM;AACvE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,eAAe,QAAgB;AACpC,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,aAAa,MAAM;AACxD,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,eAAe,MAAM;AACtE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,SAAS,OAAe;AAC7B,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,YAAY,KAAK;AACtD,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,SAAS,KAAK;AAC/D,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAY,OAAe;AAChC,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,SAAS,KAAK;AACnD,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,YAAY,KAAK;AAClE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,OAAe;AAC/B,QAAI,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa,KAAK,cAAc,SAAS,KAAK;AACnD,aAAO;AAAA,IACT;AACA,SAAK,cAAc,iBAAc,KAAK,SAAS,EAAE,WAAW,KAAK;AACjE,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,WAAW,SAAmB;AACnC,SAAK,eAAe,KAAK,eAAe,QAAQ,GAAG,OAAO;AAC1D,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,QAAQ,QAAkB,OAAuB;AACtD,SAAK,eAAe,KAAK,eAAe,QAAQ,QAAQ,KAAK;AAC7D,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,MAAM,OAAe;AAC1B,SAAK,aAAa,KAAK,eAAe,MAAM,KAAK;AACjD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,OAAO,QAAgB;AAC5B,SAAK,cAAc,KAAK,eAAe,OAAO,MAAM;AACpD,WAAO;AAAA,EACT;AAAA,EAEU,mBAA2B;AACnC,WACE,KAAK,eAAe,KAAK,eAAe,KAAK,aAAa,KAAK;AAAA,EAEnE;AACF;;;AC3jBO,IAAM,oBAAoB;AAC1B,IAAM,qBAAqB;AAC3B,IAAM,uBAAuB;;;ACM7B,IAAM,cAAN,MAAkB;AAAA,EAMvB,YAAY,OAAa,WAAmB,MAAe;AAL3D,wBAAU;AACV,wBAAU;AACV,wBAAU;AACV,wBAAU;AAGR,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,MAAa,YACX,OACA,UACA,QACY;AACZ,QAAI,CAAC,KAAK,iBAAiB;AACzB,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC5C;AAEA,QAAI,OAAO,KAAK,IAAI;AACpB,UAAM,CAAC,IAAI,IAAS,MAAM,KAAK,gBAAgB;AAAA,MAC7C;AAAA,MACA;AAAA,IACF;AACA,UAAM,WAAW,KAAK;AACtB,UAAM,SAAS,eAAe,KAAK,SAAS,EAAE,WAAW,QAAQ;AACjE,UAAM,CAAC,UAAU,IACf,MAAM,KAAK,gBAAgB,MAAuB,MAAM;AAC1D,WAAO,OAAO,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC;AACzC,WAAO,WAAW,CAAC;AAAA,EACrB;AAAA,EAEA,MAAa,YACX,OACA,QACiB;AACjB,QAAI,CAAC,KAAK,iBAAiB;AACzB,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC5C;AAEA,QAAI,OAAO,KAAK,IAAI;AACpB,UAAM,CAAC,IAAI,IAAS,MAAM,KAAK,gBAAgB;AAAA,MAC7C;AAAA,MACA;AAAA,IACF;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAa,YAAY,OAAe,QAAiC;AACvE,QAAI,CAAC,KAAK,iBAAiB;AACzB,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC5C;AAEA,QAAI,OAAO,KAAK,IAAI;AACpB,UAAM,CAAC,IAAI,IAAS,MAAM,KAAK,gBAAgB;AAAA,MAC7C;AAAA,MACA;AAAA,IACF;AAEA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAuB;AAC3B,QAAI;AACF,UAAI,mBAAmB,KAAK,IAAI;AAChC,WAAK,kBAAkB,MAAM,KAAK,MAAM,cAAc;AACtD,YAAM,KAAK,gBAAgB,MAAM,iBAAiB;AAAA,IACpD,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,iCAAiC,KAAK;AAAA,IACxD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAwB;AAC5B,QAAI,CAAC,KAAK,iBAAiB;AACzB,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC5C;AAEA,QAAI;AACF,UAAI,oBAAoB,KAAK,IAAI;AACjC,YAAM,KAAK,gBAAgB,MAAM,kBAAkB;AACnD,WAAK,gBAAgB,QAAQ;AAAA,IAC/B,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,kCAAkC,KAAK;AAAA,IACzD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAA0B;AAC9B,QAAI,CAAC,KAAK,iBAAiB;AACzB;AAAA,IACF;AAEA,QAAI;AACF,UAAI,sBAAsB,KAAK,IAAI;AACnC,YAAM,KAAK,gBAAgB,MAAM,oBAAoB;AACrD,WAAK,gBAAgB,QAAQ;AAAA,IAC/B,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,oCAAoC,KAAK;AAAA,IAC3D;AAAA,EACF;AACF;;;AC5GO,IAAM,eAAN,MAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAczC,YAAY,OAAoB,iBAAuB,MAAe;AAbtE,wBAAU;AACV,wBAAU;AACV,wBAAU;AACV,wBAAU;AACV,wBAAO;AAUL,SAAK,OAAO;AACZ,SAAK,YAAY,MAAM;AACvB,SAAK,QAAQ;AACb,SAAK,gBAAgB,IAAI,KAAK,MAAM;AACpC,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,KAAK,OAAgC;AAChD,QAAI;AACF,UAAI,CAAC,OAAO;AACV,cAAM,SAAS,eAAe,KAAK,SAAS;AAC5C,YAAI,OAAO,WAAW,KAAK,IAAI;AAC/B,cAAM,CAACA,KAAI,IAAI,MAAM,KAAK,UAAU;AAAA,UAClC,OAAO;AAAA,QACT;AACA,eAAOA,MAAK,IAAI,CAAC,QAAQ,GAAQ,KAAK,CAAC;AAAA,MACzC;AAEA,YAAM,QAAQ,IAAI,KAAK,MAAM;AAC7B,YAAM,QAAQ,0BAAuB;AAAA,QACnC,IAAI,KAAK,MAAM;AAAA,QACf;AAAA,MACF;AACA,UAAI,OAAO,KAAK,IAAI;AACpB,YAAM,CAAC,IAAI,IAAI,MAAM,KAAK,UAAU,MAAuB,KAAK;AAChE,aAAO,QAAQ;AAAA,QACb,KAAK,IAAI,OAAO,QAAQ;AACtB,gBAAM,YAAY,KAAK,CAAC;AAGxB,iBAAO,OAAO,OAAO,SAAS;AAG9B,gBAAM,0BAAkB;AAAA,YACtB;AAAA,YACA;AAAA,YACA,KAAK;AAAA,YACL,KAAK;AAAA,UACP;AAEA,iBAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,kBAAkB,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,QAAQ,OAAuC;AAC1D,UAAM,QAAQ,IAAI,KAAK,MAAM;AAC7B,QAAI;AACF,YAAM,QAAQ,0BAAuB,sBAAsB,OAAO,KAAK;AACvE,UAAI,OAAO,KAAK,IAAI;AACpB,YAAM,CAAC,IAAI,IAAI,MAAM,KAAK,UAAU,MAAuB,KAAK;AAChE,YAAM,YAAY,KAAK,CAAC;AAGxB,aAAO,OAAO,OAAO,SAAS;AAG9B,YAAM,0BAAkB;AAAA,QACtB;AAAA,QACA;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAEA,aAAO;AAAA,IACT,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,kBAAkB,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,YAAY,IAAwC;AAC/D,UAAM,SAAS,eAAe,KAAK,SAAS;AAC5C,QAAI;AACF,YAAM,aAAa,OAAO,OAAO,WAAW,GAAG,SAAS,IAAI;AAC5D,YAAM,QAAQ,OAAO,WAAW,UAAU;AAC1C,UAAI,OAAO,KAAK,IAAI;AACpB,YAAM,CAAC,IAAI,IAAI,MAAM,KAAK,UAAU,MAAuB,KAAK;AAChE,aAAO,KAAK,CAAC;AAAA,IACf,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,kBAAkB,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,KAAK,OAAU,KAAsC;AAChE,QAAI,KAAK;AACP,aAAO,MAAM,IAAI;AAAA,QACf,0BAAuB,YAAY,KAAK;AAAA,QACxC,KAAK,cAAc;AAAA,MACrB;AAAA,IACF;AAEA,QAAI;AACF,YAAM,cAAc,0BAAuB,YAAY,KAAK;AAC5D,UAAI,aAAa,KAAK,IAAI;AAC1B,YAAM,CAAC,IAAI,IAAI,MAAM,KAAK,UAAU,MAAuB,WAAW;AAEtE,aAAQ,MAAM,KAAK,YAAY,KAAK,CAAC,EAAE,QAAQ,KAAM;AAAA,IACvD,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,kBAAkB,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAa,OAAO,OAAU,KAAoC;AAChE,QAAI,KAAK;AACP,YAAM,kBAAkB,MAAM,UAAU,EAAE,YAAY;AACtD,aAAO,MAAM,IAAI;AAAA,QACf,0BAAuB,YAAY,KAAK;AAAA,MAC1C;AAAA,IACF;AAEA,QAAI;AACF,YAAM,cAAc,0BAAuB,YAAY,KAAK;AAC5D,UAAI,aAAa,KAAK,IAAI;AAC1B,YAAM,CAAC,IAAI,IACT,MAAM,KAAK,UAAU,MAAuB,WAAW;AAEzD,aAAO,KAAK;AAAA,IACd,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,kBAAkB,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAa,eACX,QACA,OACA,KACiB;AACjB,QAAI,KAAK;AACP,aAAO,MAAM,IAAI;AAAA,QACf,0BAAuB,YAAY,KAAK,WAAW,QAAQ,KAAK;AAAA,MAClE;AAAA,IACF;AAEA,QAAI;AACF,YAAM,cAAc,0BAAuB;AAAA,QACzC,KAAK;AAAA,QACL;AAAA,QACA;AAAA,MACF;AACA,UAAI,aAAa,KAAK,IAAI;AAC1B,YAAM,CAAC,IAAI,IACT,MAAM,KAAK,UAAU,MAAuB,WAAW;AACzD,aAAO,KAAK;AAAA,IACd,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,kBAAkB,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAa,OAAO,OAAU,KAAoC;AAChE,QAAI;AACF,UAAI,CAAC,MAAM,SAAS,YAAY;AAC9B,cAAM,IAAI;AAAA,UACR,WACE,MAAM,SAAS,YACf;AAAA,QACJ;AAAA,MACF;AACA,YAAM,cAAc,0BAAuB;AAAA,QACzC,KAAK;AAAA,QACL,MAAM,SAAS;AAAA,QACf,MAAM,SAAS,YAAY;AAAA,MAC7B;AAEA,UAAI,KAAK;AACP,eAAO,MAAM,IAAI,YAAY,WAAW;AAAA,MAC1C;AAEA,UAAI,aAAa,KAAK,IAAI;AAC1B,YAAM,CAAC,IAAI,IACT,MAAM,KAAK,UAAU,MAAuB,WAAW;AACzD,aAAO,KAAK;AAAA,IACd,SAAS,OAAO;AACd,iBAAW,KAAK;AAChB,YAAM,IAAI,MAAM,kBAAkB,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,oBAAiC;AACtC,WAAO,IAAI,YAAY,KAAK,WAAW,KAAK,WAAW,KAAK,IAAI;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,eAAgC;AACrC,WAAO,IAAI;AAAA,MACT,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACP;AAAA,EACF;AACF;;;AZ5QO,IAAM,kBAAN,cAA8B,WAAW;AAAA,EAK9C,YAAY,OAAyC;AACnD,UAAM,KAAK;AALb,wBAAU;AACV,wBAAU;AACV,wBAAU;AAIR,SAAK,iBAAiB,MAAM;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAa,UAAyB;AACpC,SAAK,OAAO,WAAW;AAAA,MACrB,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,IACjB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAa,aAA4B;AACvC,WAAO,WAAW;AAAA,MAChB,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,IACjB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAa,uBAAgD;AAC3D,WAAO,WAAW;AAAA,MAChB,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,UAAU,KAAK;AAAA,MACf,UAAU,KAAK;AAAA,IACjB,CAAC,EAAE,cAAc;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,gBAAiC,OAAqC;AAC3E,WAAO,IAAI,aAAgB,OAAO,KAAK,MAAM,KAAK,IAAI;AAAA,EACxD;AACF;;;AanEO,IAAM,SAAN,MAAa;AAAA,EAAb;AACL,wBAAO;AACP,wBAAO;AACP;AAAA,wBAAO;AACP,wBAAO;AACP,wBAAO;AACP,wBAAO;AACP;AAAA,wBAAO;AACP;AAAA,wBAAO,UAAuB;AAAA,MAC5B,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,eAAe;AAAA,MACf,SAAS;AAAA,MACT,cAAc;AAAA,MACd,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA;AAAA,EAEO,YAAoB;AACzB,WAAO;AAAA,EACT;AACF;;;AC1BO,IAAM,aAAN,MAAiB;AAAA,EAItB,YAAY,MAAc,aAAsB,OAAO;AAHvD,wBAAO;AACP,wBAAO;AAGL,SAAK,OAAO;AACZ,SAAK,aAAa;AAAA,EACpB;AAAA,EAEO,YAAwB;AAC7B,WAAO;AAAA,EACT;AACF;;;ACRO,IAAM,sBAAN,MAA0B;AAAA,EAK/B,YAAY,QAAgB,OAAc,eAA8B;AAJxE,wBAAU;AACV,wBAAU;AACV,wBAAU;AAGR,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,gBAAgB;AAAA,EACvB;AAAA,EAEO,WAAgC;AACrC,SAAK,OAAO,OAAO,WAAW;AAC9B,WAAO;AAAA,EACT;AAAA,EAEO,cAAmC;AACxC,SAAK,OAAO,OAAO,WAAW;AAC9B,WAAO;AAAA,EACT;AAAA,EAEO,SAA8B;AACnC,SAAK,OAAO,OAAO,SAAS;AAC5B,WAAO;AAAA,EACT;AAAA,EAEO,gBAAqC;AAC1C,SAAK,OAAO,OAAO,gBAAgB;AACnC,WAAO;AAAA,EACT;AAAA,EAEO,UAA+B;AACpC,SAAK,OAAO,OAAO,UAAU;AAC7B,WAAO;AAAA,EACT;AAAA,EAEO,UAA+B;AACpC,SAAK,OAAO,OAAO,UAAU;AAC7B,WAAO;AAAA,EACT;AAAA,EAEO,aAAa,OAAoC;AACtD,SAAK,OAAO,OAAO,eAAe;AAClC,WAAO;AAAA,EACT;AAAA,EAEO,aAAkC;AACvC,SAAK,OAAO,OAAO,aAAa;AAChC,WAAO;AAAA,EACT;AAAA,EAEO,aAAkC;AACvC,SAAK,OAAO,OAAO,aAAa;AAChC,WAAO;AAAA,EACT;AAAA,EAEO,WAAW,OAAe,QAAqC;AACpE,SAAK,OAAO,OAAO,aAAa;AAAA,MAC9B;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEO,WAAgC;AACrC,SAAK,OAAO,OAAO,WAAW;AAC9B,WAAO;AAAA,EACT;AAAA,EAEO,SAAe;AACpB,YAAQ,KAAK,eAAe;AAAA,MAC1B,KAAK;AACH,aAAK,MAAM,aAAa,KAAK,KAAK,MAAM;AACxC;AAAA,MACF,KAAK;AACH,aAAK,MAAM,eAAe,KAAK,KAAK,MAAM;AAC1C;AAAA,IACJ;AAAA,EACF;AAAA,EAEO,QAA6B;AAClC,SAAK,OAAO,QAAQ;AACpB,WAAO;AAAA,EACT;AAAA,EAEO,MAAM,YAAyC;AACpD,SAAK,OAAO,QAAQ;AACpB,WAAO;AAAA,EACT;AACF;;;ACxFO,IAAM,oBAAN,MAAwB;AAAA,EAK7B,YAAY,QAAgB,OAAc,eAA8B;AAJxE,wBAAU;AACV,wBAAU;AACV,wBAAU;AAGR,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,gBAAgB;AAAA,EACvB;AAAA,EAEO,OAAO,MAAc,SAAiB,KAA0B;AACrE,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,SAAS;AACrB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,KAAK,MAAmC;AAC7C,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,IAAI,MAAc,SAAiB,KAA0B;AAClE,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,SAAS;AACrB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,OAAO,MAAmC;AAC/C,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,MAAM,MAAmC;AAC9C,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,OAAO,MAAmC;AAC/C,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,QAAQ,MAAmC;AAChD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,QAAQ,MAAmC;AAChD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,KAAK,MAAmC;AAC7C,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,SAAS,MAAmC;AACjD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,KAAK,MAAmC;AAC7C,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,UAAU,MAAmC;AAClD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,IAAI,MAAmC;AAC5C,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,KAAK,MAAc,QAAuC;AAC/D,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,SAAS;AACrB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,IAAI,MAAc,QAAuC;AAC9D,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,SAAS;AACrB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,KAAK,MAAmC;AAC7C,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,KAAK,MAAmC;AAC7C,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,SAAS,MAAmC;AACjD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,WAAW,MAAmC;AACnD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,SAAS,MAAmC;AACjD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,YAAY,MAAmC;AACpD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,aAAa,MAAmC;AACrD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,cAAc,MAAmC;AACtD,SAAK,OAAO,OAAO;AACnB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,aAAa,SAAiB,SAAsC;AACzE,SAAK,OAAO,UAAU;AACtB,SAAK,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,SAAe;AACpB,YAAQ,KAAK,eAAe;AAAA,MAC1B,KAAK;AACH,aAAK,MAAM,aAAa,KAAK,KAAK,MAAM;AACxC;AAAA,MACF,KAAK;AACH,aAAK,MAAM,eAAe,KAAK,KAAK,MAAM;AAC1C;AAAA,IACJ;AAAA,EACF;AAAA,EAEO,QAA6B;AAClC,SAAK,OAAO,QAAQ;AACpB,WAAO,IAAI,oBAAoB,KAAK,QAAQ,KAAK,OAAO,KAAK,aAAa;AAAA,EAC5E;AAAA,EAEO,MAAM,YAAuC;AAClD,SAAK,OAAO,QAAQ;AACpB,WAAO;AAAA,EACT;AACF;;;ACnLO,IAAM,QAAN,MAAY;AAAA,EASjB,YAAY,WAAmB,eAA8B;AAR7D,wBAAO;AACP,wBAAO,gBAAyB,CAAC;AACjC,wBAAO,kBAA2B,CAAC;AACnC,wBAAO,mBAAgC,CAAC;AACxC,wBAAO,aAAqB;AAC5B,wBAAO,iBAAyB;AAChC,wBAAO;AAGL,SAAK,YAAY;AACjB,SAAK,gBAAgB;AAAA,EACvB;AAAA,EAEO,SAA4B;AACjC,UAAM,SAAS,IAAI,OAAO;AAC1B,WAAO,IAAI,kBAAkB,QAAQ,MAAM,KAAK,aAAa;AAAA,EAC/D;AAAA,EAEO,WAAW,YAAoB,YAA4B;AAChE,UAAM,SAAS,IAAI,WAAW,YAAY,UAAU;AACpD,SAAK,gBAAgB,KAAK,MAAM;AAAA,EAClC;AAAA,EAEO,OAAa;AAClB,SAAK,YAAY;AAAA,EACnB;AAAA,EAEO,WAAiB;AACtB,SAAK,gBAAgB;AAAA,EACvB;AACF;;;ACnCA,OAAO,UAAU;AAIV,IAAe,YAAf,MAAyB;AAAA,EAAzB;AACL,wBAAO,iBAAwB,KAAK,SAAS,UAAU;AACvD,wBAAO;AACP,wBAAO;AACP,wBAAO;AACP,wBAAO,YAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUnB,SAAS,WAAmB,eAAoC;AACrE,SAAK,YAAY;AACjB,SAAK,gBAAgB;AACrB,SAAK,QAAQ,IAAI,MAAM,KAAK,WAAW,KAAK,aAAa;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,YAAY,OAAqB;AACtC,SAAK,gBAAgB;AACrB,SAAK,WAAW;AAAA,EAClB;AACF;","names":["rows"]}