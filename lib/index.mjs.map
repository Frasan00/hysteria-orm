{"version":3,"sources":["../src/index.ts","../src/data_source.ts","../src/sql/migrations/migration.ts","../src/sql/migrations/schema/schema.ts","../src/sql/resources/migrations/CREATE_TABLE.ts","../src/sql/resources/migrations/DROP_TABLE.ts","../src/sql/migrations/column/alter_table/column_builder_alter.ts","../src/utils/logger.ts","../src/sql/migrations/column/create_table/column_options_builder.ts","../src/sql/migrations/column/create_table/column_type_builder.ts","../src/sql/migrations/column/create_table/column_builder_connector.ts","../src/sql/models/model.ts","../src/utils/case_utils.ts","../src/utils/json_utils.ts","../src/sql/models/relations/relation.ts","../src/sql/models/relations/belongs_to.ts","../src/sql/models/relations/has_many.ts","../src/sql/models/relations/has_one.ts","../src/sql/models/model_decorators.ts","../src/sql/serializer.ts","../src/sql/sql_data_source.ts","../src/sql/models/model_manager/model_manager.ts","../src/sql/resources/query/DELETE.ts","../src/sql/resources/query/INSERT.ts","../src/sql/resources/query/RELATION.ts","../src/sql/resources/query/UPDATE.ts","../src/sql/models/model_manager/model_manager_utils.ts","../src/sql/resources/query/JOIN.ts","../src/sql/mysql/mysql_delete_query_builder.ts","../src/sql/resources/query/WHERE.ts","../src/sql/query_builder/where_query_builder.ts","../src/sql/query_builder/delete_query_builder.ts","../src/sql/pagination.ts","../src/sql/resources/query/SELECT.ts","../src/sql/query_builder/query_builder.ts","../src/sql/mysql/mysql_query_builder.ts","../src/sql/query_builder/update_query_builder.ts","../src/sql/mysql/mysql_update_query_builder.ts","../src/sql/mysql/mysql_model_manager.ts","../src/sql/postgres/postgres_query_builder.ts","../src/sql/postgres/postgres_update_query_builder.ts","../src/sql/postgres/postgres_delete_query_builder.ts","../src/sql/postgres/postgres_model_manager.ts","../src/sql/sqlite/sql_lite_query_builder.ts","../src/sql/sqlite/sql_lite_update_query_builder.ts","../src/sql/sqlite/sql_lite_delete_query_builder.ts","../src/sql/sqlite/sql_lite_model_manager.ts","../src/sql/resources/query/TRANSACTION.ts","../src/sql/transaction.ts","../src/abstract_model.ts","../src/no_sql/redis/redis_data_source.ts","../src/sql/query_builder/standalone_sql_query_builder.ts"],"sourcesContent":["import \"reflect-metadata\";\nimport { DataSourceInput } from \"./data_source\";\nimport { Migration } from \"./sql/migrations/migration\";\nimport { Model } from \"./sql/models/model\";\nimport {\n  belongsTo,\n  hasOne,\n  hasMany,\n  column,\n  getRelations,\n  getModelColumns,\n} from \"./sql/models/model_decorators\";\nimport { Relation } from \"./sql/models/relations/relation\";\nimport { ModelQueryBuilder } from \"./sql/query_builder/query_builder\";\nimport { SqlDataSource } from \"./sql/sql_data_source\";\nimport { getPrimaryKey } from \"./sql/models/model_decorators\";\nimport { CaseConvention } from \"./utils/case_utils\";\nimport { PaginatedData, PaginationMetadata } from \"./sql/pagination\";\nimport { ModelDeleteQueryBuilder } from \"./sql/query_builder/delete_query_builder\";\nimport { ModelUpdateQueryBuilder } from \"./sql/query_builder/update_query_builder\";\nimport { RedisOptions } from \"ioredis\";\nimport {\n  RedisDataSource as Redis,\n  RedisGiveable,\n  RedisStorable,\n} from \"./no_sql/redis/redis_data_source\";\nimport { StandaloneQueryBuilder } from \"./sql/query_builder/standalone_sql_query_builder\";\nimport { User } from \"../test/User\";\n\n(async () => {\n  // const sql = await SqlDataSource.connect();\n\n  // const { query, params } = User.query()\n  //   .whereBuilder((builder) => {\n  //     builder.where(\"id\", 1);\n  //     builder.orWhere(\"name\", \"John\");\n  //     builder.andWhereBuilder((builder) => {\n  //       builder.where(\"signup_date\", \"2021-01-01\");\n  //       builder.orWhere(\"signup_date\", \"2021-01-02\");\n  //     });\n  //   })\n  //   .getCurrentQuery();\n\n  // console.log(query, params);\n\n  // await sql.closeConnection();\n\n  const userQueryBuilder = new StandaloneQueryBuilder(\"postgres\", \"users\");\n  const { query, params } = userQueryBuilder\n    .whereBuilder((builder) => {\n      builder.where(\"id\", 1);\n      builder.orWhere(\"name\", \"John\");\n      builder.andWhereBuilder((builder) => {\n        builder.where(\"signup_date\", \"2021-01-01\");\n        builder.orWhere(\"signup_date\", \"2021-01-02\");\n      });\n    })\n    .getCurrentQuery();\n\n  console.log(query, params);\n})();\n\nexport default {\n  // sql\n  Model,\n  column,\n  belongsTo,\n  hasOne,\n  hasMany,\n  Relation,\n  SqlDataSource: SqlDataSource,\n  Migration,\n  getRelations,\n  getModelColumns,\n\n  // redis\n  Redis,\n};\n\nexport {\n  // sql\n  Model,\n  column,\n  belongsTo,\n  hasOne,\n  hasMany,\n  Relation,\n  SqlDataSource,\n  DataSourceInput,\n  ModelQueryBuilder,\n  StandaloneQueryBuilder,\n  ModelDeleteQueryBuilder,\n  ModelUpdateQueryBuilder,\n  Migration,\n  CaseConvention,\n  PaginatedData,\n  PaginationMetadata,\n  getRelations,\n  getModelColumns,\n  getPrimaryKey,\n\n  // redis\n  Redis,\n  RedisGiveable,\n  RedisStorable,\n  RedisOptions,\n};\n","import dotenv from \"dotenv\";\nimport mysql from \"mysql2/promise\";\nimport pg from \"pg\";\nimport { MongoClientOptions } from \"mongodb\";\n\ndotenv.config();\n\n/*\n * Creates a datasource for the selected database type with the provided credentials\n */\nexport type DataSourceType =\n  | \"mysql\"\n  | \"postgres\"\n  | \"mariadb\"\n  | \"sqlite\"\n  | \"mongo\";\n\n/**\n * @description By default the connection details can be provided in the env.ts file, you can still override each prop with your actual connection details\n */\nexport interface DataSourceInput {\n  type?: DataSourceType;\n  readonly host?: string;\n  readonly port?: number;\n  readonly username?: string;\n  readonly password?: string;\n  readonly database?: string;\n  readonly logs?: boolean;\n  readonly mysqlOptions?: mysql.PoolOptions;\n  readonly pgOptions?: pg.PoolConfig;\n  readonly mongoOptions?: MongoClientOptions;\n\n  /**\n   * @description Mongo specific option, sql databases won't use this\n   */\n  readonly url?: string;\n}\nexport abstract class DataSource {\n  protected type!: DataSourceType;\n  protected host!: string;\n  protected port!: number;\n  protected username!: string;\n  protected password!: string;\n  protected database!: string;\n  protected url!: string;\n  protected logs!: boolean;\n\n  protected constructor(input?: DataSourceInput) {\n    if (this.type === \"mongo\") {\n      this.handleMongoSource();\n      return;\n    }\n\n    this.handleSqlSource(input);\n  }\n\n  protected handleMongoSource() {\n    this.type = \"mongo\";\n  }\n\n  protected handleSqlSource(input?: DataSourceInput) {\n    this.type = (input?.type || process.env.DB_TYPE) as DataSourceType;\n    this.host = (input?.host || process.env.DB_HOST) as string;\n    this.port = +(input?.port as number) || +(process.env.DB_PORT as string);\n    this.username = (input?.username || process.env.DB_USER) as string;\n    this.password = (input?.password || process.env.DB_PASSWORD) as string;\n    this.database = (input?.database || process.env.DB_DATABASE) as string;\n    this.logs = Boolean(input?.logs) || Boolean(process.env.DB_LOGS) || false;\n\n    if (!this.port) {\n      switch (this.type) {\n        case \"mysql\":\n        case \"mariadb\":\n          this.port = 3306;\n          break;\n        case \"postgres\":\n          this.port = 5432;\n          break;\n        case \"mongo\":\n          this.port = 27017;\n          break;\n        case \"sqlite\":\n          break;\n        default:\n          throw new Error(\n            \"Database type not provided in the envs nor in the connection details\",\n          );\n      }\n    }\n  }\n}\n","import path from \"path\";\nimport { SqlDataSource } from \"../sql_data_source\";\nimport Schema from \"./schema/schema\";\n\nexport abstract class Migration {\n  public migrationName: string = path.basename(__filename);\n  public schema: Schema = new Schema();\n\n  /**\n   * @description This method is called when the migration is to be run\n   */\n  public abstract up(): Promise<void>;\n\n  /**\n   * @description This method is called when the migration is to be rolled back\n   */\n  public abstract down(): Promise<void>;\n\n  /**\n   * @description This method is called after the migration has been run\n   */\n  public async afterUp?(sql: SqlDataSource): Promise<void>;\n\n  /**\n   * @description This method is called after the migration has been rolled back\n   */\n  public async afterDown?(sql: SqlDataSource): Promise<void>;\n}\n","import dotenv from \"dotenv\";\nimport createTableTemplate from \"../../resources/migrations/CREATE_TABLE\";\nimport dropTableTemplate from \"../../resources/migrations/DROP_TABLE\";\nimport { SqlDataSourceType } from \"../../sql_data_source\";\nimport ColumnBuilderAlter from \"../column/alter_table/column_builder_alter\";\nimport ColumnBuilderConnector from \"../column/create_table/column_builder_connector\";\n\ndotenv.config();\n\nexport default class Schema {\n  public queryStatements: string[];\n  public sqlType: SqlDataSourceType;\n\n  constructor(sqlType?: SqlDataSourceType) {\n    this.queryStatements = [];\n    this.sqlType = (sqlType ||\n      process.env.DB_TYPE ||\n      \"mysql\") as SqlDataSourceType;\n  }\n\n  /**\n   * @description Add raw query to the migration\n   * @param query\n   */\n  public rawQuery(query: string): void {\n    this.queryStatements.push(query);\n  }\n\n  public createTable(\n    table: string,\n    options?: { ifNotExists?: boolean },\n  ): ColumnBuilderConnector {\n    const partialQuery =\n      options && options.ifNotExists\n        ? createTableTemplate.createTableIfNotExists(table, this.sqlType)\n        : createTableTemplate.createTable(table, this.sqlType);\n\n    return new ColumnBuilderConnector(\n      table,\n      this.queryStatements,\n      partialQuery,\n      this.sqlType,\n    );\n  }\n\n  /**\n   * @description Alter table\n   * @param table\n   * @returns ColumnBuilderAlter\n   */\n  public alterTable(table: string) {\n    return new ColumnBuilderAlter(\n      table,\n      this.queryStatements,\n      \"\",\n      this.sqlType,\n    );\n  }\n\n  /**\n   * @description Drop table\n   * @param table\n   * @param ifExists\n   * @returns void\n   */\n  public dropTable(table: string, ifExists: boolean = false): void {\n    this.rawQuery(dropTableTemplate(table, ifExists, this.sqlType));\n  }\n\n  /**\n   * @description Rename table\n   * @param oldtable\n   * @param newtable\n   * @returns void\n   */\n  public renameTable(oldtable: string, newtable: string): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(`RENAME TABLE \\`${oldtable}\\` TO \\`${newtable}\\``);\n        break;\n      case \"postgres\":\n        this.rawQuery(`ALTER TABLE \"${oldtable}\" RENAME TO \"${newtable}\"`);\n        break;\n      case \"sqlite\":\n        this.rawQuery(`ALTER TABLE \"${oldtable}\" RENAME TO \"${newtable}\"`);\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n\n  /**\n   * @description Truncate table\n   * @param table\n   * @returns void\n   */\n  public truncateTable(table: string): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(`TRUNCATE TABLE \\`${table}\\``);\n        break;\n      case \"postgres\":\n        this.rawQuery(`TRUNCATE TABLE \"${table}\"`);\n        break;\n      case \"sqlite\":\n        this.rawQuery(`DELETE FROM \"${table}\"`);\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n\n  /**\n   * @description Create index on table\n   * @param table\n   * @param indexName\n   * @param columns\n   * @param unique\n   * @returns void\n   */\n  public createIndex(\n    table: string,\n    indexName: string,\n    columns: string[],\n    unique: boolean = false,\n  ): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(\n          `CREATE ${\n            unique ? \"UNIQUE\" : \"\"\n          } INDEX ${indexName} ON \\`${table}\\` (${columns.join(\", \")})`,\n        );\n        break;\n      case \"postgres\":\n        this.rawQuery(\n          `CREATE ${\n            unique ? \"UNIQUE\" : \"\"\n          } INDEX ${indexName} ON \"${table}\" (${columns.join(\", \")})`,\n        );\n        break;\n      case \"sqlite\":\n        this.rawQuery(\n          `CREATE ${\n            unique ? \"UNIQUE\" : \"\"\n          } INDEX ${indexName} ON \"${table}\" (${columns.join(\", \")})`,\n        );\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n\n  /**\n   * @description Drop index on table\n   * @param table\n   * @param indexName\n   * @returns void\n   */\n  public dropIndex(table: string, indexName: string): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(`DROP INDEX \\`${indexName}\\` ON \\`${table}\\``);\n        break;\n      case \"postgres\":\n        this.rawQuery(`DROP INDEX ${indexName}`);\n        break;\n      case \"sqlite\":\n        this.rawQuery(`DROP INDEX ${indexName}`);\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n\n  /**\n   * @description Adds a primary key to a table\n   * @param table\n   * @param columnName\n   * @param type\n   * @param options\n   * @returns void\n   */\n  public addPrimaryKey(table: string, columns: string[]): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(\n          `ALTER TABLE \\`${table}\\` ADD PRIMARY KEY (${columns.join(\", \")})`,\n        );\n        break;\n      case \"postgres\":\n        this.rawQuery(\n          `ALTER TABLE \"${table}\" ADD PRIMARY KEY (${columns.join(\", \")})`,\n        );\n        break;\n      case \"sqlite\":\n        this.rawQuery(\n          `ALTER TABLE \"${table}\" ADD PRIMARY KEY (${columns.join(\", \")})`,\n        );\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n\n  /**\n   * @description Drops a primary key from a table\n   * @param table\n   * @returns void\n   */\n  public dropPrimaryKey(table: string): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(`ALTER TABLE \\`${table}\\` DROP PRIMARY KEY`);\n        break;\n      case \"postgres\":\n        this.rawQuery(`ALTER TABLE \"${table}\" DROP CONSTRAINT PRIMARY KEY`);\n        break;\n      case \"sqlite\":\n        this.rawQuery(`ALTER TABLE \"${table}\" DROP PRIMARY KEY`);\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n\n  /**\n   * @description Adds a foreign key to a table\n   * @param table\n   * @param constraintName\n   * @param columns\n   * @returns void\n   */\n  public addConstraint(\n    table: string,\n    constraintName: string,\n    columns: string[],\n  ): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(\n          `ALTER TABLE \\`${table}\\` ADD CONSTRAINT ${constraintName} FOREIGN KEY (${columns.join(\n            \", \",\n          )}) REFERENCES ${columns[0].split(\"_\")[0]}s(id)`,\n        );\n        break;\n      case \"postgres\":\n        this.rawQuery(\n          `ALTER TABLE \"${table}\" ADD CONSTRAINT ${constraintName} FOREIGN KEY (${columns.join(\n            \", \",\n          )}) REFERENCES ${columns[0].split(\"_\")[0]}s(id)`,\n        );\n        break;\n      case \"sqlite\":\n        this.rawQuery(\n          `ALTER TABLE \"${table}\" ADD CONSTRAINT ${constraintName} FOREIGN KEY (${columns.join(\n            \", \",\n          )}) REFERENCES ${columns[0].split(\"_\")[0]}s(id)`,\n        );\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n\n  /**\n   * @description Drops a cosntraint from a table\n   * @param table\n   * @param constraintName\n   * @returns void\n   */\n  public dropConstraint(table: string, constraintName: string): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(\n          `ALTER TABLE \\`${table}\\` DROP FOREIGN KEY ${constraintName}`,\n        );\n        break;\n      case \"postgres\":\n        this.rawQuery(\n          `ALTER TABLE \"${table}\" DROP CONSTRAINT ${constraintName}`,\n        );\n        break;\n      case \"sqlite\":\n        this.rawQuery(\n          `ALTER TABLE \"${table}\" DROP CONSTRAINT ${constraintName}`,\n        );\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n\n  /**\n   * @description Adds a unique constraint to a table\n   * @param table\n   * @param constraintName\n   * @param columns\n   * @returns void\n   */\n  public addUniqueConstraint(\n    table: string,\n    constraintName: string,\n    columns: string[],\n  ): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(\n          `ALTER TABLE \\`${table}\\` ADD CONSTRAINT ${constraintName} UNIQUE (${columns.join(\n            \", \",\n          )})`,\n        );\n        break;\n      case \"sqlite\":\n        this.rawQuery(\n          `ALTER TABLE \\`${table}\\` ADD CONSTRAINT ${constraintName} UNIQUE (${columns.join(\n            \", \",\n          )})`,\n        );\n        break;\n      case \"postgres\":\n        this.rawQuery(\n          `ALTER TABLE \"${table}\" ADD CONSTRAINT ${constraintName} UNIQUE (${columns.join(\n            \", \",\n          )})`,\n        );\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n\n  /**\n   * @description Drops a unique constraint from a table\n   * @param table\n   * @param constraintName\n   * @returns void\n   */\n  public dropUniqueConstraint(table: string, constraintName: string): void {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.rawQuery(`ALTER TABLE \\`${table}\\` DROP INDEX ${constraintName}`);\n        break;\n      case \"postgres\":\n        this.rawQuery(\n          `ALTER TABLE \"${table}\" DROP CONSTRAINT ${constraintName}`,\n        );\n        break;\n      case \"sqlite\":\n        this.rawQuery(\n          `ALTER TABLE \"${table}\" DROP CONSTRAINT ${constraintName}`,\n        );\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  }\n}\n","import { SqlDataSourceType } from \"../../sql_data_source\";\n\nconst createTableTemplate = {\n  createTableIfNotExists: (table: string, dbType: SqlDataSourceType) => {\n    switch (dbType) {\n      case \"mysql\":\n      case \"mariadb\":\n        return `CREATE TABLE IF NOT EXISTS \\`${table}\\` (\\n`;\n      case \"postgres\":\n        return `CREATE TABLE IF NOT EXISTS \"${table}\" (\\n`;\n      case \"sqlite\":\n        return `CREATE TABLE IF NOT EXISTS \"${table}\" (\\n`;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  },\n  createTable: (table: string, dbType: SqlDataSourceType) => {\n    switch (dbType) {\n      case \"mysql\":\n      case \"mariadb\":\n        return `CREATE TABLE \\`${table}\\` (\\n`;\n      case \"postgres\":\n        return `CREATE TABLE \"${table}\" (\\n`;\n      case \"sqlite\":\n        return `CREATE TABLE \"${table}\" (\\n`;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  },\n  createTableEnd: \"\\n);\",\n};\n\nexport default createTableTemplate;\n","import { SqlDataSourceType } from \"../../sql_data_source\";\n\nconst dropTableTemplate = (\n  table: string,\n  ifExists: boolean,\n  dbType: SqlDataSourceType,\n) => {\n  switch (dbType) {\n    case \"mariadb\":\n    case \"mysql\":\n      return ifExists\n        ? `DROP TABLE IF EXISTS \\`${table}\\``\n        : `DROP TABLE \\`${table}\\``;\n    case \"postgres\":\n      return ifExists\n        ? `DROP TABLE IF EXISTS \"${table}\"`\n        : `DROP TABLE \"${table}\"`;\n    case \"sqlite\":\n      return ifExists\n        ? `DROP TABLE IF EXISTS \"${table}\"`\n        : `DROP TABLE \"${table}\"`;\n    default:\n      throw new Error(\"Unsupported database type\");\n  }\n};\n\nexport default dropTableTemplate;\n","import { DateTime } from \"luxon\";\nimport { SqlDataSourceType } from \"../../../sql_data_source\";\nimport ColumnTypeBuilder, {\n  DateOptions,\n} from \"../create_table/column_type_builder\";\n\ntype References = {\n  table: string;\n  column: string;\n  onDelete?: string;\n  onUpdate?: string;\n};\n\ntype AlterOptions = {\n  afterColumn?: string;\n  references?: References;\n};\n\ntype DataType =\n  | \"uuid\"\n  | \"varchar\"\n  | \"tinytext\"\n  | \"mediumtext\"\n  | \"longtext\"\n  | \"binary\"\n  | \"text\"\n  | \"char\"\n  | \"tinyint\"\n  | \"smallint\"\n  | \"mediumint\"\n  | \"integer\"\n  | \"bigint\"\n  | \"float\"\n  | \"decimal\"\n  | \"double\"\n  | \"boolean\"\n  | \"jsonb\";\n\ntype BaseOptions = {\n  afterColumn?: string;\n  references?: References;\n  precision?: number;\n  scale?: number;\n  default?: any;\n  primaryKey?: boolean;\n  unique?: boolean;\n  notNullable?: boolean;\n  autoIncrement?: boolean;\n  length?: number;\n};\n\nexport default class ColumnBuilderAlter {\n  protected table: string;\n  protected queryStatements: string[];\n  protected sqlType: SqlDataSourceType;\n  protected partialQuery: string;\n\n  constructor(\n    table: string,\n    queryStatements: string[],\n    partialQuery: string,\n    sqlType: SqlDataSourceType,\n  ) {\n    this.table = table;\n    this.queryStatements = queryStatements;\n    this.partialQuery = partialQuery;\n    this.sqlType = sqlType;\n  }\n\n  /**\n   * @description Add a new column to the table\n   * @param columnName { string }\n   * @param {DataType} dataType\n   * @param {BaseOptions} options\n   */\n  public addColumn(\n    columnName: string,\n    dataType: DataType,\n    options?: BaseOptions,\n  ): ColumnBuilderAlter {\n    let query = `ALTER TABLE ${this.table} ADD COLUMN `;\n    const columnsBuilder = new ColumnTypeBuilder(\"\", [], \"\", this.sqlType);\n    switch (dataType) {\n      case \"uuid\":\n        columnsBuilder.uuid(columnName);\n        break;\n      case \"varchar\":\n        columnsBuilder.varchar(columnName, options?.length);\n        break;\n      case \"tinytext\":\n        columnsBuilder.tinytext(columnName);\n        break;\n      case \"mediumtext\":\n        columnsBuilder.mediumtext(columnName);\n        break;\n      case \"longtext\":\n        columnsBuilder.longtext(columnName);\n        break;\n      case \"binary\":\n        columnsBuilder.binary(columnName, options?.length);\n        break;\n      case \"text\":\n        columnsBuilder.text(columnName);\n        break;\n      case \"char\":\n        columnsBuilder.char(columnName, options?.length);\n        break;\n      case \"tinyint\":\n        columnsBuilder.tinyint(columnName);\n        break;\n      case \"smallint\":\n        columnsBuilder.smallint(columnName);\n        break;\n      case \"mediumint\":\n        columnsBuilder.mediumint(columnName);\n        break;\n      case \"integer\":\n        columnsBuilder.integer(columnName, options?.length);\n        break;\n      case \"bigint\":\n        columnsBuilder.bigint(columnName);\n        break;\n      case \"float\":\n        const { precision: floatPrecision = 10, scale: floatScale = 2 } =\n          options || {};\n        columnsBuilder.float(columnName, {\n          precision: floatPrecision,\n          scale: floatScale,\n        });\n        break;\n      case \"decimal\":\n        const { precision = 10, scale = 2 } = options || {};\n        columnsBuilder.decimal(columnName, {\n          precision: precision,\n          scale: scale,\n        });\n        break;\n      case \"double\":\n        const { precision: doublePrecision = 10, scale: doubleScale = 2 } =\n          options || {};\n        columnsBuilder.double(columnName, {\n          precision: doublePrecision,\n          scale: doubleScale,\n        });\n        break;\n      case \"boolean\":\n        columnsBuilder.boolean(columnName);\n        break;\n      case \"jsonb\":\n        columnsBuilder.jsonb(columnName);\n        break;\n      default:\n        throw new Error(\"Unsupported data type\");\n    }\n\n    query += columnsBuilder.partialQuery;\n\n    if (options?.default !== undefined) {\n      if (typeof options.default === \"string\") {\n        query += ` DEFAULT '${options.default}'`;\n      } else if (options.default instanceof Date) {\n        query += ` DEFAULT '${options.default.toISOString()}'`;\n      } else if (options.default instanceof DateTime) {\n        query += ` DEFAULT '${options.default.toISO()}'`;\n      } else if (typeof options.default === \"object\") {\n        query += ` DEFAULT '${JSON.stringify(options.default)}'`;\n      } else if (typeof options.default === null) {\n        query += \" DEFAULT NULL\";\n      } else {\n        query += ` DEFAULT ${options.default}`;\n      }\n    }\n\n    if (options?.primaryKey) {\n      query += \" PRIMARY KEY\";\n    }\n\n    if (options?.unique) {\n      query += \" UNIQUE\";\n    }\n\n    if (options?.references) {\n      query += ` REFERENCES ${options.references.table}(${\n        options.references.column\n      }) ON DELETE ${options.references.onDelete || \"NO ACTION\"} ON UPDATE ${\n        options.references.onUpdate || \"NO ACTION\"\n      }`;\n    }\n\n    if (options?.afterColumn) {\n      switch (this.sqlType) {\n        case \"mariadb\":\n        case \"mysql\":\n          query += ` AFTER ${options.afterColumn}`;\n          break;\n        case \"postgres\":\n          throw new Error(\"Postgres does not support AFTER in ALTER COLUMN\");\n        case \"sqlite\":\n          throw new Error(\"Sqlite does not support AFTER in ALTER COLUMN\");\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n    }\n\n    this.partialQuery = query;\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Add a new date column to the table\n   * @param columnName { string }\n   * @param options { DateOptions }\n   */\n  public addDateColumn(\n    columnName: string,\n    type: \"date\" | \"timestamp\",\n    options?: DateOptions & {\n      afterColumn?: string;\n      notNullable?: boolean;\n      default?: string | Date | DateTime;\n    },\n  ): ColumnBuilderAlter {\n    let query = `ALTER TABLE ${this.table} ADD COLUMN ${columnName} ${type}`;\n    if (options?.autoCreate) {\n      switch (this.sqlType) {\n        case \"mariadb\":\n        case \"mysql\":\n          query += \" DEFAULT CURRENT_TIMESTAMP\";\n          break;\n        case \"postgres\":\n          query += \" DEFAULT CURRENT_TIMESTAMP\";\n          break;\n        case \"sqlite\":\n          query += \" DEFAULT CURRENT_TIMESTAMP\";\n          break;\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n    }\n\n    if (options?.autoUpdate) {\n      switch (this.sqlType) {\n        case \"mariadb\":\n        case \"mysql\":\n          query += \" ON UPDATE CURRENT_TIMESTAMP\";\n          break;\n        case \"postgres\":\n          query += \" ON UPDATE CURRENT_TIMESTAMP\";\n          break;\n        case \"sqlite\":\n          query += \" ON UPDATE CURRENT_TIMESTAMP\";\n          break;\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n    }\n\n    if (options?.notNullable) {\n      query += \" NOT NULL\";\n    }\n\n    if (options?.default !== undefined) {\n      if (typeof options.default === \"string\") {\n        query += ` DEFAULT '${options.default}'`;\n      } else if (options.default instanceof Date) {\n        query += ` DEFAULT '${options.default.toISOString()}'`;\n      } else {\n        query += ` DEFAULT '${options.default.toISO()}'`;\n      }\n    }\n\n    if (options?.afterColumn) {\n      switch (this.sqlType) {\n        case \"mariadb\":\n        case \"mysql\":\n          query += ` AFTER ${options.afterColumn}`;\n          break;\n        case \"postgres\":\n          throw new Error(\"Postgres does not support AFTER in ALTER COLUMN\");\n        case \"sqlite\":\n          throw new Error(\"Sqlite does not support AFTER in ALTER COLUMN\");\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n    }\n\n    this.partialQuery = query;\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Add a new enum column to the table\n   * @param columnName { string }\n   * @param values { string[] }\n   * @param options { afterColumn?: string; notNullable?: boolean }\n   */\n  public addEnumColumn(\n    columnName: string,\n    values: string[],\n    options?: {\n      afterColumn?: string;\n      notNullable?: boolean;\n      default?: string;\n      unique?: boolean;\n    },\n  ): ColumnBuilderAlter {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        const parsedValues = values.map((value) => {\n          if (typeof value === \"number\") {\n            return value;\n          } else if (typeof value === \"boolean\") {\n            return value ? 1 : 0;\n          } else if (typeof value === \"string\") {\n            return `'${value}'`;\n          }\n        });\n        this.partialQuery = `ALTER TABLE ${\n          this.table\n        } ADD COLUMN ${columnName} ENUM(${parsedValues.join(\", \")})`;\n        break;\n      case \"postgres\":\n        const enumTypeName = `${this.table}_${columnName}_enum`;\n        const parsedValuesPg = values.map((value) => {\n          if (typeof value === \"number\") {\n            return value;\n          } else if (typeof value === \"boolean\") {\n            return value ? 1 : 0;\n          } else if (typeof value === \"string\") {\n            return `'${value}'`;\n          }\n        });\n        this.partialQuery = `\nDO $$ BEGIN\n  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '${enumTypeName}') THEN\n    CREATE TYPE ${enumTypeName} AS ENUM(${parsedValuesPg.join(\", \")});\n  END IF;\nEND $$;\nALTER TABLE ${this.table} ADD COLUMN ${columnName} ${enumTypeName}\n      `;\n        break;\n      case \"sqlite\":\n        const parsedValuesSqlite = values.map((value) => {\n          if (typeof value === \"number\") {\n            return value;\n          } else if (typeof value === \"boolean\") {\n            return value ? 1 : 0;\n          } else if (typeof value === \"string\") {\n            return `'${value}'`;\n          }\n        });\n        this.partialQuery = `ALTER TABLE ${\n          this.table\n        } ADD COLUMN ${columnName} TEXT ${\n          options?.notNullable ? \"NOT NULL\" : \"\"\n        } DEFAULT ${\n          options?.default ? `'${options.default}'` : \"NULL\"\n        } CHECK (${columnName} IN (${parsedValuesSqlite.join(\", \")}))`;\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n\n    if (options?.notNullable && this.sqlType !== \"sqlite\") {\n      this.partialQuery += \" NOT NULL\";\n    }\n\n    if (options?.default && this.sqlType !== \"sqlite\") {\n      this.partialQuery += ` DEFAULT '${options.default}'`;\n    }\n\n    if (options?.unique) {\n      this.partialQuery += \" UNIQUE\";\n    }\n\n    if (options?.afterColumn) {\n      switch (this.sqlType) {\n        case \"mariadb\":\n        case \"mysql\":\n          this.partialQuery += ` AFTER ${options.afterColumn}`;\n          break;\n        case \"postgres\":\n          throw new Error(\"Postgres does not support AFTER in AFTER COLUMN\");\n        case \"sqlite\":\n          throw new Error(\"Sqlite does not support AFTER in AFTER COLUMN\");\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Drops a column from the table\n   * @param columnName\n   */\n  public dropColumn(columnName: string): ColumnBuilderAlter {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.partialQuery = `ALTER TABLE ${this.table} DROP COLUMN ${columnName}`;\n        break;\n      case \"postgres\":\n        this.partialQuery = `ALTER TABLE ${this.table} DROP COLUMN ${columnName}`;\n        break;\n      case \"sqlite\":\n        this.partialQuery = `ALTER TABLE ${this.table} DROP COLUMN ${columnName}`;\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Renames a column\n   * @param oldColumnName\n   * @param newColumnName\n   */\n  public renameColumn(\n    oldColumnName: string,\n    newColumnName: string,\n  ): ColumnBuilderAlter {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.partialQuery = `ALTER TABLE ${this.table} CHANGE COLUMN ${oldColumnName} ${newColumnName}`;\n        break;\n      case \"postgres\":\n        this.partialQuery = `ALTER TABLE ${this.table} RENAME COLUMN ${oldColumnName} TO ${newColumnName}`;\n        break;\n      case \"sqlite\":\n        this.partialQuery = `ALTER TABLE ${this.table} RENAME COLUMN ${oldColumnName} TO ${newColumnName}`;\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  public modifyColumnType(\n    columnName: string,\n    newDataType: string,\n    options?: BaseOptions,\n  ): ColumnBuilderAlter {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.partialQuery = `ALTER TABLE ${\n          this.table\n        } MODIFY COLUMN ${columnName} ${newDataType}${\n          options && options.length ? `(${options.length})` : \"\"\n        }`;\n        break;\n      case \"postgres\":\n        this.partialQuery = `ALTER TABLE ${\n          this.table\n        } ALTER COLUMN ${columnName} TYPE ${newDataType}${\n          options && options.length ? `(${options.length})` : \"\"\n        }`;\n        break;\n      case \"sqlite\":\n        throw new Error(\"Sqlite does not support modifying column types\");\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n\n    if (options?.notNullable) {\n      this.partialQuery += \" NOT NULL\";\n    }\n\n    if (options?.default !== undefined) {\n      this.partialQuery += ` DEFAULT ${options.default}`;\n    }\n\n    if (options?.primaryKey) {\n      this.partialQuery += \" PRIMARY KEY\";\n    }\n\n    if (options?.unique) {\n      this.partialQuery += \" UNIQUE\";\n    }\n\n    if (options?.references) {\n      this.partialQuery += ` REFERENCES ${options.references.table}(${\n        options.references.column\n      }) ON DELETE ${options.references.onDelete || \"NO ACTION\"} ON UPDATE ${\n        options.references.onUpdate || \"NO ACTION\"\n      }`;\n    }\n\n    if (options?.afterColumn) {\n      switch (this.sqlType) {\n        case \"mariadb\":\n        case \"mysql\":\n          this.partialQuery += ` AFTER ${options.afterColumn}`;\n          break;\n        case \"postgres\":\n          throw new Error(\"Postgres does not support AFTER in ALTER COLUMN\");\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Renames a table\n   * @param oldtable\n   * @param newtable\n   */\n  public renameTable(oldtable: string, newtable: string): ColumnBuilderAlter {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.partialQuery = `RENAME TABLE ${oldtable} TO ${newtable}`;\n        break;\n      case \"postgres\":\n        this.partialQuery = `ALTER TABLE ${oldtable} RENAME TO ${newtable}`;\n        break;\n      case \"sqlite\":\n        this.partialQuery = `ALTER TABLE ${oldtable} RENAME TO ${newtable}`;\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Set a default value\n   * @param columnName\n   * @param defaultValue\n   */\n  public setDefaultValue(\n    columnName: string,\n    defaultValue: string,\n  ): ColumnBuilderAlter {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.partialQuery = `ALTER TABLE ${this.table} ALTER COLUMN ${columnName} SET DEFAULT ${defaultValue}`;\n        break;\n      case \"postgres\":\n        this.partialQuery = `ALTER TABLE ${this.table} ALTER COLUMN ${columnName} SET DEFAULT ${defaultValue}`;\n        break;\n      case \"sqlite\":\n        this.partialQuery = `ALTER TABLE ${this.table} ALTER COLUMN ${columnName} SET DEFAULT ${defaultValue}`;\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Drop a default value\n   * @param columnName\n   */\n  public dropDefaultValue(columnName: string): ColumnBuilderAlter {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.partialQuery = `ALTER TABLE ${this.table} ALTER COLUMN ${columnName} DROP DEFAULT`;\n        break;\n      case \"postgres\":\n        this.partialQuery = `ALTER TABLE ${this.table} ALTER COLUMN ${columnName} DROP DEFAULT`;\n        break;\n      case \"sqlite\":\n        throw new Error(\"Sqlite does not support dropping default values\");\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Add a foreign key\n   * @param columnName\n   * @param options\n   */\n  public addForeignKey(\n    columnName: string,\n    options: AlterOptions,\n  ): ColumnBuilderAlter {\n    if (!options.references) {\n      throw new Error(\n        \"References option must be provided to add a foreign key\",\n      );\n    }\n\n    const fkName = `${this.table}_${columnName}_fk`;\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.partialQuery = `ALTER TABLE ${\n          this.table\n        } ADD CONSTRAINT ${fkName} FOREIGN KEY (${columnName}) REFERENCES ${\n          options.references.table\n        }(${options.references.column}) ON DELETE ${\n          options.references.onDelete || \"NO ACTION\"\n        } ON UPDATE ${options.references.onUpdate || \"NO ACTION\"}`;\n        break;\n      case \"postgres\":\n        this.partialQuery = `ALTER TABLE ${\n          this.table\n        } ADD CONSTRAINT ${fkName} FOREIGN KEY (${columnName}) REFERENCES ${\n          options.references.table\n        }(${options.references.column}) ON DELETE ${\n          options.references.onDelete || \"NO ACTION\"\n        } ON UPDATE ${options.references.onUpdate || \"NO ACTION\"}`;\n        break;\n      case \"sqlite\":\n        this.partialQuery = `ALTER TABLE ${\n          this.table\n        } ADD CONSTRAINT ${fkName} FOREIGN KEY (${columnName}) REFERENCES ${\n          options.references.table\n        }(${options.references.column}) ON DELETE ${\n          options.references.onDelete || \"NO ACTION\"\n        } ON UPDATE ${options.references.onUpdate || \"NO ACTION\"}`;\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Drop a foreign key\n   * @param columnName\n   */\n  public dropForeignKey(columnName: string): ColumnBuilderAlter {\n    const fkName = `${this.table}_${columnName}_fk`;\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.partialQuery = `ALTER TABLE ${this.table} DROP FOREIGN KEY ${fkName}`;\n        break;\n      case \"postgres\":\n        this.partialQuery = `ALTER TABLE ${this.table} DROP CONSTRAINT ${fkName}`;\n        break;\n      case \"sqlite\":\n        this.partialQuery = `ALTER TABLE ${this.table} DROP CONSTRAINT ${fkName}`;\n        break;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Commits the changes - if omitted, the migration will be run empty\n   */\n  public commit(): void {\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n  }\n}\n","import winston from \"winston\";\n\ninterface LogColors {\n  info: string;\n  warn: string;\n  error: string;\n  [key: string]: string;\n}\n\nconst colors: LogColors = {\n  info: \"\\x1b[32m\",\n  warn: \"\\x1b[33m\",\n  error: \"\\x1b[31m\",\n};\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.printf(({ level, message, timestamp }) => {\n    const color = colors[level] || \"\\x1b[0m\";\n    return `${timestamp} ${color}${level}\\x1b[0m: ${color}${message}\\x1b[0m`;\n  }),\n);\n\nconst consoleTransport = new winston.transports.Console();\nconst fileTransport = new winston.transports.File({ filename: \"logfile.log\" });\n\nconst logger = winston.createLogger({\n  format: logFormat,\n  transports: [consoleTransport, fileTransport],\n});\n\nexport function log(query: string, logs: boolean, params?: any[]) {\n  if (!logs) {\n    return;\n  }\n\n  if (params && params.length) {\n    params.forEach((param, index) => {\n      let formattedParam: any = null;\n\n      if (typeof param === \"string\") {\n        // Format string parameters\n        formattedParam = `'${param}'`;\n      } else if (\n        typeof param === \"object\" &&\n        param !== null &&\n        Object.keys(param).length > 0\n      ) {\n        // Format object parameters\n        formattedParam = `'${JSON.stringify(param)}'`;\n      } else {\n        // Use the parameter as is for other types (e.g., numbers)\n        formattedParam = param;\n      }\n\n      // Replace MySQL-style placeholders\n      query = query.replace(/\\?/, formattedParam);\n\n      // Replace PostgreSQL-style placeholders\n      const pgPlaceholder = new RegExp(`\\\\$${index + 1}`, \"g\");\n      query = query.replace(pgPlaceholder, formattedParam);\n    });\n  }\n\n  logger.info(\"\\n\" + query);\n}\n\nexport function queryError(error: any) {\n  logger.error(\"query Failed \", error);\n}\n\nexport default logger;\n","import { SqlDataSourceType } from \"../../../sql_data_source\";\nimport ColumnTypeBuilder from \"./column_type_builder\";\n\nexport default class ColumnOptionsBuilder {\n  protected table: string;\n  protected queryStatements: string[];\n  protected partialQuery: string;\n  protected columnName: string;\n  protected columnReferences: {\n    table: string;\n    column: string;\n    onDelete?: string;\n    onUpdate?: string;\n  }[];\n  protected sqlType: SqlDataSourceType;\n\n  constructor(\n    table: string,\n    queryStatements: string[],\n    partialQuery: string,\n    sqlType: SqlDataSourceType,\n    columnName: string = \"\",\n    columnReferences: {\n      table: string;\n      column: string;\n      onDelete?: string;\n      onUpdate?: string;\n    }[] = [],\n  ) {\n    this.table = table;\n    this.queryStatements = queryStatements;\n    this.partialQuery = partialQuery;\n    this.sqlType = sqlType;\n    this.columnName = columnName;\n    this.columnReferences = columnReferences;\n  }\n\n  /**\n   * @description Makes the column nullable\n   */\n  public nullable(): ColumnOptionsBuilder {\n    this.partialQuery += \" NULL\";\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n      this.columnReferences,\n    );\n  }\n\n  public default(value: string | number | boolean): ColumnOptionsBuilder {\n    this.partialQuery += ` DEFAULT ${value}`;\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n      this.columnReferences,\n    );\n  }\n\n  /**\n   * @description Makes the column unsigned allowing only positive values\n   */\n  public unsigned(): ColumnOptionsBuilder {\n    this.partialQuery += \" UNSIGNED\";\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n      this.columnReferences,\n    );\n  }\n\n  /**\n   * @description Makes the column not nullable\n   */\n  public notNullable(): ColumnOptionsBuilder {\n    this.partialQuery += \" NOT NULL\";\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n      this.columnReferences,\n    );\n  }\n\n  /**\n   * @description Makes the column the primary key\n   */\n  public primary(): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.partialQuery += \" PRIMARY KEY\";\n        return new ColumnOptionsBuilder(\n          this.table,\n          this.queryStatements,\n          this.partialQuery,\n          this.sqlType,\n          this.columnName,\n          this.columnReferences,\n        );\n\n      case \"postgres\":\n        this.partialQuery += \" PRIMARY KEY\";\n        return new ColumnOptionsBuilder(\n          this.table,\n          this.queryStatements,\n          this.partialQuery,\n          this.sqlType,\n          this.columnName,\n          this.columnReferences,\n        );\n\n      case \"sqlite\":\n        this.partialQuery += \" PRIMARY KEY\";\n        return new ColumnOptionsBuilder(\n          this.table,\n          this.queryStatements,\n          this.partialQuery,\n          this.sqlType,\n          this.columnName,\n          this.columnReferences,\n        );\n\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n  }\n\n  /**\n   * @description Adds an unique constraint\n   */\n  public unique(): ColumnOptionsBuilder {\n    this.partialQuery += \" UNIQUE\";\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n      this.columnReferences,\n    );\n  }\n\n  /**\n   * @description Adds an auto increment - only for mysql\n   */\n  public autoIncrement(): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.partialQuery += \" AUTO_INCREMENT\";\n        return new ColumnOptionsBuilder(\n          this.table,\n          this.queryStatements,\n          this.partialQuery,\n          this.sqlType,\n        );\n\n      case \"postgres\":\n        throw new Error(\"Auto Increment not supported for PostgreSQL\");\n      case \"sqlite\":\n        throw new Error(\"Auto Increment not supported for sqlite\");\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n  }\n\n  /**\n   * @description Adds a foreign key with a specific constraint\n   * @param table\n   * @param column\n   */\n  public references(\n    table: string,\n    column: string,\n    options?: { onDelete: string; onUpdate: string },\n  ): ColumnOptionsBuilder {\n    this.columnReferences?.push({\n      table,\n      column,\n      onDelete: options?.onDelete,\n      onUpdate: options?.onUpdate,\n    });\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n      this.columnReferences,\n    );\n  }\n\n  /**\n   * @description Chains a new column creation\n   */\n  public newColumn(): ColumnTypeBuilder {\n    this.partialQuery += \",\\n\";\n    return new ColumnTypeBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n    );\n  }\n\n  /**\n   * @description Commits the column creation - if omitted, the migration will be run empty\n   */\n  public commit(): void {\n    if (this.columnReferences.length) {\n      this.columnReferences.forEach((reference) => {\n        switch (this.sqlType) {\n          case \"mysql\":\n          case \"mariadb\":\n            this.partialQuery += `,\\nCONSTRAINT fk_${this.table}_${\n              this.columnName\n            } FOREIGN KEY (${this.columnName}) REFERENCES ${reference.table}(${\n              reference.column\n            }) ${reference.onDelete ? `ON DELETE ${reference.onDelete}` : \"\"} ${\n              reference.onUpdate ? `ON UPDATE ${reference.onUpdate}` : \"\"\n            }`;\n            break;\n          case \"postgres\":\n            this.partialQuery += `,\\nCONSTRAINT fk_${this.table}_${\n              this.columnName\n            } FOREIGN KEY (${this.columnName}) REFERENCES ${reference.table}(${\n              reference.column\n            }) ${reference.onDelete ? `ON DELETE ${reference.onDelete}` : \"\"} ${\n              reference.onUpdate ? `ON UPDATE ${reference.onUpdate}` : \"\"\n            }`;\n            break;\n          case \"sqlite\":\n            this.partialQuery += `,\\nFOREIGN KEY (${\n              this.columnName\n            }) REFERENCES ${reference.table}(${reference.column}) ${\n              reference.onDelete ? `ON DELETE ${reference.onDelete}` : \"\"\n            } ${reference.onUpdate ? `ON UPDATE ${reference.onUpdate}` : \"\"}`;\n            break;\n          default:\n            throw new Error(\"Unsupported SQL type\");\n        }\n      });\n    }\n\n    this.partialQuery += \"\\n\";\n    this.partialQuery += \");\";\n    this.queryStatements.push(this.partialQuery);\n  }\n}\n","import logger from \"../../../../utils/logger\";\nimport { SqlDataSourceType } from \"../../../sql_data_source\";\nimport ColumnOptionsBuilder from \"./column_options_builder\";\n\nexport type DateOptions = {\n  autoCreate?: boolean;\n  autoUpdate?: boolean;\n};\n\nexport default class ColumnTypeBuilder {\n  protected table: string;\n  protected queryStatements: string[];\n  protected columnName: string;\n  protected sqlType: SqlDataSourceType;\n  public partialQuery: string;\n\n  constructor(\n    table: string,\n    queryStatements: string[],\n    partialQuery: string,\n    sqlType: SqlDataSourceType,\n  ) {\n    this.table = table;\n    this.queryStatements = queryStatements;\n    this.partialQuery = partialQuery;\n    this.sqlType = sqlType;\n    this.columnName = \"\";\n  }\n\n  public string(name: string, length: number = 255): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} VARCHAR(${length})`;\n        break;\n\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} VARCHAR(${length})`;\n        break;\n\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public varchar(name: string, length: number = 255): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} VARCHAR(${length})`;\n        break;\n\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} VARCHAR(${length})`;\n        break;\n\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public uuid(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} UUID`;\n        break;\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} CHAR(36)`;\n        break;\n      case \"sqlite\":\n        logger.warn(\"sqlite does not support UUID, using text instead\");\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public tinytext(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} TINYTEXT`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public mediumtext(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} MEDIUMTEXT`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public longtext(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} LONGTEXT`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public binary(name: string, length: number = 255): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} BINARY(${length})`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} BYTEA`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} BLOB(${length})`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public enum(name: string, values: string[]): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} ENUM('${values.join(\"', '\")}')`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT CHECK(${name} IN ('${values.join(\n          \"', '\",\n        )}'))`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} CHECK(${name} IN ('${values.join(\n          \"', '\",\n        )}'))`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public text(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} TEXT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public char(name: string, length: number = 255): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} CHAR(${length})`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} CHAR(${length})`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} CHAR(${length})`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public tinyint(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} TINYINT`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} SMALLINT`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} TINYINT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public smallint(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} SMALLINT`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} SMALLINT`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} SMALLINT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public mediumint(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} MEDIUMINT`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} INTEGER`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} MEDIUMINT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  /**\n   * @description If using mysql, it will automatically add INT AUTO_INCREMENT\n   * @param name\n   */\n  public serial(name: string): ColumnOptionsBuilder {\n    if (this.sqlType === `mysql` || this.sqlType === `mariadb`) {\n      this.columnName = name;\n      this.partialQuery += `${name} INT AUTO_INCREMENT`;\n      return new ColumnOptionsBuilder(\n        this.table,\n        this.queryStatements,\n        this.partialQuery,\n        this.sqlType,\n        this.columnName,\n      );\n    }\n\n    if (this.sqlType === `sqlite`) {\n      this.columnName = name;\n      this.partialQuery += `${name} INTEGER PRIMARY KEY AUTOINCREMENT`;\n      return new ColumnOptionsBuilder(\n        this.table,\n        this.queryStatements,\n        this.partialQuery,\n        this.sqlType,\n        this.columnName,\n      );\n    }\n\n    this.columnName = name;\n    this.partialQuery += `${name} SERIAL`;\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  /**\n   * @description If using mysql, it will automatically be converted in BIGINT AUTO_INCREMENT\n   * @description If using sqlite, it will automatically be converted in INTEGER PRIMARY KEY AUTOINCREMENT\n   * @param name\n   */\n  public bigSerial(name: string): ColumnOptionsBuilder {\n    if (this.sqlType === `mysql` || this.sqlType === `mariadb`) {\n      this.columnName = name;\n      this.partialQuery += `${name} BIGINT AUTO_INCREMENT`;\n      return new ColumnOptionsBuilder(\n        this.table,\n        this.queryStatements,\n        this.partialQuery,\n        this.sqlType,\n        this.columnName,\n      );\n    }\n\n    if (this.sqlType === `sqlite`) {\n      this.columnName = name;\n      this.partialQuery += `${name} INTEGER PRIMARY KEY AUTOINCREMENT`;\n      return new ColumnOptionsBuilder(\n        this.table,\n        this.queryStatements,\n        this.partialQuery,\n        this.sqlType,\n        this.columnName,\n      );\n    }\n\n    this.columnName = name;\n    this.partialQuery += `${name} BIGSERIAL`;\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public integer(name: string, length?: number): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} INT ${length ? `(${length})` : \"\"}`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} INTEGER ${length ? `(${length})` : \"\"}`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} INTEGER ${length ? `(${length})` : \"\"}`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public bigInteger(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} BIGINT`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} BIGINT`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} BIGINT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  /**\n   * @description Alias for integer\n   * @param name\n   * @returns ColumnOptionsBuilder\n   */\n  public int(name: string): ColumnOptionsBuilder {\n    return this.integer(name);\n  }\n\n  /**\n   * @description Alias for bigInteger\n   * @param name\n   * @returns ColumnOptionsBuilder\n   */\n  public bigint(name: string): ColumnOptionsBuilder {\n    return this.bigInteger(name);\n  }\n\n  public float(\n    name: string,\n    options: {\n      precision: number;\n      scale: number;\n    } = {\n      precision: 10,\n      scale: 2,\n    },\n  ): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} FLOAT(${options.precision}, ${options.scale})`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} REAL`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} REAL`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public decimal(\n    name: string,\n    options: {\n      precision: number;\n      scale: number;\n    } = {\n      precision: 10,\n      scale: 2,\n    },\n  ): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} DECIMAL(${options.precision}, ${options.scale})`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} DECIMAL(${options.precision}, ${options.scale})`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} DECIMAL(${options.precision}, ${options.scale})`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public double(\n    name: string,\n    options: {\n      precision: number;\n      scale: number;\n    } = {\n      precision: 10,\n      scale: 2,\n    },\n  ): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} DOUBLE(${options.precision}, ${options.scale})`;\n        break;\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} DOUBLE PRECISION`;\n        break;\n      case \"sqlite\":\n        this.columnName = name;\n        this.partialQuery += `${name} REAL`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public boolean(name: string): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mariadb\":\n      case \"mysql\":\n        this.columnName = name;\n        this.partialQuery += `${name} BOOLEAN`;\n        break;\n\n      case \"postgres\":\n        this.columnName = name;\n        this.partialQuery += `${name} BOOLEAN`;\n        break;\n      case \"sqlite\":\n        logger.warn(\n          \"sqlite does not support boolean columns, using integer instead\",\n        );\n        this.columnName = name;\n        this.partialQuery += `${name} INTEGER CHECK(${name} IN (0, 1))`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public date(name: string, options?: DateOptions): ColumnOptionsBuilder {\n    if (this.sqlType === \"sqlite\") {\n      logger.warn(\"sqlite does not support date columns, using text instead\");\n\n      this.columnName = name;\n      this.partialQuery += `${name} TEXT`;\n      return new ColumnOptionsBuilder(\n        this.table,\n        this.queryStatements,\n        this.partialQuery,\n        this.sqlType,\n        this.columnName,\n      );\n    }\n\n    this.columnName = name;\n    this.partialQuery += `${name} DATE`;\n\n    if (options && options.autoCreate) {\n      this.partialQuery += \" DEFAULT CURRENT_DATE\";\n    }\n\n    if (options && options.autoUpdate) {\n      if (this.sqlType === \"postgres\") {\n        throw new Error(\n          \"Postgres does not support auto updating a date column\",\n        );\n      }\n\n      this.partialQuery += \" ON UPDATE CURRENT_DATE\";\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public timestamp(name: string, options?: DateOptions): ColumnOptionsBuilder {\n    if (this.sqlType === \"sqlite\") {\n      logger.warn(\n        \"sqlite does not support timestamp columns, using text instead\",\n      );\n\n      this.columnName = name;\n      this.partialQuery += `${name} TEXT`;\n      return new ColumnOptionsBuilder(\n        this.table,\n        this.queryStatements,\n        this.partialQuery,\n        this.sqlType,\n        this.columnName,\n      );\n    }\n\n    this.columnName = name;\n    this.partialQuery += `${name} TIMESTAMP`;\n    if (options && options.autoCreate) {\n      this.partialQuery += \" DEFAULT CURRENT_TIMESTAMP\";\n    }\n\n    if (options && options.autoUpdate) {\n      if (this.sqlType === \"postgres\") {\n        throw new Error(\n          \"Postgres does not support auto updating a date column\",\n        );\n      }\n\n      this.partialQuery += \" ON UPDATE CURRENT_TIMESTAMP\";\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  /**\n   * @description EXPERIMENTAL\n   * @param name\n   */\n  public jsonb(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    switch (this.sqlType) {\n      case \"postgres\":\n        this.partialQuery += `${name} JSONB`;\n        break;\n      case \"mariadb\":\n      case \"mysql\":\n        this.partialQuery += `${name} JSON`;\n        break;\n      case \"sqlite\":\n        logger.warn(\n          \"sqlite does not support jsonb columns, using text instead\",\n        );\n        this.partialQuery += `${name} TEXT`;\n        break;\n      default:\n        throw new Error(\"Unsupported SQL type\");\n    }\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n\n    return new ColumnOptionsBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n}\n","import { SqlDataSourceType } from \"../../../sql_data_source\";\nimport ColumnTypeBuilder from \"./column_type_builder\";\n\nexport default class ColumnBuilderConnector {\n  protected table: string;\n  protected queryStatements: string[];\n  protected partialQuery: string;\n  protected sqlType: SqlDataSourceType;\n\n  constructor(\n    table: string,\n    queryStatements: string[],\n    partialQuery: string,\n    sqlType: SqlDataSourceType,\n  ) {\n    this.table = table;\n    this.queryStatements = queryStatements;\n    this.partialQuery = partialQuery;\n    this.sqlType = sqlType;\n  }\n\n  public newColumn(): ColumnTypeBuilder {\n    return new ColumnTypeBuilder(\n      this.table,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n    );\n  }\n}\n","import \"reflect-metadata\";\nimport { DateTime } from \"luxon\";\nimport { convertCase } from \"../../utils/case_utils\";\nimport { PaginatedData } from \"../pagination\";\nimport { ModelDeleteQueryBuilder } from \"../query_builder/delete_query_builder\";\nimport { ModelQueryBuilder, OneOptions } from \"../query_builder/query_builder\";\nimport { ModelUpdateQueryBuilder } from \"../query_builder/update_query_builder\";\nimport {\n  parseDatabaseDataIntoModelResponse,\n  addDynamicColumnsToModel,\n} from \"../serializer\";\nimport { SqlDataSource, ModelManager } from \"../sql_data_source\";\nimport { getPrimaryKey } from \"./model_decorators\";\nimport {\n  FindType,\n  UnrestrictedFindType,\n  FindOneType,\n  UnrestrictedFindOneType,\n  SelectableType,\n  DynamicColumnType,\n} from \"./model_manager/model_manager_types\";\nimport { Transaction } from \"../transaction\";\nimport { AbstractModel } from \"../../abstract_model\";\n\nexport type BaseModelMethodOptions = {\n  useConnection?: SqlDataSource;\n  trx?: Transaction;\n};\n\nexport function getBaseTableName(target: typeof Model): string {\n  const className = target.name;\n  return className.endsWith(\"s\")\n    ? convertCase(className, \"snake\")\n    : convertCase(className, \"snake\") + \"s\";\n}\n\nexport function getBaseModelInstance<T extends Model>(): T {\n  return { extraColumns: {} } as T;\n}\n\nconst tableMap = new WeakMap<typeof Model, string>();\nconst primaryKeyMap = new WeakMap<typeof Model, string>();\n\n/**\n * @description Represents a Table in the Database\n */\nexport abstract class Model extends AbstractModel {\n  /**\n   * @description The sql sqlInstance generated by SqlDataSource.connect\n   */\n  static sqlInstance: SqlDataSource;\n\n  /**\n   * @description Table name for the model, if not set it will be the plural snake case of the model name given that is in PascalCase (es. User -> users)\n   */\n  static tableName: string;\n\n  /**\n   * @description Static getter for table;\n   * @internal\n   */\n  static get table(): string {\n    if (!tableMap.has(this)) {\n      tableMap.set(this, this.tableName || getBaseTableName(this));\n    }\n\n    return tableMap.get(this)!;\n  }\n\n  /**\n   * @description Getter for the primary key of the model\n   */\n  static get primaryKey(): string | undefined {\n    if (!primaryKeyMap.has(this)) {\n      primaryKeyMap.set(this, getPrimaryKey(this));\n    }\n\n    return primaryKeyMap.get(this)!;\n  }\n\n  /**\n   * @description Constructor for the model, it's not meant to be used directly, it just initializes the extraColumns, it's advised to only use the static methods to interact with the Model sqlInstances\n   */\n  public constructor() {\n    super();\n  }\n\n  /**\n   * @description Gives a query sqlInstance for the given model\n   * @param model\n   * @returns {ModelQueryBuilder<T>}\n   */\n  static query<T extends Model>(\n    this: new () => T | typeof Model,\n    options: BaseModelMethodOptions = {},\n  ): ModelQueryBuilder<T> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return modelManager.query();\n  }\n\n  /**\n   * @description Finds the first record in the database\n   * @param model\n   * @param {FindType} options\n   * @deprecated Used only for debugging purposes, use findOne or query instead\n   * @returns {Promise<T[]>}\n   */\n  static async first<T extends Model>(\n    this: new () => T | typeof Model,\n    options: OneOptions & BaseModelMethodOptions = { throwErrorOnNull: false },\n  ): Promise<T | null> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return await modelManager.query().one(options);\n  }\n\n  /**\n   * @description Finds records for the given model\n   * @param model\n   * @param {FindType} options\n   * @returns {Promise<T[]>}\n   */\n  static find<T extends Model>(\n    this: new () => T | typeof Model,\n    options?: FindType<T> | UnrestrictedFindType<T>,\n  ): Promise<T[]> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>({\n      trx: options?.trx,\n      useConnection: options?.useConnection,\n    } as BaseModelMethodOptions);\n    return modelManager.find(options);\n  }\n\n  /**\n   * @description Finds a record for the given model\n   * @param model\n   * @param {FindOneType} options\n   * @returns {Promise<T | null>}\n   */\n  static findOne<T extends Model>(\n    this: new () => T | typeof Model,\n    options: FindOneType<T> | UnrestrictedFindOneType<T>,\n  ): Promise<T | null> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return modelManager.findOne(options);\n  }\n\n  /**\n   * @description Finds a record for the given model for the given id, \"id\" must be set in the model in order for it to work\n   * @param model\n   * @param {number | string} id\n   * @returns {Promise<T | null>}\n   */\n  static findOneByPrimaryKey<T extends Model>(\n    this: new () => T | typeof Model,\n    value: string | number | boolean,\n    options: { throwErrorOnNull: boolean } & BaseModelMethodOptions = {\n      throwErrorOnNull: false,\n    },\n  ): Promise<T | null> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return modelManager.findOneByPrimaryKey(value, options.throwErrorOnNull);\n  }\n\n  /**\n   * @description Refreshes a model from the database, the model must have a primary key defined\n   * @param model\n   */\n  static refresh<T extends Model>(\n    this: new () => T | typeof Model,\n    model: T,\n    options: { throwErrorOnNull: boolean } & BaseModelMethodOptions = {\n      throwErrorOnNull: false,\n    },\n  ): Promise<T | null> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    const primaryKey = typeofModel.primaryKey as keyof T;\n    const primaryKeyValue = model[primaryKey];\n    return modelManager.findOneByPrimaryKey(\n      primaryKeyValue as string,\n      options.throwErrorOnNull,\n    );\n  }\n\n  /**\n   * @description Saves a new record to the database\n   * @description While using mysql, it will return records only if the primary key is auto incrementing integer, else it will always return null\n   * @param model\n   * @param {Model} modelData\n   * @param trx\n   * @returns {Promise<T | null>}\n   */\n  static insert<T extends Model>(\n    this: new () => T | typeof Model,\n    modelData: Partial<T>,\n    options: BaseModelMethodOptions = {},\n  ): Promise<T | null> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return modelManager.insert(modelData);\n  }\n\n  /**\n   * @description Saves multiple records to the database\n   * @description WHile using mysql, it will return records only if the primary key is auto incrementing integer, else it will always return []\n   * @param model\n   * @param {Model} modelsData\n   * @param trx\n   * @returns {Promise<T[]>}\n   */\n  static insertMany<T extends Model>(\n    this: new () => T | typeof Model,\n    modelsData: Partial<T>[],\n    options: BaseModelMethodOptions = {},\n  ): Promise<T[]> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return modelManager.insertMany(modelsData);\n  }\n\n  /**\n   * @description Updates a record to the database\n   * @param model\n   * @param {Model} modelsqlInstance\n   * @param trx\n   * @returns\n   */\n  static updateRecord<T extends Model>(\n    this: new () => T | typeof Model,\n    modelsqlInstance: T,\n    options: BaseModelMethodOptions = {},\n  ): Promise<T | null> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return modelManager.updateRecord(modelsqlInstance);\n  }\n\n  /**\n   * @description Finds the first record or creates a new one if it doesn't exist\n   * @param model\n   * @param {Partial<T>} searchCriteria\n   * @param {Partial<T>} createData\n   */\n  static async firstOrCreate<T extends Model>(\n    this: new () => T | typeof Model,\n    searchCriteria: Partial<T>,\n    createData: Partial<T>,\n    options: BaseModelMethodOptions = {},\n  ): Promise<T> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    const doesExist = await modelManager.findOne({\n      where: searchCriteria,\n    });\n\n    if (doesExist) {\n      return doesExist;\n    }\n\n    return (await modelManager.insert(createData)) as T;\n  }\n\n  /**\n   * @description Updates or creates a new record\n   * @param {Partial<T>} searchCriteria\n   * @param {Partial<T>} data\n   * @param options - The options to update the record on conflict, default is true\n   */\n  static async upsert<T extends Model>(\n    this: new () => T | typeof Model,\n    searchCriteria: Partial<T>,\n    data: Partial<T>,\n    options: { updateOnConflict?: boolean } & BaseModelMethodOptions = {\n      updateOnConflict: true,\n    },\n  ): Promise<T> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    const doesExist = await modelManager.findOne({\n      where: searchCriteria,\n    });\n\n    if (doesExist) {\n      data[typeofModel.primaryKey as keyof T] =\n        doesExist[typeofModel.primaryKey as keyof T];\n\n      if (options.updateOnConflict) {\n        return (await modelManager.updateRecord(data as T)) as T;\n      }\n\n      return doesExist;\n    }\n\n    return (await modelManager.insert(data)) as T;\n  }\n\n  /**\n   * @description Updates or creates multiple records\n   * @param {Partial<T>} searchCriteria\n   * @param {Partial<T>} data\n   * @param options - The options to update the record on conflict, default is true\n   * @returns - The updated or created records\n   */\n  static async upsertMany<T extends Model>(\n    this: new () => T | typeof Model,\n    searchCriteria: SelectableType<T>[],\n    data: Partial<T>[],\n    options: { updateOnConflict?: boolean } & BaseModelMethodOptions = {\n      updateOnConflict: true,\n    },\n  ): Promise<T[]> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n\n    if (\n      !data.every((record) =>\n        searchCriteria.every((column) => column in record),\n      )\n    ) {\n      throw new Error(\n        \"Conflict columns are not present in the data, please make sure to include them in the data, \" +\n          searchCriteria.join(\", \"),\n      );\n    }\n\n    const results: T[] = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const record = data[i];\n      const search = searchCriteria.reduce((acc, column) => {\n        acc[column] = record[column];\n        return acc;\n      }, {} as Partial<T>);\n\n      const doesExist = await modelManager.findOne({\n        where: search,\n      });\n\n      if (doesExist) {\n        record[typeofModel.primaryKey as keyof T] =\n          doesExist[typeofModel.primaryKey as keyof T];\n\n        if (options.updateOnConflict) {\n          results.push((await modelManager.updateRecord(record as T)) as T);\n          continue;\n        }\n\n        results.push(doesExist);\n        continue;\n      }\n\n      results.push((await modelManager.insert(record)) as T);\n    }\n\n    return results;\n  }\n\n  /**\n   * @description Updates records to the database\n   * @param model\n   * @param {Model} modelsqlInstance\n   * @param trx\n   * @returns Update query builder\n   */\n  static update<T extends Model>(\n    this: new () => T | typeof Model,\n    options: BaseModelMethodOptions = {},\n  ): ModelUpdateQueryBuilder<T> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return modelManager.update();\n  }\n\n  /**\n   * @description Gives a Delete query builder sqlInstance\n   * @param model\n   * @param {Model} modelsqlInstance\n   * @param trx\n   * @returns\n   */\n  static deleteQuery<T extends Model>(\n    this: new () => T | typeof Model,\n    options: BaseModelMethodOptions = {},\n  ): ModelDeleteQueryBuilder<T> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return modelManager.deleteQuery();\n  }\n\n  /**\n   * @description Deletes a record to the database\n   * @param model\n   * @param {Model} modelsqlInstance\n   * @param trx\n   * @returns\n   */\n  static deleteRecord<T extends Model>(\n    this: new () => T | typeof Model,\n    modelsqlInstance: T,\n    options: BaseModelMethodOptions = {},\n  ): Promise<T | null> {\n    const typeofModel = this as unknown as typeof Model;\n    const modelManager = typeofModel.getModelManager<T>(options);\n    return modelManager.deleteRecord(modelsqlInstance);\n  }\n\n  /**\n   * @description Soft Deletes a record to the database\n   * @param model\n   * @param {Model} modelsqlInstance\n   * @param options - The options to soft delete the record, column and value - Default is 'deletedAt' for column and the current date and time for value, string is always counted as a Date stringified as new Date().toString()\n   * @param trx\n   * @returns\n   */\n  static async softDelete<T extends Model>(\n    this: new () => T | typeof Model,\n    modelsqlInstance: T,\n    options?: {\n      column?: string;\n      value?: string | number | boolean;\n    } & BaseModelMethodOptions,\n  ): Promise<T> {\n    const typeofModel = this as unknown as typeof Model;\n    const {\n      column = \"deletedAt\" as SelectableType<T>,\n      value = DateTime.local().toISO(),\n    } = options || {};\n\n    modelsqlInstance[column as keyof T] = value as T[keyof T];\n    const modelManager = typeofModel.getModelManager<T>({\n      trx: options?.trx,\n      useConnection: options?.useConnection,\n    });\n    await modelManager.updateRecord(modelsqlInstance);\n\n    if (typeof value === \"string\") {\n      modelsqlInstance[column as keyof T] = DateTime.fromISO(\n        value,\n      ) as T[keyof T];\n    }\n\n    modelsqlInstance[column as keyof T] = value as T[keyof T];\n    return (await parseDatabaseDataIntoModelResponse(\n      [modelsqlInstance],\n      typeofModel,\n    )) as T;\n  }\n\n  /**\n   * @description Adds dynamic columns to the model that are not defined in the Table and are defined in the model\n   * @description It does not support custom connection or transaction\n   * @param model\n   * @param data\n   * @param dynamicColumns\n   * @returns\n   */\n  static async addDynamicColumns<T extends Model>(\n    this: new () => T | typeof Model,\n    data: T | T[] | PaginatedData<T>,\n    dynamicColumns: DynamicColumnType<T>[],\n  ): Promise<T | T[] | PaginatedData<T>> {\n    const typeofModel = this as unknown as typeof Model;\n    typeofModel.establishConnection();\n    if (Array.isArray(data)) {\n      for (const model of data) {\n        await addDynamicColumnsToModel(\n          typeofModel,\n          model,\n          dynamicColumns as string[],\n        );\n      }\n\n      return data as T[];\n    }\n\n    if (!Array.isArray(data)) {\n      await addDynamicColumnsToModel(\n        typeofModel,\n        data,\n        dynamicColumns as string[],\n      );\n\n      return data as T;\n    }\n\n    for (const model of (data as PaginatedData<T>).data) {\n      await addDynamicColumnsToModel(\n        typeofModel,\n        model,\n        dynamicColumns as string[],\n      );\n    }\n\n    return data as PaginatedData<T>;\n  }\n\n  /**\n   * @description Merges the provided data with the sqlInstance\n   * @param sqlInstance\n   * @param data\n   * @returns {void}\n   */\n  static combineProps<T extends Model>(sqlInstance: T, data: Partial<T>): void {\n    for (const key in data) {\n      Object.assign(sqlInstance, { [key]: data[key] });\n    }\n  }\n\n  /**\n   * @description Adds a beforeFetch clause to the model, adding the ability to modify the query before fetching the data\n   * @param queryBuilder\n   */\n  static beforeFetch(queryBuilder: ModelQueryBuilder<any>): void {\n    queryBuilder;\n  }\n\n  /**\n   * @description Adds a beforeInsert clause to the model, adding the ability to modify the data after fetching the data\n   * @param data\n   * @returns {T}\n   */\n  static beforeInsert(data: any): void {\n    return data;\n  }\n\n  /**\n   * @description Adds a beforeUpdate clause to the model, adding the ability to modify the query before updating the data\n   * @param data\n   */\n  static beforeUpdate(queryBuilder: ModelUpdateQueryBuilder<any>): void {\n    queryBuilder;\n  }\n\n  /**\n   * @description Adds a beforeDelete clause to the model, adding the ability to modify the query before deleting the data\n   * @param data\n   */\n  static beforeDelete(queryBuilder: ModelDeleteQueryBuilder<any>): void {\n    queryBuilder;\n  }\n\n  /**\n   * @description Adds a afterFetch clause to the model, adding the ability to modify the data after fetching the data\n   * @param data\n   * @returns {T}\n   */\n  static async afterFetch(data: Model[]): Promise<Model[]> {\n    return data;\n  }\n\n  /**\n   * @description Establishes a connection to the database instantiated from the SqlDataSource.connect method, this is done automatically when using the static methods\n   * @description This method is meant to be used only if you want to establish sql sqlInstance of the model directly\n   * @internal\n   * @returns {void}\n   */\n  private static establishConnection(): void {\n    const sql = SqlDataSource.getInstance();\n    if (!sql) {\n      throw new Error(\n        \"sql sqlInstance not initialized, did you defined it in SqlDataSource.connect static method?\",\n      );\n    }\n\n    this.sqlInstance = sql;\n  }\n\n  /**\n   * @description Gives the correct model manager with the correct connection based on the options provided\n   * @param this\n   * @param options\n   * @returns\n   */\n  private static getModelManager<T extends Model>(\n    this: typeof Model,\n    options: BaseModelMethodOptions,\n  ): ModelManager<T> {\n    if (options.useConnection) {\n      return options.useConnection.getModelManager<T>(\n        this as unknown as typeof Model,\n      );\n    }\n\n    if (options.trx) {\n      return options.trx.sqlDataSource.getModelManager<T>(\n        this as unknown as typeof Model,\n      );\n    }\n\n    const typeofModel = this as unknown as typeof Model;\n    typeofModel.establishConnection();\n    return typeofModel.sqlInstance.getModelManager<T>(typeofModel);\n  }\n}\n","export type CaseConvention =\n  | \"camel\"\n  | \"snake\"\n  | \"none\"\n  | RegExp\n  | ((column: string) => string);\n\nfunction camelToSnakeCase(camelCase: any) {\n  if (typeof camelCase !== \"string\" || !camelCase) {\n    return camelCase;\n  }\n\n  if (camelCase === camelCase.toLowerCase()) {\n    return camelCase;\n  }\n\n  return camelCase.replace(/([a-z0-9])([A-Z])/g, \"$1_$2\").toLowerCase();\n}\n\nfunction fromSnakeToCamelCase(snake: any) {\n  if (typeof snake !== \"string\" || !snake) {\n    return snake;\n  }\n\n  if (snake === snake.toUpperCase()) {\n    return snake;\n  }\n\n  return snake.replace(/(_\\w)/g, (x) => x[1].toUpperCase());\n}\n\nexport function convertCase(value: any, to: CaseConvention) {\n  if (to === \"none\") {\n    return value;\n  }\n\n  if (to === \"snake\") {\n    return camelToSnakeCase(value);\n  }\n\n  if (to === \"camel\") {\n    return fromSnakeToCamelCase(value);\n  }\n\n  if (to instanceof RegExp) {\n    return value.replace(to, (x: string) => x[1].toUpperCase());\n  }\n\n  return to(value);\n}\n","export function isNestedObject(value: any): boolean {\n  return (\n    typeof value === \"object\" &&\n    !Array.isArray(value) &&\n    value !== null &&\n    Object.keys(value).length > 0\n  );\n}\n","import { Model } from \"../model\";\n\n/**\n * @description Options for the relation\n * @property {string} softDeleteColumn - The column name for the soft delete column, if set, the relation will only return rows that have not been soft deleted\n * @property {string} softDeleteType - The type of the soft delete column\n */\nexport interface RelationOptions {\n  softDeleteColumn: string;\n  softDeleteType: \"date\" | \"boolean\";\n}\n\nexport enum RelationEnum {\n  hasOne = \"hasOne\", // One to One without foreign key\n  belongsTo = \"belongsTo\", // One to One with foreign key\n  hasMany = \"hasMany\",\n}\n\nexport function isRelationDefinition(\n  originalValue: any,\n): originalValue is Relation {\n  return (\n    originalValue.hasOwnProperty(\"type\") &&\n    originalValue.hasOwnProperty(\"relatedModel\") &&\n    originalValue.hasOwnProperty(\"foreignKey\")\n  );\n}\n\n/**\n * Main Model -> Related Model\n */\n\nexport abstract class Relation {\n  public abstract type: RelationEnum;\n  public model: typeof Model = Model;\n  public columnName: string = \"\";\n  public foreignKey?: string;\n  public relatedModel: string = \"\";\n  public options?: RelationOptions;\n\n  protected constructor(\n    model: typeof Model,\n    columnName: string,\n    options?: RelationOptions,\n  ) {\n    this.model = model;\n    this.columnName = columnName;\n    this.relatedModel = this.model.table;\n    this.options = options;\n  }\n}\n","import { Model } from \"../model\";\nimport { Relation, RelationEnum, RelationOptions } from \"./relation\";\n\nexport class BelongsTo extends Relation {\n  public type: RelationEnum;\n  public foreignKey: string;\n\n  public constructor(\n    relatedModel: typeof Model,\n    columnName: string,\n    foreignKey: string,\n    options?: RelationOptions,\n  ) {\n    super(relatedModel, columnName, options);\n    this.foreignKey = foreignKey;\n    this.type = RelationEnum.belongsTo;\n  }\n}\n","import { Model } from \"../model\";\nimport { Relation, RelationEnum, RelationOptions } from \"./relation\";\n\nexport class HasMany extends Relation {\n  public type: RelationEnum = RelationEnum.hasMany;\n  public foreignKey: string;\n\n  public constructor(\n    relatedModel: typeof Model,\n    columnName: string,\n    foreignKey: string,\n    options?: RelationOptions,\n  ) {\n    super(relatedModel, columnName, options);\n    this.foreignKey = foreignKey;\n    this.type = RelationEnum.hasMany;\n  }\n}\n","import { Model } from \"../model\";\nimport { Relation, RelationEnum, RelationOptions } from \"./relation\";\n\nexport class HasOne extends Relation {\n  public type: RelationEnum;\n  public foreignKey: string;\n\n  public constructor(\n    relatedModel: typeof Model,\n    columnName: string,\n    foreignKey: string,\n    options?: RelationOptions,\n  ) {\n    super(relatedModel, columnName, options);\n    this.foreignKey = foreignKey;\n    this.type = RelationEnum.hasOne;\n  }\n}\n","import { Model as AbstractModel } from \"./model\";\nimport { BelongsTo } from \"./relations/belongs_to\";\nimport { HasMany } from \"./relations/has_many\";\nimport { HasOne } from \"./relations/has_one\";\nimport { RelationEnum, RelationOptions, Relation } from \"./relations/relation\";\n\ntype LazyRelationEnum = {\n  type: RelationEnum;\n  columnName: string;\n  model: () => typeof AbstractModel;\n  foreignKey: string;\n  options?: RelationOptions;\n};\n\n/**\n * columns\n */\n\ninterface ColumnOptions {\n  booleanColumn?: boolean;\n  primaryKey?: boolean;\n}\n\nconst COLUMN_METADATA_KEY = Symbol(\"columns\");\nconst DYNAMIC_COLUMN_METADATA_KEY = Symbol(\"dynamicColumns\");\nconst PRIMARY_KEY_METADATA_KEY = Symbol(\"primaryKey\");\nconst BOOLEAN_COLUMN_METADATA_KEY = Symbol(\"booleanColumns\");\nconst RELATION_METADATA_KEY = Symbol(\"relations\");\n\n/**\n * @description Decorator to define a column in the model\n * @param options - Options for the column\n * @returns\n */\nexport function column(\n  options: ColumnOptions = { primaryKey: false, booleanColumn: false },\n): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    if (options.primaryKey) {\n      const primaryKey = Reflect.getMetadata(PRIMARY_KEY_METADATA_KEY, target);\n      if (primaryKey) {\n        throw new Error(\"Multiple primary keys are not allowed\");\n      }\n      Reflect.defineMetadata(PRIMARY_KEY_METADATA_KEY, propertyKey, target);\n    }\n\n    if (options.booleanColumn) {\n      const booleanColumns =\n        Reflect.getMetadata(BOOLEAN_COLUMN_METADATA_KEY, target) || [];\n      booleanColumns.push(propertyKey);\n      Reflect.defineMetadata(\n        BOOLEAN_COLUMN_METADATA_KEY,\n        booleanColumns,\n        target,\n      );\n    }\n\n    const existingColumns =\n      Reflect.getMetadata(COLUMN_METADATA_KEY, target) || [];\n    existingColumns.push(propertyKey);\n    Reflect.defineMetadata(COLUMN_METADATA_KEY, existingColumns, target);\n  };\n}\n\n/**\n * @description Defines a dynamic calculated column that is not defined inside the Table, it must be added to a query in order to be retrieved\n * @param columnName that will be filled inside the dynamicColumn field\n * @returns\n */\nexport function dynamicColumn(columnName: string): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    const dynamicColumn = {\n      columnName: columnName,\n      functionName: propertyKey,\n      dynamicColumnFn: target.constructor.prototype[propertyKey],\n    };\n\n    const existingColumns =\n      Reflect.getMetadata(DYNAMIC_COLUMN_METADATA_KEY, target) || [];\n    existingColumns.push(dynamicColumn);\n    Reflect.defineMetadata(\n      DYNAMIC_COLUMN_METADATA_KEY,\n      existingColumns,\n      target,\n    );\n  };\n}\n\n/**\n * @description Returns the columns of the model, columns must be decorated with the column decorator\n * @param target Model\n * @returns\n */\nexport function getModelColumns(target: typeof AbstractModel): string[] {\n  return Reflect.getMetadata(COLUMN_METADATA_KEY, target.prototype) || [];\n}\n\n/**\n * @description Returns the boolean columns of the model\n * @param target Model\n * @returns\n */\nexport function getModelBooleanColumns(target: typeof AbstractModel): string[] {\n  return (\n    Reflect.getMetadata(BOOLEAN_COLUMN_METADATA_KEY, target.prototype) || []\n  );\n}\n\n/**\n * relations\n */\n\n/**\n * @description Establishes a belongs to relation with the given model\n * @param model - callback that returns the related model\n * @param foreignKey - the foreign key in the current model that defines the relation\n * @param options - Options for the relation\n * @returns\n */\nexport function belongsTo(\n  model: () => typeof AbstractModel,\n  foreignKey: string,\n  options?: RelationOptions,\n): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    const relation = {\n      type: RelationEnum.belongsTo,\n      columnName: propertyKey as string,\n      model,\n      foreignKey,\n      options,\n    };\n    const relations = Reflect.getMetadata(RELATION_METADATA_KEY, target) || [];\n    relations.push(relation);\n    Reflect.defineMetadata(RELATION_METADATA_KEY, relations, target);\n  };\n}\n\n/**\n * @description Establishes a has one relation with the given model\n * @param model - callback that returns the related model\n * @param foreignKey - the foreign key in the relation model that defines the relation\n * @param options - Options for the relation\n * @returns\n */\nexport function hasOne(\n  model: () => typeof AbstractModel,\n  foreignKey: string,\n  options?: RelationOptions,\n): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    const relation = {\n      type: RelationEnum.hasOne,\n      columnName: propertyKey as string,\n      model,\n      foreignKey,\n      options,\n    };\n    const relations = Reflect.getMetadata(RELATION_METADATA_KEY, target) || [];\n    relations.push(relation);\n    Reflect.defineMetadata(RELATION_METADATA_KEY, relations, target);\n  };\n}\n\n/**\n * @description Establishes a has many relation with the given model\n * @param model - callback that returns the related model\n * @param foreignKey - the foreign key in the relation model that defines the relation\n * @param options - Options for the relation\n * @returns\n */\nexport function hasMany(\n  model: () => typeof AbstractModel,\n  foreignKey: string,\n  options?: RelationOptions,\n): PropertyDecorator {\n  return (target: Object, propertyKey: string | symbol) => {\n    const relation = {\n      type: RelationEnum.hasMany,\n      columnName: propertyKey,\n      model,\n      foreignKey,\n      options,\n    };\n    const relations = Reflect.getMetadata(RELATION_METADATA_KEY, target) || [];\n    relations.push(relation);\n    Reflect.defineMetadata(RELATION_METADATA_KEY, relations, target);\n  };\n}\n\n/**\n * @description Returns the relations of the model\n * @param target Model\n * @returns\n */\nexport function getRelations(target: typeof AbstractModel): Relation[] {\n  const relations =\n    Reflect.getMetadata(RELATION_METADATA_KEY, target.prototype) || [];\n  return relations.map((relation: LazyRelationEnum) => {\n    const { type, model, columnName, foreignKey, options } = relation;\n    switch (type) {\n      case RelationEnum.belongsTo:\n        return new BelongsTo(model(), columnName, foreignKey, options);\n      case RelationEnum.hasOne:\n        return new HasOne(model(), columnName, foreignKey, options);\n      case RelationEnum.hasMany:\n        return new HasMany(model(), columnName, foreignKey, options);\n      default:\n        throw new Error(`Unknown relation type: ${type}`);\n    }\n  });\n}\n\n/**\n * @description Returns the primary key of the model\n * @param target Model\n * @returns\n */\nexport function getPrimaryKey(target: typeof AbstractModel): string {\n  return Reflect.getMetadata(PRIMARY_KEY_METADATA_KEY, target.prototype);\n}\n\n/**\n * @description Returns every dynamicColumn definition\n */\nexport function getDynamicColumns(target: typeof AbstractModel): {\n  columnName: string;\n  functionName: string;\n  dynamicColumnFn: (...args: any[]) => any;\n}[] {\n  return Reflect.getMetadata(DYNAMIC_COLUMN_METADATA_KEY, target.prototype);\n}\n","import { convertCase } from \"../utils/case_utils\";\nimport { isNestedObject } from \"../utils/json_utils\";\nimport { Model } from \"./models/model\";\nimport {\n  getRelations,\n  getModelBooleanColumns,\n  getModelColumns,\n  getDynamicColumns,\n} from \"./models/model_decorators\";\nimport {\n  isRelationDefinition,\n  Relation,\n  RelationEnum,\n} from \"./models/relations/relation\";\n\nexport async function parseDatabaseDataIntoModelResponse<T extends Model>(\n  models: T[],\n  typeofModel: typeof Model,\n  relationModels: { [relationName: string]: Model[] }[] = [],\n): Promise<T | T[] | null> {\n  if (!models.length) {\n    return null;\n  }\n\n  const relations = getRelations(typeofModel);\n\n  const serializedModels = models.map((model) => {\n    const serializedModel = serializeModel(model, typeofModel);\n    processRelation(serializedModel, typeofModel, relations, relationModels);\n    addNullModelColumns(typeofModel, serializedModel);\n\n    return serializedModel;\n  });\n\n  return serializedModels.length === 1 ? serializedModels[0] : serializedModels;\n}\n\nfunction serializeModel<T extends Record<string, any>>(\n  model: T,\n  typeofModel: typeof Model,\n): T {\n  const camelCaseModel: Record<string, any> = {};\n  const booleanColumns = getModelBooleanColumns(typeofModel);\n\n  for (const key in model) {\n    if (model[key] === undefined) {\n      delete (model as Partial<Model>)[key as keyof Model];\n    }\n\n    if (model.hasOwnProperty(key)) {\n      if (key === \"extraColumns\") {\n        processExtraColumns(model, key, camelCaseModel, typeofModel);\n        continue;\n      }\n\n      const originalValue = model[key];\n      // Include null values\n      if (originalValue == null) {\n        camelCaseModel[convertCase(key, typeofModel.modelCaseConvention)] =\n          originalValue;\n        continue;\n      }\n\n      if (isRelationDefinition(originalValue)) {\n        continue;\n      }\n\n      const camelCaseKey = convertCase(key, typeofModel.modelCaseConvention);\n      if (isNestedObject(originalValue) && !Array.isArray(originalValue)) {\n        camelCaseModel[camelCaseKey] = convertToModelCaseConvention(\n          originalValue,\n          typeofModel,\n        );\n        continue;\n      }\n\n      // TODO: For now, non relation arrays are not supported\n      if (Array.isArray(originalValue)) {\n        continue;\n      }\n\n      if (booleanColumns.includes(camelCaseKey)) {\n        camelCaseModel[camelCaseKey] = Boolean(originalValue);\n        continue;\n      }\n\n      camelCaseModel[camelCaseKey] = originalValue;\n    }\n  }\n\n  return camelCaseModel as T;\n}\n\nfunction addNullModelColumns(\n  typeofModel: typeof Model,\n  serializedModel: Record<string, any>,\n) {\n  const columns = getModelColumns(typeofModel);\n  columns.forEach((column) => {\n    const casedColumn = convertCase(\n      column,\n      typeofModel.modelCaseConvention,\n    ) as string;\n\n    if (serializedModel.hasOwnProperty(column)) {\n      return;\n    }\n\n    serializedModel[casedColumn] = null;\n  });\n}\n\nfunction processExtraColumns(\n  model: Record<string, any>,\n  key: string,\n  camelCaseModel: Record<string, any>,\n  typeofModel: typeof Model,\n) {\n  if (!Object.keys(model[key]).length) {\n    return;\n  }\n\n  const extraColumns = Object.keys(model[key]).reduce(\n    (acc, objKey) => {\n      acc[convertCase(objKey, typeofModel.modelCaseConvention)] =\n        model[key][objKey];\n      return acc;\n    },\n    {} as Record<string, any>,\n  );\n\n  camelCaseModel[key] = extraColumns;\n}\n\nfunction processRelation(\n  serializedModel: Record<string, any>,\n  typeofModel: typeof Model,\n  relations: Relation[],\n  relationModels: { [relationName: string]: Model[] }[],\n) {\n  relations.forEach((relation: Relation) => {\n    const relationModel = relationModels.find(\n      (relationModel) => relationModel[relation.columnName],\n    );\n\n    if (!relationModel) {\n      return;\n    }\n\n    const relatedModels = relationModel[relation.columnName];\n    const foreignKey = convertCase(\n      relation.foreignKey,\n      typeofModel.modelCaseConvention,\n    ) as string;\n    const primaryKey = convertCase(\n      typeofModel.primaryKey,\n      typeofModel.modelCaseConvention,\n    ) as string;\n\n    switch (relation.type) {\n      case RelationEnum.belongsTo:\n        const relatedModelMap = new Map<any, Model>();\n        relatedModels.forEach((model) => {\n          relatedModelMap.set(model[primaryKey as keyof Model], model);\n        });\n\n        const retrievedRelatedModel = relatedModelMap.get(\n          serializedModel[foreignKey as keyof Model],\n        );\n\n        if (retrievedRelatedModel) {\n          serializedModel[relation.columnName] = serializeModel(\n            retrievedRelatedModel,\n            relation.model,\n          );\n        }\n        break;\n\n      case RelationEnum.hasOne:\n        const relatedModelMapHasOne = new Map<any, Model>();\n        relatedModels.forEach((model) => {\n          relatedModelMapHasOne.set(model[foreignKey as keyof Model], model);\n        });\n\n        const retrievedRelatedModelHasOne = relatedModelMapHasOne.get(\n          serializedModel[foreignKey as keyof Model],\n        );\n\n        if (retrievedRelatedModelHasOne) {\n          serializedModel[relation.columnName] = serializeModel(\n            retrievedRelatedModelHasOne,\n            relation.model,\n          );\n        }\n        break;\n\n      case RelationEnum.hasMany:\n        const retrievedRelatedModels = relatedModels.filter(\n          (item) =>\n            // Since it's still raw data and it's not yet been converted to camel case (it will soon in the serializeModel call)m it's matched with the camel case key\n            item[\n              convertCase(\n                foreignKey,\n                typeofModel.databaseCaseConvention,\n              ) as keyof Model\n            ] === serializedModel[primaryKey as keyof Model],\n        );\n\n        serializedModel[relation.columnName] = retrievedRelatedModels.map(\n          (model) => serializeModel(model, relation.model),\n        );\n        break;\n\n      default:\n        throw new Error(\"Relation type not supported\");\n    }\n  });\n}\n\nfunction convertToModelCaseConvention(\n  originalValue: Record<string, any>,\n  typeofModel: typeof Model,\n): Record<string, any> {\n  return Object.keys(originalValue).reduce(\n    (acc, objKey) => {\n      acc[convertCase(objKey, typeofModel.modelCaseConvention)] =\n        originalValue[objKey];\n      return acc;\n    },\n    {} as Record<string, any>,\n  );\n}\n\nexport async function addDynamicColumnsToModel(\n  typeofModel: typeof Model,\n  model: Record<string, any>,\n  dynamicColumnsToAdd: string[],\n): Promise<void> {\n  const dynamicColumns = getDynamicColumns(typeofModel);\n  if (!dynamicColumns || !dynamicColumns.length) {\n    return;\n  }\n\n  const dynamicColumnMap = new Map<\n    string,\n    {\n      columnName: string;\n      dynamicColumnFn: (...args: any[]) => any;\n    }\n  >();\n\n  for (const dynamicColumn of dynamicColumns) {\n    dynamicColumnMap.set(dynamicColumn.functionName, {\n      columnName: dynamicColumn.columnName,\n      dynamicColumnFn: dynamicColumn.dynamicColumnFn,\n    });\n  }\n\n  const promises = dynamicColumnsToAdd.map(async (dynamicColumn: string) => {\n    const dynamic = dynamicColumnMap.get(dynamicColumn);\n    const casedKey = convertCase(\n      dynamic?.columnName,\n      typeofModel.modelCaseConvention,\n    );\n\n    Object.assign(model, { [casedKey]: await dynamic?.dynamicColumnFn() });\n  });\n\n  await Promise.all(promises);\n}\n","import mysql, { createConnection } from \"mysql2/promise\";\nimport pg from \"pg\";\nimport sqlite3 from \"sqlite3\";\nimport { DataSourceInput, DataSourceType, DataSource } from \"../data_source\";\nimport logger, { log } from \"../utils/logger\";\nimport { Model } from \"./models/model\";\nimport { MysqlModelManager } from \"./mysql/mysql_model_manager\";\nimport { PostgresModelManager } from \"./postgres/postgres_model_manager\";\nimport { SqliteModelManager } from \"./sqlite/sql_lite_model_manager\";\nimport { Transaction } from \"./transaction\";\n\ntype DriverSpecificOptions = {\n  mysqlOptions?: mysql.PoolOptions;\n  pgOptions?: pg.PoolConfig;\n};\n\nexport type ModelManager<T extends Model> =\n  | MysqlModelManager<T>\n  | PostgresModelManager<T>\n  | SqliteModelManager<T>;\n\nexport type SqlConnectionType = mysql.Connection | pg.Client | sqlite3.Database;\n\nexport interface ISqlDataSourceInput extends DataSourceInput {\n  type: Exclude<DataSourceType, \"mongo\">;\n}\n\nexport type SqlDataSourceInput = Exclude<ISqlDataSourceInput, \"mongoOptions\">;\n\nexport type SqlDataSourceType = SqlDataSourceInput[\"type\"];\n\nexport class SqlDataSource extends DataSource {\n  public isConnected: boolean;\n  protected sqlConnection!: SqlConnectionType;\n  private static instance: SqlDataSource | null = null;\n\n  private constructor(input?: SqlDataSourceInput) {\n    super(input);\n    this.isConnected = false;\n  }\n\n  public getDbType(): SqlDataSourceType {\n    return this.type as SqlDataSourceType;\n  }\n\n  /**\n   * @description Connects to the database establishing a connection. If no connection details are provided, the default values from the env will be taken instead\n   * @description The User input connection details will always come first\n   */\n  static async connect(\n    input?: SqlDataSourceInput,\n    cb?: () => Promise<void> | void,\n  ): Promise<SqlDataSource> {\n    const sqlDataSource = new this(input);\n    switch (sqlDataSource.type) {\n      case \"mysql\":\n      case \"mariadb\":\n        sqlDataSource.sqlConnection = await mysql.createConnection({\n          host: sqlDataSource.host,\n          port: sqlDataSource.port,\n          user: sqlDataSource.username,\n          password: sqlDataSource.password,\n          database: sqlDataSource.database,\n          ...input?.mysqlOptions,\n        });\n        break;\n\n      case \"postgres\":\n        sqlDataSource.sqlConnection = new pg.Client({\n          host: sqlDataSource.host,\n          port: sqlDataSource.port,\n          user: sqlDataSource.username,\n          password: sqlDataSource.password,\n          database: sqlDataSource.database,\n          ...input?.pgOptions,\n        });\n        await (sqlDataSource.sqlConnection as pg.Client).connect();\n        break;\n\n      case \"sqlite\":\n        sqlDataSource.sqlConnection = new sqlite3.Database(\n          sqlDataSource.database,\n          sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE,\n          (err) => {\n            if (err) {\n              throw new Error(`Error while connecting to sqlite: ${err}`);\n            }\n          },\n        );\n        break;\n\n      default:\n        throw new Error(`Unsupported datasource type: ${sqlDataSource.type}`);\n    }\n\n    sqlDataSource.isConnected = true;\n    SqlDataSource.instance = sqlDataSource;\n    cb?.();\n    return sqlDataSource;\n  }\n\n  static getInstance(): SqlDataSource {\n    if (!SqlDataSource.instance) {\n      throw new Error(\"sql database connection not established\");\n    }\n\n    return SqlDataSource.instance;\n  }\n\n  /**\n   * @description Starts a transaction on the database and returns the transaction object\n   * @param model\n   * @returns {Promise<Transaction>} trx\n   */\n  public async startTransaction(\n    driverSpecificOptions?: DriverSpecificOptions,\n  ): Promise<Transaction> {\n    const sqlDataSource = new SqlDataSource({\n      type: this.type as SqlDataSourceType,\n      host: this.host,\n      port: this.port,\n      username: this.username,\n      password: this.password,\n      database: this.database,\n      logs: this.logs,\n      ...driverSpecificOptions,\n    });\n\n    await sqlDataSource.connectDriver();\n    sqlDataSource.isConnected = true;\n    const mysqlTrx = new Transaction(sqlDataSource, this.logs);\n    await mysqlTrx.startTransaction();\n    return mysqlTrx;\n  }\n\n  /**\n   * @description Alias for startTransaction\n   * @returns {Promise<Transaction>} trx\n   */\n  public async beginTransaction(\n    driverSpecificOptions?: DriverSpecificOptions,\n  ): Promise<Transaction> {\n    return this.startTransaction(driverSpecificOptions);\n  }\n\n  /**\n   * @description Alias for startTransaction\n   * @returns {Promise<Transaction>} trx\n   */\n  public async transaction(\n    driverSpecificOptions?: DriverSpecificOptions,\n  ): Promise<Transaction> {\n    return this.startTransaction(driverSpecificOptions);\n  }\n\n  /**\n   * @description Returns model manager for the provided model\n   * @param model\n   */\n  public getModelManager<T extends Model>(\n    model: { new (): T } | typeof Model,\n  ): ModelManager<T> {\n    if (!this.isConnected) {\n      throw new Error(\"sql database connection not established\");\n    }\n\n    switch (this.type) {\n      case \"mysql\":\n      case \"mariadb\":\n        return new MysqlModelManager<T>(\n          model as typeof Model,\n          this.sqlConnection as mysql.Connection,\n          this.logs,\n          this,\n        );\n      case \"postgres\":\n        return new PostgresModelManager<T>(\n          model as typeof Model,\n          this.sqlConnection as pg.Client,\n          this.logs,\n          this,\n        );\n      case \"sqlite\":\n        return new SqliteModelManager<T>(\n          model as typeof Model,\n          this.sqlConnection as sqlite3.Database,\n          this.logs,\n          this,\n        );\n      default:\n        throw new Error(`Unsupported datasource type: ${this.type}`);\n    }\n  }\n\n  /**\n   * @description Executes a callback function with the provided connection details\n   * @description Static Model methods will always use the base connection created with SqlDataSource.connect() method\n   * @param connectionDetails\n   * @param cb\n   */\n  static async useConnection(\n    connectionDetails: SqlDataSourceInput,\n    cb: (sqlDataSource: SqlDataSource) => Promise<void>,\n  ) {\n    const customSqlInstance = new SqlDataSource(connectionDetails);\n    await customSqlInstance.connectDriver({\n      mysqlOptions: connectionDetails.mysqlOptions,\n      pgOptions: connectionDetails.pgOptions,\n    });\n    customSqlInstance.isConnected = true;\n    try {\n      await cb(customSqlInstance).then(async () => {\n        if (!customSqlInstance.isConnected) {\n          return;\n        }\n\n        await customSqlInstance.closeConnection();\n      });\n    } catch (error) {\n      if (customSqlInstance.isConnected) {\n        await customSqlInstance.closeConnection();\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * @description Returns the current connection\n   * @returns {Promise<SqlConnectionType>} sqlConnection\n   */\n  public getCurrentConnection(): SqlConnectionType {\n    return this.sqlConnection;\n  }\n\n  /**\n   * @description Returns separate raw sql connection\n   */\n  public async getRawConnection(\n    driverSpecificOptions?: DriverSpecificOptions,\n  ): Promise<SqlConnectionType> {\n    switch (this.type) {\n      case \"mysql\":\n      case \"mariadb\":\n        return await createConnection({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n          ...driverSpecificOptions?.mysqlOptions,\n        });\n      case \"postgres\":\n        const client = new pg.Client({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n          ...driverSpecificOptions?.pgOptions,\n        });\n        await client.connect();\n        return client;\n\n      case \"sqlite\":\n        return new sqlite3.Database(\n          this.database,\n          sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE,\n          (err) => {\n            if (err) {\n              throw new Error(`Error while connecting to sqlite: ${err}`);\n            }\n          },\n        );\n      default:\n        throw new Error(`Unsupported datasource type: ${this.type}`);\n    }\n  }\n\n  /**\n   * @description Closes the connection to the database\n   * @returns\n   */\n  public async closeConnection(): Promise<void> {\n    if (!this.isConnected) {\n      logger.warn(\"Connection already closed\", this);\n      return;\n    }\n\n    logger.warn(\"Closing connection\", this);\n    switch (this.type) {\n      case \"mysql\":\n      case \"mariadb\":\n        await (this.sqlConnection as mysql.Connection).end();\n        this.isConnected = false;\n        SqlDataSource.instance = null;\n        break;\n      case \"postgres\":\n        await (this.sqlConnection as pg.Client).end();\n        this.isConnected = false;\n        SqlDataSource.instance = null;\n        break;\n      case \"sqlite\":\n        await new Promise<void>((resolve, reject) => {\n          (this.sqlConnection as sqlite3.Database).close((err) => {\n            if (err) {\n              reject(err);\n            }\n            resolve();\n          });\n        });\n        this.isConnected = false;\n        SqlDataSource.instance = null;\n        break;\n      default:\n        throw new Error(`Unsupported datasource type: ${this.type}`);\n    }\n  }\n\n  /**\n   * @description Executes a raw query on the database\n   * @param query\n   * @param params\n   * @returns\n   */\n  async rawQuery(query: string, params: any[] = []): Promise<any> {\n    if (!this.isConnected) {\n      throw new Error(\"sql database connection not established\");\n    }\n\n    log(query, this.logs, params);\n    switch (this.type) {\n      case \"mysql\":\n      case \"mariadb\":\n        const [mysqlRows] = await (\n          this.sqlConnection as mysql.Connection\n        ).execute(query, params);\n\n        return mysqlRows;\n      case \"postgres\":\n        const { rows } = await (this.sqlConnection as pg.Client).query(\n          query,\n          params as any[],\n        );\n\n        return rows;\n      case \"sqlite\":\n        return new Promise((resolve, reject) => {\n          (this.sqlConnection as sqlite3.Database).all(\n            query,\n            params,\n            (err, rows) => {\n              if (err) {\n                reject(err);\n              }\n\n              resolve(rows);\n            },\n          );\n        });\n      default:\n        throw new Error(`Unsupported datasource type: ${this.type}`);\n    }\n  }\n\n  /**\n   * @description Executes a raw query on the database with the base connection created with SqlDataSource.connect() method\n   * @param query\n   * @param params\n   * @returns\n   */\n  static async rawQuery(query: string, params: any[] = []): Promise<any> {\n    const sqlDataSource = SqlDataSource.getInstance();\n    if (!sqlDataSource || !sqlDataSource.isConnected) {\n      throw new Error(\"sql database connection not established\");\n    }\n\n    log(query, SqlDataSource.getInstance()?.logs ?? false, params);\n    switch (sqlDataSource.type) {\n      case \"mysql\":\n      case \"mariadb\":\n        const [mysqlRows] = await (\n          sqlDataSource.sqlConnection as mysql.Connection\n        ).execute(query, params);\n\n        return mysqlRows;\n      case \"postgres\":\n        const { rows } = await (sqlDataSource.sqlConnection as pg.Client).query(\n          query,\n          params,\n        );\n\n        return rows;\n      case \"sqlite\":\n        return new Promise((resolve, reject) => {\n          (sqlDataSource.sqlConnection as sqlite3.Database).all(\n            query,\n            params,\n            (err, rows) => {\n              if (err) {\n                reject(err);\n              }\n\n              resolve(rows);\n            },\n          );\n        });\n      default:\n        throw new Error(`Unsupported datasource type: ${sqlDataSource.type}`);\n    }\n  }\n\n  private async connectDriver(\n    driverSpecificOptions?: DriverSpecificOptions,\n  ): Promise<void> {\n    switch (this.type) {\n      case \"mysql\":\n      case \"mariadb\":\n        this.sqlConnection = await mysql.createConnection({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n          ...driverSpecificOptions?.mysqlOptions,\n        });\n        break;\n      case \"postgres\":\n        this.sqlConnection = new pg.Client({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n          ...driverSpecificOptions?.pgOptions,\n        });\n        await (this.sqlConnection as pg.Client).connect();\n        break;\n      case \"sqlite\":\n        this.sqlConnection = new sqlite3.Database(\n          this.database,\n          sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE,\n          (err) => {\n            if (err) {\n              throw new Error(`Error while connecting to sqlite: ${err}`);\n            }\n          },\n        );\n        break;\n      default:\n        throw new Error(`Unsupported datasource type: ${this.type}`);\n    }\n  }\n}\n","import { ModelDeleteQueryBuilder } from \"../../query_builder/delete_query_builder\";\nimport { QueryBuilder } from \"../../query_builder/query_builder\";\nimport { ModelUpdateQueryBuilder } from \"../../query_builder/update_query_builder\";\nimport { SqlDataSource } from \"../../sql_data_source\";\nimport { Model, getBaseModelInstance } from \"../model\";\nimport {\n  FindType,\n  UnrestrictedFindType,\n  UnrestrictedFindOneType,\n  FindOneType,\n} from \"./model_manager_types\";\n\nexport abstract class ModelManager<T extends Model> {\n  protected logs: boolean;\n  protected sqlDataSource: SqlDataSource;\n  protected model: typeof Model;\n  protected modelInstance: T;\n  protected throwError: boolean;\n\n  /**\n   * @param model\n   * @param logs\n   * @param sqlDataSource Passed if a custom connection is provided\n   */\n  protected constructor(\n    model: typeof Model,\n    logs: boolean,\n    sqlDataSource: SqlDataSource,\n  ) {\n    this.logs = logs;\n    this.model = model;\n    this.throwError = false;\n    this.modelInstance = getBaseModelInstance<T>();\n    this.sqlDataSource = sqlDataSource;\n  }\n\n  /**\n   * @description Finds all records that match the input\n   * @param input\n   */\n  public abstract find(input?: FindType<T>): Promise<T[]>;\n  public abstract find(input?: UnrestrictedFindType<T>): Promise<T[]>;\n  public abstract find(\n    input?: FindType<T> | UnrestrictedFindType<T>,\n  ): Promise<T[]>;\n\n  /**\n   * @description Finds the first record that matches the input\n   * @param input\n   */\n  public abstract findOne(input: UnrestrictedFindOneType<T>): Promise<T | null>;\n  public abstract findOne(input: FindOneType<T>): Promise<T | null>;\n  public abstract findOne(\n    input: FindOneType<T> | UnrestrictedFindOneType<T>,\n  ): Promise<T | null>;\n\n  /**\n   * @description Finds a record by its primary key\n   * @param value\n   * @param throwErrorOnNull\n   */\n  public abstract findOneByPrimaryKey(\n    value: string | number | boolean,\n    throwErrorOnNull: boolean,\n  ): Promise<T | null>;\n\n  /**\n   * @description Creates a new record\n   * @param model\n   * @param trx\n   */\n  public abstract insert(model: Partial<T>): Promise<T | null>;\n\n  /**\n   * @description Creates multiple records\n   * @param model\n   * @param trx\n   */\n  public abstract insertMany(model: Partial<T>[]): Promise<T[]>;\n\n  /**\n   * @description Updates a record\n   * @param model\n   * @param trx\n   */\n  public abstract updateRecord(model: T): Promise<T | null>;\n\n  /**\n   * @description Deletes a record\n   * @param model\n   * @param trx\n   */\n  public abstract deleteRecord(model: T): Promise<T | null>;\n\n  /**\n   * @description Returns a query builder\n   */\n  public abstract query(): QueryBuilder<T>;\n\n  /**\n   * @description Returns an update query builder\n   */\n  public abstract update(): ModelUpdateQueryBuilder<T>;\n\n  /**\n   * @description Returns a delete query builder\n   */\n  public abstract deleteQuery(): ModelDeleteQueryBuilder<T>;\n}\n","import { SqlDataSourceType } from \"../../sql_data_source\";\n\nconst deleteTemplate = (table: string, dbType: SqlDataSourceType) => {\n  return {\n    delete: (column: string, value: string | number | boolean | Date) => {\n      let baseQuery = `DELETE FROM ${table} WHERE ${column} = PLACEHOLDER`;\n      switch (dbType) {\n        case \"mariadb\":\n        case \"sqlite\":\n        case \"mysql\":\n          baseQuery = baseQuery.replace(\"PLACEHOLDER\", \"?\");\n          break;\n        case \"postgres\":\n          baseQuery = baseQuery.replace(\"PLACEHOLDER\", \"$1\");\n          break;\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n\n      return { query: baseQuery, params: [value] };\n    },\n    massiveDelete: (whereClause: string, joinClause: string = \"\") => {\n      return `DELETE FROM ${table} ${joinClause} ${whereClause}`;\n    },\n  };\n};\n\nexport default deleteTemplate;\n","import { DateTime } from \"luxon\";\nimport { convertCase } from \"../../../utils/case_utils\";\nimport { SqlDataSourceType } from \"../../sql_data_source\";\nimport { isNestedObject } from \"../../../utils/json_utils\";\nimport { Model } from \"../../models/model\";\n\ntype BaseValues =\n  | string\n  | number\n  | boolean\n  | Date\n  | null\n  | object\n  | undefined\n  | DateTime;\n\nconst insertTemplate = (\n  dbType: SqlDataSourceType,\n  typeofModel: typeof Model,\n) => {\n  const table = typeofModel.table;\n  return {\n    insert: (columns: string[], values: BaseValues[]) => {\n      columns = columns.map((column) =>\n        convertCase(column, typeofModel.databaseCaseConvention),\n      );\n      let placeholders: string;\n      let params: BaseValues[];\n\n      switch (dbType) {\n        case \"mysql\":\n        case \"sqlite\":\n        case \"mariadb\":\n          placeholders = columns.map(() => \"?\").join(\", \");\n          params = values;\n          break;\n        case \"postgres\":\n          placeholders = columns\n            .map((_, index) => {\n              if (isNestedObject(values[index])) {\n                return `$${index + 1}::jsonb`;\n              }\n              return `$${index + 1}`;\n            })\n            .join(\", \");\n          params = values.map((value) =>\n            isNestedObject(value) ? JSON.stringify(value) : value,\n          );\n          break;\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n\n      const query =\n        dbType !== \"postgres\"\n          ? `INSERT INTO ${table} (${columns.join(\", \")})\nVALUES (${placeholders});`\n          : `INSERT INTO ${table} (${columns.join(\", \")})\nVALUES (${placeholders}) RETURNING *;`;\n\n      return { query, params };\n    },\n    insertMany: (columns: string[], values: BaseValues[][]) => {\n      columns = columns.map((column) =>\n        convertCase(column, typeofModel.databaseCaseConvention),\n      );\n      let valueSets: string[];\n      let params: BaseValues[] = [];\n\n      switch (dbType) {\n        case \"mysql\":\n        case \"sqlite\":\n        case \"mariadb\":\n          valueSets = values.map((valueSet) => {\n            params.push(...valueSet);\n            return `(${valueSet.map(() => \"?\").join(\", \")})`;\n          });\n          break;\n        case \"postgres\":\n          valueSets = values.map((valueSet, rowIndex) => {\n            params.push(\n              ...valueSet.map((value) =>\n                isNestedObject(value) ? JSON.stringify(value) : value,\n              ),\n            );\n            return `(${valueSet\n              .map((value, colIndex) => {\n                if (isNestedObject(value)) {\n                  return `$${rowIndex * columns.length + colIndex + 1}::jsonb`;\n                }\n                return `$${rowIndex * columns.length + colIndex + 1}`;\n              })\n              .join(\", \")})`;\n          });\n          break;\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n\n      const query =\n        dbType !== \"postgres\"\n          ? `INSERT INTO ${table} (${columns.join(\", \")})\nVALUES ${valueSets.join(\", \")};`\n          : `INSERT INTO ${table} (${columns.join(\", \")})\nVALUES ${valueSets.join(\", \")} RETURNING *;`;\n\n      return { query, params };\n    },\n  };\n};\n\nexport default insertTemplate;\n","import { convertCase } from \"../../../utils/case_utils\";\nimport logger from \"../../../utils/logger\";\nimport { Model } from \"../../models/model\";\nimport { Relation, RelationEnum } from \"../../models/relations/relation\";\n\nfunction parseValueType(value: any): string {\n  return typeof value;\n}\n\nfunction convertValueToSQL(value: any, type: string): string {\n  switch (type) {\n    case \"string\":\n      return `'${value}'`;\n    case \"number\":\n    case \"boolean\":\n      return `${value}`;\n    default:\n      throw new Error(`Unsupported value type: ${type}`);\n  }\n}\n\nfunction relationTemplates<T extends Model>(\n  models: T[],\n  relation: Relation,\n  relationName: string,\n  typeofModel: typeof Model,\n) {\n  const primaryKey = relation.model.primaryKey;\n  const foreignKey = relation.foreignKey as keyof T;\n  const relatedModel = relation.relatedModel;\n\n  const primaryKeyValues = models.map((model) => {\n    const value =\n      model[\n        convertCase(primaryKey, typeofModel.modelCaseConvention) as keyof T\n      ];\n    return { value, type: parseValueType(value) };\n  });\n\n  const foreignKeyValues = models.map((model) => {\n    const value =\n      model[\n        convertCase(foreignKey, typeofModel.modelCaseConvention) as keyof T\n      ];\n    return { value, type: parseValueType(value) };\n  });\n\n  const softDeleteColumn = relation.options?.softDeleteColumn;\n  const softDeleteQuery =\n    relation.options?.softDeleteType === \"date\"\n      ? ` AND ${relatedModel}.${convertCase(\n          softDeleteColumn,\n          typeofModel.databaseCaseConvention,\n        )} IS NULL`\n      : ` AND ${relatedModel}.${convertCase(\n          softDeleteColumn,\n          typeofModel.databaseCaseConvention,\n        )} = false`;\n\n  switch (relation.type) {\n    case RelationEnum.hasOne:\n      if (primaryKeyValues.some(({ value }) => !value)) {\n        logger.error(\n          `Invalid primaryKey values for ${typeofModel.name}, ${primaryKeyValues\n            .map(({ value }) => value)\n            .join(\", \")}`,\n        );\n        throw new Error(\n          `Invalid primaryKey values for ${typeofModel.name}, ${primaryKeyValues\n            .map(({ value }) => value)\n            .join(\", \")}`,\n        );\n      }\n\n      return `SELECT *, '${relationName}' as relation_name FROM ${relatedModel} WHERE ${relatedModel}.${convertCase(\n        foreignKey,\n        typeofModel.databaseCaseConvention,\n      )} IN (${primaryKeyValues\n        .map(({ value, type }) => convertValueToSQL(value, type))\n        .join(\", \")})${softDeleteColumn ? softDeleteQuery : \"\"};`;\n\n    case RelationEnum.belongsTo:\n      if (foreignKeyValues.some(({ value }) => !value)) {\n        logger.error(\n          `Invalid foreignKey values for ${relatedModel}, ${foreignKeyValues\n            .map(({ value }) => value)\n            .join(\", \")}`,\n        );\n        throw new Error(\n          `Invalid foreignKey values for ${relatedModel}, ${foreignKeyValues\n            .map(({ value }) => value)\n            .join(\", \")}`,\n        );\n      }\n\n      if (!primaryKey) {\n        throw new Error(\n          `Related Model ${relatedModel} does not have a primary key`,\n        );\n      }\n\n      return `SELECT *, '${relationName}' as relation_name FROM ${relatedModel} WHERE ${relatedModel}.${primaryKey} IN (${foreignKeyValues\n        .map(({ value, type }) => convertValueToSQL(value, type))\n        .join(\", \")}) ${softDeleteColumn ? softDeleteQuery : \"\"};`;\n\n    case RelationEnum.hasMany:\n      if (primaryKeyValues.some(({ value }) => !value)) {\n        logger.error(\n          `Invalid primaryKey values: ${primaryKeyValues.map(\n            ({ value }) => value,\n          )}`,\n        );\n        throw new Error(\"Invalid primaryKey values\");\n      }\n\n      return `SELECT *, '${relationName}' as relation_name FROM ${relatedModel} WHERE ${relatedModel}.${convertCase(\n        foreignKey,\n        typeofModel.databaseCaseConvention,\n      )} IN (${primaryKeyValues\n        .map(({ value, type }) => convertValueToSQL(value, type))\n        .join(\", \")}) ${softDeleteColumn ? softDeleteQuery : \"\"};`;\n\n    default:\n      throw new Error(`Unknown relation type: ${relation.type}`);\n  }\n}\n\nexport default relationTemplates;\n","import { convertCase } from \"../../../utils/case_utils\";\nimport { SqlDataSourceType } from \"../../sql_data_source\";\nimport { Model } from \"../../models/model\";\n\nconst updateTemplate = (\n  dbType: SqlDataSourceType,\n  typeofModel: typeof Model,\n) => {\n  const table = typeofModel.table;\n  return {\n    update: (\n      columns: string[],\n      values: any[],\n      primaryKey?: string,\n      primaryKeyValue?: string | undefined,\n    ) => {\n      if (columns.includes(\"extraColumns\")) {\n        const extraColumnsIndex = columns.indexOf(\"extraColumns\");\n        columns.splice(columns.indexOf(\"extraColumns\"), 1);\n        values.splice(extraColumnsIndex, 1);\n      }\n\n      columns = columns.map((column) =>\n        convertCase(column, typeofModel.databaseCaseConvention),\n      );\n      let setClause: string;\n      let params: (any | null)[];\n\n      switch (dbType) {\n        case \"mysql\":\n        case \"sqlite\":\n        case \"mariadb\":\n          setClause = columns.map((column) => `\\`${column}\\` = ?`).join(\", \");\n          params = [...values, primaryKeyValue];\n          break;\n        case \"postgres\":\n          setClause = columns\n            .map((column, index) => `\"${column}\" = $${index + 1}`)\n            .join(\", \");\n          params = [...values, primaryKeyValue];\n          break;\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n\n      const primaryKeyPlaceholder =\n        dbType === \"postgres\" ? `$${columns.length + 1}` : \"?\";\n      const query = `UPDATE ${table} \nSET ${setClause} \nWHERE ${primaryKey} = ${primaryKeyPlaceholder};`;\n\n      return { query, params };\n    },\n    massiveUpdate: (\n      columns: string[],\n      values: any[],\n      whereClause: string,\n      joinClause: string = \"\",\n    ) => {\n      columns = columns.map((column) =>\n        convertCase(column, typeofModel.databaseCaseConvention),\n      );\n\n      let setClause: string;\n      const params: any[] = [];\n\n      switch (dbType) {\n        case \"mysql\":\n        case \"sqlite\":\n        case \"mariadb\":\n          setClause = columns.map((column) => `\\`${column}\\` = ?`).join(\", \");\n          values.forEach((value) => {\n            params.push(value ?? null);\n          });\n          break;\n        case \"postgres\":\n          setClause = columns\n            .map((column, index) => `\"${column}\" = $${index + 1}`)\n            .join(\", \");\n          values.forEach((value) => {\n            params.push(value ?? null);\n          });\n          break;\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n\n      const query = `UPDATE ${table} ${joinClause}\nSET ${setClause} ${whereClause}`;\n\n      return { query, params };\n    },\n  };\n};\n\nexport default updateTemplate;\n","import mysql from \"mysql2/promise\";\nimport pg from \"pg\";\nimport sqlite3 from \"sqlite3\";\nimport { log, queryError } from \"../../../utils/logger\";\nimport deleteTemplate from \"../../resources/query/DELETE\";\nimport insertTemplate from \"../../resources/query/INSERT\";\nimport relationTemplates from \"../../resources/query/RELATION\";\nimport updateTemplate from \"../../resources/query/UPDATE\";\nimport { SqlDataSourceType, SqlConnectionType } from \"../../sql_data_source\";\nimport { Model } from \"../model\";\nimport { getRelations } from \"../model_decorators\";\nimport { Relation } from \"../relations/relation\";\n\nexport default class SqlModelManagerUtils<T extends Model> {\n  private dbType: SqlDataSourceType;\n  private sqlConnection: SqlConnectionType;\n\n  constructor(dbType: SqlDataSourceType, sqlConnection: SqlConnectionType) {\n    this.dbType = dbType;\n    this.sqlConnection = sqlConnection;\n  }\n\n  public parseInsert(\n    model: T,\n    typeofModel: typeof Model,\n    dbType: SqlDataSourceType,\n  ): { query: string; params: any[] } {\n    const filteredModel = this.filterRelationsAndMetadata(model);\n    const keys = Object.keys(filteredModel);\n    const values = Object.values(filteredModel);\n    const insert = insertTemplate(dbType, typeofModel);\n\n    return insert.insert(keys, values);\n  }\n\n  public parseMassiveInsert(\n    models: T[],\n    typeofModel: typeof Model,\n    dbType: SqlDataSourceType,\n  ): { query: string; params: any[] } {\n    const filteredModels = models.map((m) =>\n      this.filterRelationsAndMetadata(m),\n    );\n    const insert = insertTemplate(dbType, typeofModel);\n    const keys = Object.keys(filteredModels[0]);\n    const values = filteredModels.map((model) => Object.values(model));\n\n    return insert.insertMany(keys, values);\n  }\n\n  public parseUpdate(\n    model: T,\n    typeofModel: typeof Model,\n    dbType: SqlDataSourceType,\n  ): { query: string; params: any[] } {\n    const update = updateTemplate(dbType, typeofModel);\n    const filteredModel = this.filterRelationsAndMetadata(model);\n    const keys = Object.keys(filteredModel);\n    const values = Object.values(filteredModel);\n\n    const primaryKeyValue = filteredModel[typeofModel.primaryKey as keyof T];\n\n    return update.update(\n      keys,\n      values,\n      typeofModel.primaryKey,\n      primaryKeyValue as string,\n    );\n  }\n\n  private filterRelationsAndMetadata(model: T): T {\n    const filteredModel = {};\n\n    const keys = Object.keys(model);\n    const isRelation = (value: any) => value instanceof Relation;\n    for (const key of keys) {\n      if (isRelation(model[key as keyof T])) {\n        continue;\n      }\n\n      Object.assign(filteredModel, { [key]: model[key as keyof T] });\n    }\n\n    return filteredModel as T;\n  }\n\n  public parseDelete(\n    table: string,\n    column: string,\n    value: string | number | boolean,\n  ): { query: string; params: any[] } {\n    return deleteTemplate(table, this.dbType).delete(column, value);\n  }\n\n  private getRelationFromModel(\n    relationField: string,\n    typeofModel: typeof Model,\n  ): Relation {\n    const relations = getRelations(typeofModel);\n    const relation = relations.find((r) => r.columnName === relationField);\n    if (!relation) {\n      throw new Error(\n        `Relation ${relationField} not found in model ${typeofModel}`,\n      );\n    }\n\n    return relation;\n  }\n\n  // Parses and fills input relations directly into the model\n  public async parseQueryBuilderRelations(\n    models: T[],\n    typeofModel: typeof Model,\n    input: string[],\n    logs: boolean,\n  ): Promise<{ [relationName: string]: Model[] }[]> {\n    if (!input.length) {\n      return [];\n    }\n\n    if (!typeofModel.primaryKey) {\n      throw new Error(`Model ${typeofModel} does not have a primary key`);\n    }\n\n    let relationQuery: string = \"\";\n    const relationQueries: string[] = [];\n    const relationMap: { [key: string]: string } = {};\n\n    try {\n      input.forEach((inputRelation: string) => {\n        const relation = this.getRelationFromModel(inputRelation, typeofModel);\n        const query = relationTemplates(\n          models,\n          relation,\n          inputRelation,\n          typeofModel,\n        );\n        relationQueries.push(query);\n        relationMap[inputRelation] = query;\n      });\n\n      relationQuery = relationQueries.join(\" UNION ALL \");\n      log(relationQuery, logs);\n\n      let result = await this.getQueryResult(relationQuery);\n      result = Array.isArray(result) ? result : [result];\n      const resultMap: { [key: string]: any[] } = {};\n      result.forEach((row: any) => {\n        const relationName = row.relation_name;\n        delete row.relation_name;\n        if (!resultMap[relationName]) {\n          resultMap[relationName] = [];\n        }\n\n        resultMap[relationName].push(row);\n      });\n\n      // Ensure all input relations are included in the result\n      const resultArray: { [relationName: string]: any[] }[] = input.map(\n        (inputRelation) => {\n          const modelsForRelation = resultMap[inputRelation] || [];\n          return {\n            [inputRelation]: modelsForRelation,\n          };\n        },\n      );\n\n      return resultArray;\n    } catch (error) {\n      queryError(\"query Error: \" + relationQuery + error);\n      throw new Error(\"Failed to parse relations \" + error);\n    }\n  }\n\n  private async getQueryResult(\n    query: string,\n    params: any[] = [],\n  ): Promise<any> {\n    switch (this.dbType) {\n      case \"mysql\":\n      case \"mariadb\":\n        const resultMysql = await (\n          this.sqlConnection as mysql.Connection\n        ).query(query, params);\n        return resultMysql[0];\n      case \"postgres\":\n        const resultPg = await (this.sqlConnection as pg.Client).query(\n          query,\n          params,\n        );\n        return resultPg.rows;\n      case \"sqlite\":\n        return await new Promise((resolve, reject) => {\n          (this.sqlConnection as sqlite3.Database).all(\n            query,\n            params,\n            (err, result) => {\n              if (err) {\n                reject(err);\n              }\n\n              resolve(result);\n            },\n          );\n        });\n      default:\n        throw new Error(`Unsupported data source type: ${this.dbType}`);\n    }\n  }\n}\n","import { convertCase } from \"../../../utils/case_utils\";\nimport { Model } from \"../../models/model\";\n\nconst joinTemplate = (\n  typeofModel: typeof Model,\n  relatedTable: string,\n  primaryColumn: string,\n  foreignColumn: string,\n) => {\n  const table = typeofModel.table;\n  const foreignColumnName = foreignColumn.includes(\".\")\n    ? foreignColumn.split(\".\").pop()\n    : foreignColumn;\n  const primaryColumnName = primaryColumn.includes(\".\")\n    ? primaryColumn.split(\".\").pop()\n    : primaryColumn;\n\n  return {\n    innerJoin: () => {\n      const foreignColumnConverted = convertCase(\n        foreignColumnName,\n        typeofModel.databaseCaseConvention,\n      );\n      const primaryColumnConverted = convertCase(\n        primaryColumnName,\n        typeofModel.databaseCaseConvention,\n      );\n\n      return `\\nINNER JOIN ${relatedTable} ON ${relatedTable}.${foreignColumnConverted} = ${table}.${primaryColumnConverted} `;\n    },\n    leftJoin: () => {\n      const foreignColumnConverted = convertCase(\n        foreignColumnName,\n        typeofModel.databaseCaseConvention,\n      );\n      const primaryColumnConverted = convertCase(\n        primaryColumnName,\n        typeofModel.databaseCaseConvention,\n      );\n\n      return `\\nLEFT JOIN ${relatedTable} ON ${relatedTable}.${foreignColumnConverted} = ${table}.${primaryColumnConverted} `;\n    },\n  };\n};\n\nexport default joinTemplate;\n","import { Model } from \"../models/model\";\nimport { Connection } from \"mysql2/promise\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport deleteTemplate from \"../resources/query/DELETE\";\nimport { SqlDataSource } from \"../../../src/sql/sql_data_source\";\nimport { DateTime } from \"luxon\";\nimport updateTemplate from \"../resources/query/UPDATE\";\nimport {\n  DeleteOptions,\n  ModelDeleteQueryBuilder,\n  SoftDeleteOptions,\n} from \"../query_builder/delete_query_builder\";\nimport { log, queryError } from \"../../utils/logger\";\n\nexport class MysqlDeleteQueryBuilder<\n  T extends Model,\n> extends ModelDeleteQueryBuilder<T> {\n  protected sqlConnection: Connection;\n  protected joinQuery;\n  protected updateTemplate: ReturnType<typeof updateTemplate>;\n  protected deleteTemplate: ReturnType<typeof deleteTemplate>;\n  protected isNestedCondition = false;\n\n  /**\n   * @description Constructs a Mysql_query_builder instance.\n   * @param model - The model class associated with the table.\n   * @param table - The name of the table.\n   * @param mysqlConnection - The MySQL connection pool.\n   * @param logs - A boolean indicating whether to log queries.\n   * @param isNestedCondition - A boolean indicating whether the query is nested in another query.\n   */\n  public constructor(\n    model: typeof Model,\n    table: string,\n    mysql: Connection,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, table, logs, false, sqlDataSource);\n    this.sqlConnection = mysql;\n    this.updateTemplate = updateTemplate(sqlDataSource.getDbType(), this.model);\n    this.deleteTemplate = deleteTemplate(table, sqlDataSource.getDbType());\n    this.joinQuery = \"\";\n    this.isNestedCondition = isNestedCondition;\n  }\n\n  public async softDelete(options?: SoftDeleteOptions<T>): Promise<number> {\n    const {\n      column = \"deletedAt\",\n      value = DateTime.local().toISO(),\n      ignoreBeforeDeleteHook = false,\n    } = options || {};\n    if (!ignoreBeforeDeleteHook) {\n      this.model.beforeDelete(this);\n    }\n\n    let { query, params } = this.updateTemplate.massiveUpdate(\n      [column as string],\n      [value],\n      this.whereQuery,\n      this.joinQuery,\n    );\n\n    params = [...params, ...this.params];\n\n    log(query, this.logs, params);\n    try {\n      const rows: any = await this.sqlConnection.query(query, params);\n      if (!rows[0].affectedRows) {\n        return 0;\n      }\n\n      return rows[0].affectedRows;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  public async delete(options: DeleteOptions = {}): Promise<number> {\n    const { ignoreBeforeDeleteHook } = options || {};\n    if (!ignoreBeforeDeleteHook) {\n      this.model.beforeDelete(this);\n    }\n\n    this.whereQuery = this.whereTemplate.convertPlaceHolderToValue(\n      this.whereQuery,\n    );\n\n    const query = this.deleteTemplate.massiveDelete(\n      this.whereQuery,\n      this.joinQuery,\n    );\n\n    log(query, this.logs, this.params);\n    try {\n      const rows: any = await this.sqlConnection.query(query, this.params);\n\n      if (!rows[0].affectedRows) {\n        return 0;\n      }\n\n      return rows[0].affectedRows;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): MysqlDeleteQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): MysqlDeleteQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   * @description Build more complex where conditions.\n   * @param cb\n   */\n  public whereBuilder(\n    cb: (queryBuilder: MysqlDeleteQueryBuilder<T>) => void,\n  ): this {\n    const queryBuilder = new MysqlDeleteQueryBuilder(\n      this.model as typeof Model,\n      this.model.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(queryBuilder as unknown as MysqlDeleteQueryBuilder<T>);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  /**\n   * @description Build complex OR-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public orWhereBuilder(\n    cb: (queryBuilder: MysqlDeleteQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new MysqlDeleteQueryBuilder(\n      this.model as typeof Model,\n      this.model.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as MysqlDeleteQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  /**\n   * @description Build complex AND-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public andWhereBuilder(\n    cb: (queryBuilder: MysqlDeleteQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new MysqlDeleteQueryBuilder(\n      this.model as typeof Model,\n      this.model.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as MysqlDeleteQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n}\n","import { convertCase } from \"../../../utils/case_utils\";\nimport { SqlDataSourceType } from \"../../sql_data_source\";\nimport { Model } from \"../../models/model\";\n\nexport type WhereOperatorType =\n  | \"=\"\n  | \"!=\"\n  | \"<>\"\n  | \">\"\n  | \"<\"\n  | \">=\"\n  | \"<=\"\n  | \"LIKE\"\n  | \"ILIKE\"\n  | \"NOT LIKE\"\n  | \"NOT ILIKE\"\n  | \"IN\"\n  | \"NOT IN\"\n  | \"BETWEEN\"\n  | \"NOT BETWEEN\";\n\nexport type BaseValues = string | number | boolean | object;\n\nconst whereTemplate = (\n  dbType: SqlDataSourceType,\n  typeofModel: typeof Model,\n) => {\n  return {\n    convertPlaceHolderToValue: (query: string, startIndex: number = 1) => {\n      switch (dbType) {\n        case \"mysql\":\n        case \"sqlite\":\n        case \"mariadb\":\n          return query.replace(/PLACEHOLDER/g, () => \"?\");\n        case \"postgres\":\n          let index = startIndex;\n          return query.replace(/PLACEHOLDER/g, () => `$${index++}`);\n        default:\n          throw new Error(\"Unsupported database type\");\n      }\n    },\n    where: (\n      column: string,\n      value: BaseValues,\n      operator: WhereOperatorType = \"=\",\n    ) => {\n      let query = `\\nWHERE ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} ${operator} PLACEHOLDER`;\n      let params = [value];\n\n      if (typeof value === \"object\" && value !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = `\\nWHERE JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) ${operator} ?`;\n            params = [value];\n            break;\n          case \"postgres\":\n            query = `\\nWHERE ${column}::jsonb ${operator} PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    andWhere: (\n      column: string,\n      value: BaseValues,\n      operator: WhereOperatorType = \"=\",\n    ) => {\n      let query = ` AND ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} ${operator} PLACEHOLDER`;\n      let params = [value];\n\n      if (typeof value === \"object\" && value !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` AND JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) ${operator} PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = ` AND ${column}::jsonb ${operator} PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    orWhere: (\n      column: string,\n      value: BaseValues,\n      operator: WhereOperatorType = \"=\",\n    ) => {\n      let query = ` OR ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} ${operator} PLACEHOLDER`;\n      let params = [value];\n\n      if (typeof value === \"object\" && value !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` OR JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) ${operator} PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = ` OR ${column}::jsonb ${operator} PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    whereNot: (column: string, value: BaseValues) => {\n      let query = `\\nWHERE ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} != PLACEHOLDER`;\n      let params = [value];\n\n      if (typeof value === \"object\" && value !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = `\\nWHERE JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) != PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = `\\nWHERE ${column}::jsonb != PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    andWhereNot: (column: string, value: BaseValues) => {\n      let query = ` AND ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} != PLACEHOLDER`;\n      let params = [value];\n\n      if (typeof value === \"object\" && value !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` AND JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) != PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = ` AND ${column}::jsonb != PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    orWhereNot: (column: string, value: BaseValues) => {\n      let query = ` OR ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} != PLACEHOLDER`;\n      let params = [value];\n\n      if (typeof value === \"object\" && value !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` OR JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) != PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = ` OR ${column}::jsonb != PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    whereBetween: (column: string, min: BaseValues, max: BaseValues) => {\n      let query = `\\nWHERE ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n      let params = [min, max];\n\n      if (typeof min === \"object\" && min !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = `\\nWHERE JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = `\\nWHERE ${column}::jsonb BETWEEN PLACEHOLDER::jsonb AND PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    andWhereBetween: (column: string, min: BaseValues, max: BaseValues) => {\n      let query = ` AND ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n      let params = [min, max];\n\n      if (typeof min === \"object\" && min !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` AND JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = ` AND ${column}::jsonb BETWEEN PLACEHOLDER::jsonb AND PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    orWhereBetween: (column: string, min: BaseValues, max: BaseValues) => {\n      let query = ` OR ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n      let params = [min, max];\n\n      if (typeof min === \"object\" && min !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` OR JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = ` OR ${column}::jsonb BETWEEN PLACEHOLDER::jsonb AND PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    whereNotBetween: (column: string, min: BaseValues, max: BaseValues) => {\n      let query = `\\nWHERE ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} NOT BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n      let params = [min, max];\n\n      if (typeof min === \"object\" && min !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = `\\nWHERE JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) NOT BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = `\\nWHERE ${column}::jsonb NOT BETWEEN PLACEHOLDER::jsonb AND PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    andWhereNotBetween: (column: string, min: BaseValues, max: BaseValues) => {\n      let query = ` AND ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} NOT BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n      let params = [min, max];\n\n      if (typeof min === \"object\" && min !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` AND JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) NOT BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = ` AND ${column}::jsonb NOT BETWEEN PLACEHOLDER::jsonb AND PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    orWhereNotBetween: (column: string, min: BaseValues, max: BaseValues) => {\n      let query = ` OR ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} NOT BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n      let params = [min, max];\n\n      if (typeof min === \"object\" && min !== null) {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` OR JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) NOT BETWEEN PLACEHOLDER AND PLACEHOLDER`;\n            break;\n          case \"postgres\":\n            query = ` OR ${column}::jsonb NOT BETWEEN PLACEHOLDER::jsonb AND PLACEHOLDER::jsonb`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    whereIn: (column: string, values: BaseValues[]) => {\n      let query = `\\nWHERE ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n      let params = values;\n\n      if (values[0] && typeof values[0] === \"object\") {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = `\\nWHERE JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) IN (${values\n              .map((_) => \"PLACEHOLDER\")\n              .join(\", \")})`;\n            break;\n          case \"postgres\":\n            query = `\\nWHERE ${convertCase(\n              column,\n              typeofModel.databaseCaseConvention,\n            )}::jsonb IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    andWhereIn: (column: string, values: BaseValues[]) => {\n      let query = ` AND ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n      let params = values;\n\n      if (values[0] && typeof values[0] === \"object\") {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` AND JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) IN (${values\n              .map((_) => \"PLACEHOLDER\")\n              .join(\", \")})`;\n            break;\n          case \"postgres\":\n            query = ` AND ${convertCase(\n              column,\n              typeofModel.databaseCaseConvention,\n            )}::jsonb IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    orWhereIn: (column: string, values: BaseValues[]) => {\n      let query = ` OR ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n      let params = values;\n\n      if (values[0] && typeof values[0] === \"object\") {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` OR JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) IN (${values\n              .map((_) => \"PLACEHOLDER\")\n              .join(\", \")})`;\n            break;\n          case \"postgres\":\n            query = ` OR ${convertCase(\n              column,\n              typeofModel.databaseCaseConvention,\n            )}::jsonb IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    whereNotIn: (column: string, values: BaseValues[]) => {\n      let query = `\\nWHERE ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} NOT IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n      let params = values;\n\n      if (values[0] && typeof values[0] === \"object\") {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = `\\nWHERE JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) NOT IN (${values\n              .map((_) => \"PLACEHOLDER\")\n              .join(\", \")})`;\n            break;\n          case \"postgres\":\n            query = `\\nWHERE ${convertCase(\n              column,\n              typeofModel.databaseCaseConvention,\n            )}::jsonb NOT IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    andWhereNotIn: (column: string, values: BaseValues[]) => {\n      let query = ` AND ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} NOT IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n      let params = values;\n\n      if (values[0] && typeof values[0] === \"object\") {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` AND JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) NOT IN (${values\n              .map((_) => \"PLACEHOLDER\")\n              .join(\", \")})`;\n            break;\n          case \"postgres\":\n            query = ` AND ${convertCase(\n              column,\n              typeofModel.databaseCaseConvention,\n            )}::jsonb NOT IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    orWhereNotIn: (column: string, values: BaseValues[]) => {\n      let query = ` OR ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} NOT IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n      let params = values;\n\n      if (values[0] && typeof values[0] === \"object\") {\n        switch (dbType) {\n          case \"mariadb\":\n          case \"mysql\":\n          case \"sqlite\":\n            query = ` OR JSON_UNQUOTE(JSON_EXTRACT(${column}, '$')) NOT IN (${values\n              .map((_) => \"PLACEHOLDER\")\n              .join(\", \")})`;\n            break;\n          case \"postgres\":\n            query = ` OR ${convertCase(\n              column,\n              typeofModel.databaseCaseConvention,\n            )}::jsonb NOT IN (${values.map((_) => \"PLACEHOLDER\").join(\", \")})`;\n            break;\n          default:\n            throw new Error(`Unsupported database type: ${dbType}`);\n        }\n      }\n\n      return {\n        query,\n        params,\n      };\n    },\n    whereNull: (column: string) => ({\n      query: `\\nWHERE ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} IS NULL`,\n      params: [],\n    }),\n    andWhereNull: (column: string) => ({\n      query: ` AND ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} IS NULL`,\n      params: [],\n    }),\n    orWhereNull: (column: string) => ({\n      query: ` OR ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} IS NULL`,\n      params: [],\n    }),\n    whereNotNull: (column: string) => ({\n      query: `\\nWHERE ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} IS NOT NULL`,\n      params: [],\n    }),\n    andWhereNotNull: (column: string) => ({\n      query: ` AND ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} IS NOT NULL`,\n      params: [],\n    }),\n    orWhereNotNull: (column: string) => ({\n      query: ` OR ${convertCase(\n        column,\n        typeofModel.databaseCaseConvention,\n      )} IS NOT NULL`,\n      params: [],\n    }),\n    rawWhere: (query: string, params: any[]) => ({\n      query: `\\nWHERE ${query}`,\n      params,\n    }),\n    rawAndWhere: (query: string, params: any[]) => ({\n      query: ` AND ${query}`,\n      params,\n    }),\n    rawOrWhere: (query: string, params: any[]) => ({\n      query: ` OR ${query}`,\n      params,\n    }),\n  };\n};\n\nexport default whereTemplate;\n","import { Model } from \"../models/model\";\nimport { SelectableType } from \"../models/model_manager/model_manager_types\";\nimport whereTemplate, {\n  BaseValues,\n  WhereOperatorType,\n} from \"../resources/query/WHERE\";\nimport { SqlDataSource } from \"../sql_data_source\";\n\nexport class WhereQueryBuilder<T extends Model> {\n  protected sqlDataSource: SqlDataSource;\n  protected whereQuery: string = \"\";\n  protected params: BaseValues[] = [];\n  protected model: typeof Model;\n  protected table: string;\n  protected logs: boolean;\n\n  protected whereTemplate: ReturnType<typeof whereTemplate>;\n  protected isNestedCondition = false;\n\n  /**\n   * @description Constructs a query_builder instance.\n   * @param model - The model class associated with the table.\n   * @param table - The name of the table.\n   * @param logs - A boolean indicating whether to log queries.\n   * @param isNestedCondition - A boolean indicating whether the query is nested in another query.\n   */\n  public constructor(\n    model: typeof Model,\n    table: string,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n  ) {\n    this.model = model;\n    this.sqlDataSource = sqlDataSource;\n    this.logs = logs;\n    this.table = table;\n    this.whereTemplate = whereTemplate(\n      this.sqlDataSource.getDbType(),\n      this.model,\n    );\n    this.params = [];\n    this.isNestedCondition = isNestedCondition;\n  }\n\n  /**\n   * @description Accepts a value and executes a callback only of the value is not null or undefined.\n   * @param {any} value\n   * @param callback\n   */\n  public when(\n    value: any,\n    cb: (value: any, query: WhereQueryBuilder<T>) => void,\n  ): this {\n    if (value === undefined || value === null) {\n      return this;\n    }\n\n    cb(value, this);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The query_builder instance for chaining.\n   */\n  public where(\n    column: SelectableType<T>,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): this;\n  public where(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): this;\n  public where(column: SelectableType<T> | string, value: BaseValues): this;\n  public where(\n    column: SelectableType<T> | string,\n    operatorOrValue: WhereOperatorType | BaseValues,\n    value?: BaseValues,\n  ): this {\n    let operator: WhereOperatorType = \"=\";\n    let actualValue: BaseValues;\n\n    if (typeof operatorOrValue === \"string\" && value) {\n      operator = operatorOrValue as WhereOperatorType;\n      actualValue = value;\n    } else {\n      actualValue = operatorOrValue as BaseValues;\n      operator = \"=\";\n    }\n\n    if (this.whereQuery || this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.andWhere(\n        column as string,\n        actualValue,\n        operator,\n      );\n      this.whereQuery += query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.where(\n      column as string,\n      actualValue,\n      operator,\n    );\n    this.whereQuery = query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhere(\n    column: SelectableType<T>,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): this;\n  public andWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): this;\n  public andWhere(column: SelectableType<T> | string, value: BaseValues): this;\n  public andWhere(\n    column: SelectableType<T> | string,\n    operatorOrValue: WhereOperatorType | BaseValues,\n    value?: BaseValues,\n  ): this {\n    let operator: WhereOperatorType = \"=\";\n    let actualValue: BaseValues;\n\n    if (typeof operatorOrValue === \"string\" && value) {\n      operator = operatorOrValue as WhereOperatorType;\n      actualValue = value;\n    } else {\n      actualValue = operatorOrValue as BaseValues;\n      operator = \"=\";\n    }\n\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.where(\n        column as string,\n        actualValue,\n        operator,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhere(\n      column as string,\n      actualValue,\n      operator,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhere(\n    column: SelectableType<T>,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): this;\n  public orWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): this;\n  public orWhere(column: SelectableType<T> | string, value: BaseValues): this;\n  public orWhere(\n    column: SelectableType<T> | string,\n    operatorOrValue: WhereOperatorType | BaseValues,\n    value?: BaseValues,\n  ): this {\n    let operator: WhereOperatorType = \"=\";\n    let actualValue: BaseValues;\n\n    if (typeof operatorOrValue === \"string\" && value) {\n      operator = operatorOrValue as WhereOperatorType;\n      actualValue = value;\n    } else {\n      actualValue = operatorOrValue as BaseValues;\n      operator = \"=\";\n    }\n\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.where(\n        column as string,\n        actualValue,\n        operator,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhere(\n      column as string,\n      actualValue,\n      operator,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereBetween(\n    column: SelectableType<T>,\n    min: BaseValues,\n    max: BaseValues,\n  ): this;\n  public whereBetween(column: string, min: BaseValues, max: BaseValues): this;\n  public whereBetween(\n    column: SelectableType<T> | string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhereBetween(\n    column: SelectableType<T>,\n    min: BaseValues,\n    max: BaseValues,\n  ): this;\n  public andWhereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this;\n  public andWhereBetween(\n    column: SelectableType<T> | string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereBetween(\n    column: SelectableType<T>,\n    min: BaseValues,\n    max: BaseValues,\n  ): this;\n  public orWhereBetween(column: string, min: BaseValues, max: BaseValues): this;\n  public orWhereBetween(\n    column: SelectableType<T> | string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereNotBetween(\n    column: SelectableType<T>,\n    min: BaseValues,\n    max: BaseValues,\n  ): this;\n  public whereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this;\n  public whereNotBetween(\n    column: SelectableType<T> | string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNotBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereNotBetween(\n    column: SelectableType<T>,\n    min: BaseValues,\n    max: BaseValues,\n  ): this;\n  public orWhereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this;\n  public orWhereNotBetween(\n    column: SelectableType<T> | string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereNotBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereIn(column: SelectableType<T>, values: BaseValues[]): this;\n  public whereIn(column: string, values: BaseValues[]): this;\n  public whereIn(\n    column: SelectableType<T> | string,\n    values: BaseValues[],\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhereIn(column: SelectableType<T>, values: BaseValues[]): this;\n  public andWhereIn(column: string, values: BaseValues[]): this;\n  public andWhereIn(\n    column: SelectableType<T> | string,\n    values: BaseValues[],\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereIn(column: SelectableType<T>, values: BaseValues[]): this;\n  public orWhereIn(column: string, values: BaseValues[]): this;\n  public orWhereIn(\n    column: SelectableType<T> | string,\n    values: BaseValues[],\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereNotIn(column: SelectableType<T>, values: BaseValues[]): this;\n  public whereNotIn(column: string, values: BaseValues[]): this;\n  public whereNotIn(\n    column: SelectableType<T> | string,\n    values: BaseValues[],\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNotIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereNotIn(column: SelectableType<T>, values: BaseValues[]): this;\n  public orWhereNotIn(column: string, values: BaseValues[]): this;\n  public orWhereNotIn(\n    column: SelectableType<T> | string,\n    values: BaseValues[],\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereNotIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereNull(column: SelectableType<T>): this;\n  public whereNull(column: string): this;\n  public whereNull(column: SelectableType<T> | string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNull(column as string);\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNull(column as string);\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhereNull(column: SelectableType<T>): this;\n  public andWhereNull(column: string): this;\n  public andWhereNull(column: SelectableType<T> | string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNull(column as string);\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNull(column as string);\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereNull(column: SelectableType<T>): this;\n  public orWhereNull(column: string): this;\n  public orWhereNull(column: SelectableType<T> | string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNull(column as string);\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereNull(column as string);\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereNotNull(column: SelectableType<T>): this;\n  public whereNotNull(column: string): this;\n  public whereNotNull(column: SelectableType<T> | string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotNull(\n        column as string,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNotNull(\n      column as string,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhereNotNull(column: SelectableType<T>): this;\n  public andWhereNotNull(column: string): this;\n  public andWhereNotNull(column: SelectableType<T> | string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotNull(\n        column as string,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNotNull(\n      column as string,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereNotNull(column: SelectableType<T>): this;\n  public orWhereNotNull(column: string): this;\n  public orWhereNotNull(column: SelectableType<T> | string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotNull(\n        column as string,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereNotNull(\n      column as string,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The query_builder instance for chaining.\n   */\n  public rawWhere(query: string, queryParams: any[] = []) {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query: rawQuery, params } = this.whereTemplate.rawWhere(\n        query,\n        queryParams,\n      );\n      this.whereQuery = rawQuery;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query: rawQuery, params } = this.whereTemplate.rawAndWhere(\n      query,\n      queryParams,\n    );\n    this.whereQuery += rawQuery;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw AND WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The query_builder instance for chaining.\n   */\n  public rawAndWhere(query: string, queryParams: any[] = []) {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query: rawQuery, params } = this.whereTemplate.rawWhere(\n        query,\n        queryParams,\n      );\n      this.whereQuery = rawQuery;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query: rawQuery, params } = this.whereTemplate.rawAndWhere(\n      query,\n      queryParams,\n    );\n    this.whereQuery += rawQuery;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw OR WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The query_builder instance for chaining.\n   */\n  public rawOrWhere(query: string, queryParams: any[] = []) {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query: rawQuery, params } = this.whereTemplate.rawWhere(\n        query,\n        queryParams,\n      );\n      this.whereQuery = rawQuery;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query: rawQuery, params } = this.whereTemplate.rawOrWhere(\n      query,\n      queryParams,\n    );\n    this.whereQuery += rawQuery;\n    this.params.push(...params);\n    return this;\n  }\n}\n","import { Model } from \"../models/model\";\nimport { SelectableType } from \"../models/model_manager/model_manager_types\";\nimport deleteTemplate from \"../resources/query/DELETE\";\nimport updateTemplate from \"../resources/query/UPDATE\";\nimport { SqlConnectionType } from \"../sql_data_source\";\nimport { WhereQueryBuilder } from \"./where_query_builder\";\n\nexport type DeleteOptions = {\n  ignoreBeforeDeleteHook?: boolean;\n};\n\nexport type SoftDeleteOptions<T> = {\n  column?: SelectableType<T>;\n  value?: string | number | boolean;\n  ignoreBeforeDeleteHook?: boolean;\n};\n\nexport abstract class ModelDeleteQueryBuilder<\n  T extends Model,\n> extends WhereQueryBuilder<T> {\n  protected abstract sqlConnection: SqlConnectionType;\n  protected abstract joinQuery: string;\n  protected abstract updateTemplate: ReturnType<typeof updateTemplate>;\n  protected abstract deleteTemplate: ReturnType<typeof deleteTemplate>;\n  protected abstract isNestedCondition: boolean;\n\n  /**\n   * @description soft Deletes Records from the database.\n   * @param options - The options for the soft delete, including the column to soft delete, the value to set the column to, and the transaction to run the query in.\n   * @default column - 'deletedAt'\n   * @default value - The current date and time.\n   * @default ignoreBeforeDeleteHook - false\n   * @default trx - undefined\n   * @returns The number of affected rows.\n   */\n  public abstract softDelete(options?: SoftDeleteOptions<T>): Promise<number>;\n\n  /**\n   * @description Deletes Records from the database for the current query.\n   * @param trx - The transaction to run the query in.\n   * @returns The number of affected rows.\n   */\n  public abstract delete(options?: DeleteOptions): Promise<number>;\n\n  public abstract join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): ModelDeleteQueryBuilder<T>;\n\n  public abstract leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): ModelDeleteQueryBuilder<T>;\n\n  public abstract whereBuilder(\n    cb: (queryBuilder: ModelDeleteQueryBuilder<T>) => void,\n  ): this;\n\n  public abstract orWhereBuilder(\n    cb: (queryBuilder: ModelDeleteQueryBuilder<T>) => void,\n  ): this;\n\n  public abstract andWhereBuilder(\n    cb: (queryBuilder: ModelDeleteQueryBuilder<T>) => void,\n  ): this;\n}\n","export type PaginationMetadata = {\n  perPage: number;\n  currentPage: number;\n  firstPage: number;\n  isEmpty: boolean;\n  total: number;\n  hasTotal: boolean;\n  lastPage: number;\n  hasMorePages: boolean;\n  hasPages: boolean;\n};\n\nexport type PaginatedData<T> = {\n  paginationMetadata: PaginationMetadata;\n  data: T[];\n};\n\nexport function getPaginationMetadata(\n  page: number,\n  limit: number,\n  total: number,\n) {\n  return {\n    total: total,\n    perPage: limit,\n    currentPage: page,\n    firstPage: 1,\n    isEmpty: total === 0,\n    lastPage: Math.max(1, Math.ceil(total / limit)),\n    hasMorePages: page < Math.max(1, Math.ceil(total / limit)),\n    hasPages: total > limit,\n  };\n}\n","import { convertCase } from \"../../../utils/case_utils\";\nimport { SqlDataSourceType } from \"../../sql_data_source\";\nimport { Model } from \"../../models/model\";\n\nconst commonSelectMethods = [\n  \"*\",\n  \"COUNT\",\n  \"DISTINCT\",\n  \"CONCAT\",\n  \"GROUP_CONCAT\",\n  \"AVG\",\n  \"MAX\",\n  \"MIN\",\n  \"SUM\",\n  \"AS\",\n  \"CONVERT\",\n  \"CAST\",\n  \"CONVERT_TZ\",\n  \"DATE_FORMAT\",\n  \"CURDATE\",\n  \"CURRENT_DATE\",\n  \"CURRENT_TIME\",\n  \"CURRENT_TIMESTAMP\",\n  \"CURTIME\",\n  \"DAYNAME\",\n  \"DAYOFMONTH\",\n  \"DAYOFWEEK\",\n  \"DAYOFYEAR\",\n  \"EXTRACT\",\n  \"HOUR\",\n  \"LOCALTIME\",\n  \"LOCALTIMESTAMP\",\n  \"MICROSECOND\",\n  \"MINUTE\",\n  \"MONTH\",\n  \"QUARTER\",\n  \"SECOND\",\n  \"STR_TO_DATE\",\n  \"TIME\",\n  \"TIMESTAMP\",\n  \"WEEK\",\n  \"YEAR\",\n  \"NOW\",\n  \"UTC_DATE\",\n  \"UTC_TIME\",\n  \"UTC_TIMESTAMP\",\n  \"DATE_ADD\",\n  \"DATE_SUB\",\n  \"DATE\",\n  \"DATEDIFF\",\n  \"DATE_FORMAT\",\n  \"DISTINCTROW\",\n];\n\nconst selectTemplate = (\n  dbType: SqlDataSourceType,\n  typeofModel: typeof Model,\n) => {\n  const table = typeofModel.table;\n  const escapeIdentifier = (identifier: string) => {\n    switch (dbType) {\n      case \"mysql\":\n      case \"sqlite\":\n      case \"mariadb\":\n        return `\\`${identifier.replace(/`/g, \"``\")}\\``;\n      case \"postgres\":\n        return `\"${identifier.replace(/\"/g, '\"\"')}\"`;\n      default:\n        throw new Error(\"Unsupported database type\");\n    }\n  };\n\n  return {\n    selectAll: `SELECT * FROM ${table} `,\n    selectById: (id: string) => `SELECT * FROM ${table} WHERE id = ${id}`,\n    selectByIds: (ids: string[]) => {\n      ids = ids.map((id) => escapeIdentifier(id) as string);\n      return `SELECT * FROM ${table} WHERE id IN (${ids.join(\", \")})`;\n    },\n    selectColumns: (...columns: string[]) => {\n      columns = columns.map((column) => {\n        const columnCase = typeofModel.databaseCaseConvention;\n        let tableName = \"\";\n        let columnName = column;\n        let alias = \"\";\n\n        if (column.toUpperCase().includes(\" AS \")) {\n          [columnName, alias] = column.split(/ AS /i);\n        }\n        alias = convertCase(alias, columnCase);\n\n        if (columnName.includes(\".\")) {\n          [tableName, columnName] = columnName.split(\".\");\n        }\n\n        if (\n          commonSelectMethods.includes(columnName.toUpperCase()) ||\n          columnName.includes(\"(\")\n        ) {\n          return alias ? `${columnName} AS ${alias}` : columnName;\n        }\n\n        let finalColumn = columnName;\n        if (!alias) {\n          const processedColumnName = escapeIdentifier(\n            convertCase(columnName, columnCase),\n          ) as string;\n          finalColumn = tableName\n            ? `${tableName}.${processedColumnName}`\n            : processedColumnName;\n        } else if (tableName) {\n          finalColumn = `${tableName}.${columnName}`;\n        }\n\n        return alias ? `${finalColumn} AS ${alias}` : finalColumn;\n      });\n\n      return `SELECT ${columns.join(\", \")} FROM ${table} `;\n    },\n    selectCount: `SELECT COUNT(*) FROM ${table} `,\n    selectDistinct: (...columns: string[]) => {\n      columns = columns.map((column) =>\n        escapeIdentifier(\n          convertCase(column, typeofModel.databaseCaseConvention),\n        ),\n      ) as string[];\n      return `SELECT DISTINCT ${columns.join(\", \")} FROM ${table} `;\n    },\n    selectSum: (column: string) =>\n      `SELECT SUM(${escapeIdentifier(\n        convertCase(column, typeofModel.databaseCaseConvention),\n      )}) FROM ${table} `,\n    orderBy: (columns: string[], order: \"ASC\" | \"DESC\" = \"ASC\") => {\n      columns = columns.map((column) => {\n        let tableName = \"\";\n        let columnName = column;\n\n        if (column.includes(\".\")) {\n          [tableName, columnName] = column.split(\".\");\n        }\n\n        const processedColumnName = convertCase(\n          columnName,\n          typeofModel.databaseCaseConvention,\n        );\n\n        return tableName\n          ? `${tableName}.${processedColumnName}`\n          : processedColumnName;\n      }) as string[];\n\n      return ` ORDER BY ${columns.join(\", \")} ${order}`;\n    },\n    groupBy: (...columns: string[]) => {\n      columns = columns.map((column) => {\n        let tableName = \"\";\n        let columnName = column;\n\n        if (column.includes(\".\")) {\n          [tableName, columnName] = column.split(\".\");\n        }\n\n        const processedColumnName = convertCase(\n          columnName,\n          typeofModel.databaseCaseConvention,\n        );\n\n        return tableName\n          ? `${tableName}.${processedColumnName}`\n          : processedColumnName;\n      }) as string[];\n\n      return ` GROUP BY ${columns.join(\", \")}`;\n    },\n    limit: (limit: number) => {\n      return ` LIMIT ${limit}`;\n    },\n    offset: (offset: number) => {\n      return ` OFFSET ${offset}`;\n    },\n  };\n};\n\nexport default selectTemplate;\n","import { convertCase } from \"../../utils/case_utils\";\nimport { Model } from \"../models/model\";\nimport { getModelColumns } from \"../models/model_decorators\";\nimport {\n  SelectableType,\n  RelationType,\n  DynamicColumnType,\n} from \"../models/model_manager/model_manager_types\";\nimport { MysqlQueryBuilder } from \"../mysql/mysql_query_builder\";\nimport { PaginatedData } from \"../pagination\";\nimport { PostgresQueryBuilder } from \"../postgres/postgres_query_builder\";\nimport selectTemplate from \"../resources/query/SELECT\";\nimport { addDynamicColumnsToModel } from \"../serializer\";\nimport { SqlDataSource } from \"../sql_data_source\";\nimport { SqlLiteQueryBuilder } from \"../sqlite/sql_lite_query_builder\";\nimport { WhereQueryBuilder } from \"./where_query_builder\";\n\n/**\n * @description The abstract class for query builders for selecting data.\n */\nexport type ModelQueryBuilder<T extends Model> =\n  | MysqlQueryBuilder<T>\n  | PostgresQueryBuilder<T>\n  | SqlLiteQueryBuilder<T>;\n\nexport type FetchHooks = \"beforeFetch\" | \"afterFetch\";\n\nexport type OneOptions = {\n  throwErrorOnNull?: boolean;\n  ignoreHooks?: FetchHooks[];\n};\n\nexport type ManyOptions = {\n  ignoreHooks?: FetchHooks[];\n};\n\nexport abstract class QueryBuilder<\n  T extends Model,\n> extends WhereQueryBuilder<T> {\n  protected selectQuery: string;\n  protected joinQuery: string;\n  protected relations: string[];\n  protected dynamicColumns: string[];\n  protected groupByQuery: string;\n  protected orderByQuery: string;\n  protected limitQuery: string;\n  protected offsetQuery: string;\n  protected selectTemplate: ReturnType<typeof selectTemplate>;\n\n  /**\n   * @description Constructs a Mysql_query_builder instance.\n   * @param model - The model class associated with the table.\n   * @param table - The name of the table.\n   * @param logs - A boolean indicating whether to log queries.\n   */\n  protected constructor(\n    model: typeof Model,\n    table: string,\n    logs: boolean,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, table, logs, false, sqlDataSource);\n    this.sqlDataSource = sqlDataSource;\n    this.selectQuery = selectTemplate(\n      this.sqlDataSource.getDbType(),\n      this.model,\n    ).selectAll;\n    this.selectTemplate = selectTemplate(\n      this.sqlDataSource.getDbType(),\n      this.model,\n    );\n    this.joinQuery = \"\";\n    this.relations = [];\n    this.dynamicColumns = [];\n    this.groupByQuery = \"\";\n    this.orderByQuery = \"\";\n    this.limitQuery = \"\";\n    this.offsetQuery = \"\";\n  }\n\n  /**\n   * @description Executes the query and retrieves the first result.\n   * @returns A Promise resolving to the first result or null.\n   */\n  public abstract one(options: OneOptions): Promise<T | null>;\n\n  /**\n   * @description Executes the query and retrieves the first result. Fail if no result is found.\n   */\n  public abstract oneOrFail(options?: {\n    ignoreHooks?: OneOptions[\"ignoreHooks\"];\n  }): Promise<T>;\n\n  /**\n   * @description Executes the query and retrieves multiple results.\n   * @returns A Promise resolving to an array of results.\n   */\n  public abstract many(options: ManyOptions): Promise<T[]>;\n\n  /**\n   * @description Executes the query and retrieves the count of results, it ignores all select, group by, order by, limit and offset clauses if they are present.\n   * @returns A Promise resolving to the count of results.\n   */\n  public abstract getCount(options: { ignoreHooks: boolean }): Promise<number>;\n\n  /**\n   * @description Executes the query and retrieves the sum of a column, it ignores all select, group by, order by, limit and offset clauses if they are present.\n   * @param column - The column to sum.\n   * @returns A Promise resolving to the sum of the column.\n   */\n  public abstract getSum(\n    column: string,\n    options: { ignoreHooks: boolean },\n  ): Promise<number>;\n\n  /**\n   * @description Executes the query and retrieves multiple results.\n   * @returns A Promise resolving to an array of results.\n   */\n  public abstract paginate(\n    page: number,\n    limit: number,\n    options?: ManyOptions,\n  ): Promise<PaginatedData<T>>;\n\n  /**\n   * @description Adds a SELECT condition to the query.\n   * @param columns - The columns to select.\n   * @returns The Mysql_query_builder instance for chaining.\n   */\n  public abstract select(...columns: string[]): ModelQueryBuilder<T>;\n  public abstract select(\n    ...columns: (SelectableType<T> | \"*\")[]\n  ): ModelQueryBuilder<T>;\n  public abstract select(\n    ...columns: (SelectableType<T> | \"*\" | string)[]\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds a JOIN condition to the query.\n   * @param table\n   * @param primaryColumn\n   * @param foreignColumn\n   */\n  public abstract join(\n    table: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds a LEFT JOIN condition to the query.\n   * @param table\n   * @param primaryColumn\n   * @param foreignColumn\n   */\n  public abstract leftJoin(\n    table: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds a relation to the query.\n   * @param relations - The relations to add.\n   */\n  public abstract addRelations(\n    relations: RelationType<T>[],\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds a the selected dynamic columns from the model into the final model\n   * @param relations - The dynamic columns to add.\n   */\n  public abstract addDynamicColumns(\n    dynamicColumns: DynamicColumnType<T>[],\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Build more complex where conditions.\n   * @param cb\n   */\n  public abstract whereBuilder(\n    cb: (queryBuilder: ModelQueryBuilder<T>) => void,\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Build more complex where conditions.\n   * @param cb\n   */\n  public abstract andWhereBuilder(\n    cb: (queryBuilder: ModelQueryBuilder<T>) => void,\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Build more complex where conditions.\n   * @param cb\n   */\n  public abstract orWhereBuilder(\n    cb: (queryBuilder: ModelQueryBuilder<T>) => void,\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds GROUP BY conditions to the query.\n   * @param columns - The columns to group by.\n   * @returns The Mysql_query_builder instance for chaining.\n   */\n  public abstract groupBy(\n    ...columns: SelectableType<T>[]\n  ): ModelQueryBuilder<T>;\n  public abstract groupBy(...columns: string[]): ModelQueryBuilder<T>;\n  public abstract groupBy(\n    ...columns: (SelectableType<T> | string)[]\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds a raw GROUP BY condition to the query, only one raw GROUP BY condition is stackable, the last one will be used.\n   * @param query - The raw SQL GROUP BY condition.\n   * @returns The Mysql_query_builder instance for chaining.\n   */\n  public abstract groupByRaw(query: string): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds ORDER BY conditions to the query.\n   * @param column - The column to order by.\n   * @param order - The order direction, either \"ASC\" or \"DESC\".\n   * @returns The Mysql_query_builder instance for chaining.\n   */\n  public abstract orderBy(\n    columns: SelectableType<T>[],\n    order: \"ASC\" | \"DESC\",\n  ): ModelQueryBuilder<T>;\n  public abstract orderBy(\n    columns: string[],\n    order: \"ASC\" | \"DESC\",\n  ): ModelQueryBuilder<T>;\n  public abstract orderBy(\n    columns: (SelectableType<T> | string)[],\n    order: \"ASC\" | \"DESC\",\n  ): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds a raw ORDER BY condition to the query, only one raw ORDER BY condition is stackable, the last one will be used.\n   * @param query - The raw SQL ORDER BY condition.\n   * @returns The Mysql_query_builder instance for chaining.\n   */\n  public abstract orderByRaw(query: string): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds a LIMIT condition to the query.\n   * @param limit - The maximum number of rows to return.\n   * @returns The Mysql_query_builder instance for chaining.\n   */\n  public abstract limit(limit: number): ModelQueryBuilder<T>;\n\n  /**\n   * @description Adds an OFFSET condition to the query.\n   * @param offset - The number of rows to skip.\n   * @returns The Mysql_query_builder instance for chaining.\n   */\n  public abstract offset(offset: number): ModelQueryBuilder<T>;\n\n  /**\n   * @description Returns a copy of the query builder instance.\n   * @returns A copy of the query builder instance.\n   */\n  public abstract copy(): ModelQueryBuilder<T>;\n\n  public getCurrentQuery(): {\n    query: string;\n    params: any[];\n  } {\n    const query =\n      this.selectQuery +\n      this.joinQuery +\n      this.whereQuery +\n      this.groupByQuery +\n      this.orderByQuery +\n      this.limitQuery +\n      this.offsetQuery;\n\n    function parsePlaceHolders(\n      dbType: string,\n      query: string,\n      startIndex: number = 1,\n    ): string {\n      switch (dbType) {\n        case \"mysql\":\n        case \"sqlite\":\n        case \"mariadb\":\n          return query.replace(/PLACEHOLDER/g, () => \"?\");\n        case \"postgres\":\n          let index = startIndex;\n          return query.replace(/PLACEHOLDER/g, () => `$${index++}`);\n        default:\n          throw new Error(\n            \"Unsupported database type, did you forget to set the dbType in the function params?\",\n          );\n      }\n    }\n\n    const parsedQuery = parsePlaceHolders(\n      this.sqlDataSource.getDbType(),\n      query,\n    );\n\n    return { query: parsedQuery, params: this.params };\n  }\n\n  protected groupFooterQuery(): string {\n    return (\n      this.groupByQuery + this.orderByQuery + this.limitQuery + this.offsetQuery\n    );\n  }\n\n  protected async mergeRawPacketIntoModel(\n    model: T,\n    row: any,\n    typeofModel: typeof Model,\n  ) {\n    const columns = getModelColumns(this.model);\n    Object.entries(row).forEach(([key, value]) => {\n      const casedKey = convertCase(\n        key,\n        typeofModel.modelCaseConvention,\n      ) as string;\n      if (columns.includes(casedKey)) {\n        Object.assign(model, { [casedKey]: value });\n        return;\n      }\n\n      model.extraColumns[key] = value as string | number | boolean;\n    });\n\n    if (!this.dynamicColumns.length) {\n      return;\n    }\n\n    await addDynamicColumnsToModel(this.model, model, this.dynamicColumns);\n  }\n}\n","import mysql, { RowDataPacket } from \"mysql2/promise\";\nimport { convertCase } from \"../../utils/case_utils\";\nimport { log, queryError } from \"../../utils/logger\";\nimport { Model, getBaseModelInstance } from \"../models/model\";\nimport {\n  SelectableType,\n  RelationType,\n  DynamicColumnType,\n} from \"../models/model_manager/model_manager_types\";\nimport SqlModelManagerUtils from \"../models/model_manager/model_manager_utils\";\nimport { PaginatedData, getPaginationMetadata } from \"../pagination\";\nimport {\n  QueryBuilder,\n  OneOptions,\n  ManyOptions,\n  ModelQueryBuilder,\n} from \"../query_builder/query_builder\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport { parseDatabaseDataIntoModelResponse } from \"../serializer\";\nimport { SqlDataSource } from \"../sql_data_source\";\n\nexport class MysqlQueryBuilder<T extends Model> extends QueryBuilder<T> {\n  protected mysqlConnection: mysql.Connection;\n  protected mysqlModelManagerUtils: SqlModelManagerUtils<T>;\n\n  public constructor(\n    model: typeof Model,\n    table: string,\n    mysqlConnection: mysql.Connection,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, table, logs, sqlDataSource);\n    this.mysqlConnection = mysqlConnection;\n    this.isNestedCondition = isNestedCondition;\n    this.mysqlModelManagerUtils = new SqlModelManagerUtils<T>(\n      \"mysql\",\n      this.mysqlConnection,\n    );\n  }\n\n  public async one(\n    options: OneOptions = { throwErrorOnNull: false },\n  ): Promise<T | null> {\n    // hook query builder\n    if (!options.ignoreHooks?.includes(\"beforeFetch\")) {\n      this.model.beforeFetch(this);\n    }\n\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      this.selectQuery = this.selectTemplate.selectColumns(`${this.table}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    query = this.whereTemplate.convertPlaceHolderToValue(query);\n\n    // limit to 1\n    this.limit(1);\n    query += this.groupFooterQuery();\n\n    query = query.trim();\n    log(query, this.logs, this.params);\n    try {\n      const [rows] = await this.mysqlConnection.query<RowDataPacket[]>(\n        query,\n        this.params,\n      );\n\n      if (!rows.length) {\n        if (options.throwErrorOnNull) {\n          throw new Error(\"ROW_NOT_FOUND\");\n        }\n\n        return null;\n      }\n\n      const modelInstance = getBaseModelInstance<T>();\n      await this.mergeRawPacketIntoModel(modelInstance, rows[0], this.model);\n      const relationModels =\n        await this.mysqlModelManagerUtils.parseQueryBuilderRelations(\n          [modelInstance],\n          this.model,\n          this.relations,\n          this.logs,\n        );\n\n      const model = (await parseDatabaseDataIntoModelResponse(\n        [modelInstance],\n        this.model,\n        relationModels,\n      )) as T;\n\n      return !options.ignoreHooks?.includes(\"afterFetch\")\n        ? ((await this.model.afterFetch([model]))[0] as T)\n        : model;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  public async oneOrFail(options?: {\n    ignoreHooks?: OneOptions[\"ignoreHooks\"];\n  }): Promise<T> {\n    const model = await this.one({\n      throwErrorOnNull: true,\n      ignoreHooks: options?.ignoreHooks,\n    });\n    return model as T;\n  }\n\n  public async many(options: ManyOptions = {}): Promise<T[]> {\n    // hook query builder\n    if (!options.ignoreHooks?.includes(\"beforeFetch\")) {\n      this.model.beforeFetch(this);\n    }\n\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      this.selectQuery = this.selectTemplate.selectColumns(`${this.table}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    query += this.groupFooterQuery();\n    query = this.whereTemplate.convertPlaceHolderToValue(query);\n    query = query.trim();\n\n    log(query, this.logs, this.params);\n    try {\n      const [rows] = await this.mysqlConnection.query<RowDataPacket[]>(\n        query,\n        this.params,\n      );\n\n      const modelPromises = rows.map(async (row) => {\n        const modelInstance = getBaseModelInstance<T>();\n        await this.mergeRawPacketIntoModel(modelInstance, row, this.model);\n\n        return modelInstance as T;\n      });\n\n      const models = await Promise.all(modelPromises);\n      const relationModels =\n        await this.mysqlModelManagerUtils.parseQueryBuilderRelations(\n          models,\n          this.model,\n          this.relations,\n          this.logs,\n        );\n\n      const serializedModels = await parseDatabaseDataIntoModelResponse(\n        models,\n        this.model,\n        relationModels,\n      );\n      if (!serializedModels) {\n        return [];\n      }\n\n      if (!options.ignoreHooks?.includes(\"afterFetch\")) {\n        await this.model.afterFetch(serializedModels as T[]);\n      }\n\n      return (\n        Array.isArray(serializedModels) ? serializedModels : [serializedModels]\n      ) as T[];\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  public whereBuilder(cb: (queryBuilder: MysqlQueryBuilder<T>) => void): this {\n    const queryBuilder = new MysqlQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.mysqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(queryBuilder as unknown as MysqlQueryBuilder<T>);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  public orWhereBuilder(\n    cb: (queryBuilder: MysqlQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new MysqlQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.mysqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as MysqlQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  public andWhereBuilder(\n    cb: (queryBuilder: MysqlQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new MysqlQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.mysqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as MysqlQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  public async getCount(\n    options: { ignoreHooks: boolean } = { ignoreHooks: false },\n  ): Promise<number> {\n    if (options.ignoreHooks) {\n      const [result]: any = await this.mysqlConnection.query(\n        `SELECT COUNT(*) as total from ${this.table}`,\n      );\n      return result[0].total;\n    }\n\n    this.select(\"COUNT(*) as total\");\n    const result = await this.one();\n    return result ? +result.extraColumns.total : 0;\n  }\n\n  public async getSum(column: SelectableType<T>): Promise<number>;\n  public async getSum(column: string): Promise<number>;\n  public async getSum(\n    column: SelectableType<T> | string,\n    options: { ignoreHooks: boolean } = { ignoreHooks: false },\n  ): Promise<number> {\n    if (options.ignoreHooks) {\n      const [result]: any = await this.mysqlConnection.query(\n        `SELECT SUM(${column as string}) as total from ${this.table}`,\n      );\n      return result[0].total;\n    }\n\n    column = convertCase(column as string, this.model.databaseCaseConvention);\n    this.select(`SUM(${column as string}) as total`);\n    const result = await this.one();\n    return result ? +result.extraColumns.total : 0;\n  }\n\n  public async paginate(\n    page: number,\n    limit: number,\n    options?: ManyOptions,\n  ): Promise<PaginatedData<T>> {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    this.offsetQuery = this.selectTemplate.offset((page - 1) * limit);\n\n    const originalSelectQuery = this.selectQuery;\n    this.select(\"COUNT(*) as total\");\n    const total = await this.many(options);\n\n    this.selectQuery = originalSelectQuery;\n    const models = await this.many(options);\n\n    const paginationMetadata = getPaginationMetadata(\n      page,\n      limit,\n      +total[0].extraColumns[\"total\"] as number,\n    );\n    let data =\n      (await parseDatabaseDataIntoModelResponse(models, this.model)) || [];\n    if (Array.isArray(data)) {\n      data = data.filter((model) => model !== null);\n    }\n\n    return {\n      paginationMetadata,\n      data: Array.isArray(data) ? data : [data],\n    } as PaginatedData<T>;\n  }\n\n  // SELECT\n  public select(...columns: string[]): MysqlQueryBuilder<T>;\n  public select(...columns: (SelectableType<T> | \"*\")[]): MysqlQueryBuilder<T>;\n  public select(\n    ...columns: (SelectableType<T> | \"*\" | string)[]\n  ): MysqlQueryBuilder<T> {\n    this.selectQuery = this.selectTemplate.selectColumns(\n      ...(columns as string[]),\n    );\n    return this;\n  }\n\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): MysqlQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): MysqlQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.leftJoin();\n    return this;\n  }\n\n  public addRelations(relations: RelationType<T>[]): MysqlQueryBuilder<T> {\n    this.relations = relations as string[];\n    return this;\n  }\n\n  public addDynamicColumns(\n    dynamicColumns: DynamicColumnType<T>[],\n  ): ModelQueryBuilder<T> {\n    this.dynamicColumns = dynamicColumns as string[];\n    return this;\n  }\n\n  public groupBy(...columns: SelectableType<T>[]): this;\n  public groupBy(...columns: string[]): this;\n  public groupBy(...columns: (SelectableType<T> | string)[]): this {\n    this.groupByQuery = this.selectTemplate.groupBy(...(columns as string[]));\n    return this;\n  }\n\n  public groupByRaw(query: string): this {\n    this.groupByQuery = ` GROUP BY ${query}`;\n    return this;\n  }\n\n  public orderBy(columns: SelectableType<T>[], order: \"ASC\" | \"DESC\"): this;\n  public orderBy(columns: string[], order: \"ASC\" | \"DESC\"): this;\n  public orderBy(\n    columns: (SelectableType<T> | string)[],\n    order: \"ASC\" | \"DESC\",\n  ): this {\n    this.orderByQuery = this.selectTemplate.orderBy(columns as string[], order);\n    return this;\n  }\n\n  public orderByRaw(query: string): this {\n    this.orderByQuery = ` ORDER BY ${query}`;\n    return this;\n  }\n\n  public limit(limit: number) {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    return this;\n  }\n\n  public offset(offset: number) {\n    this.offsetQuery = this.selectTemplate.offset(offset);\n    return this;\n  }\n\n  public copy(): ModelQueryBuilder<T> {\n    const queryBuilder = new MysqlQueryBuilder<T>(\n      this.model as typeof Model,\n      this.table,\n      this.mysqlConnection,\n      this.logs,\n      this.isNestedCondition,\n      this.sqlDataSource,\n    );\n\n    queryBuilder.selectQuery = this.selectQuery;\n    queryBuilder.whereQuery = this.whereQuery;\n    queryBuilder.joinQuery = this.joinQuery;\n    queryBuilder.groupByQuery = this.groupByQuery;\n    queryBuilder.orderByQuery = this.orderByQuery;\n    queryBuilder.limitQuery = this.limitQuery;\n    queryBuilder.offsetQuery = this.offsetQuery;\n    queryBuilder.params = [...this.params];\n    queryBuilder.relations = [...this.relations];\n    return queryBuilder;\n  }\n\n  protected groupFooterQuery(): string {\n    return (\n      this.groupByQuery + this.orderByQuery + this.limitQuery + this.offsetQuery\n    );\n  }\n}\n","import { Model } from \"../models/model\";\nimport updateTemplate from \"../resources/query/UPDATE\";\nimport { SqlConnectionType } from \"../sql_data_source\";\nimport { WhereQueryBuilder } from \"./where_query_builder\";\n\nexport type WithDataOptions = {\n  ignoreBeforeUpdateHook?: boolean;\n};\n\nexport abstract class ModelUpdateQueryBuilder<\n  T extends Model,\n> extends WhereQueryBuilder<T> {\n  protected abstract sqlConnection: SqlConnectionType;\n  protected abstract joinQuery: string;\n  protected abstract updateTemplate: ReturnType<typeof updateTemplate>;\n  protected abstract isNestedCondition: boolean;\n\n  /**\n   * @description Updates a record in the database.\n   * @param data\n   * @param trx\n   * @returns The number of affected rows.\n   */\n  public abstract withData(\n    data: Partial<T>,\n    options?: WithDataOptions,\n  ): Promise<number>;\n  public abstract join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): ModelUpdateQueryBuilder<T>;\n  public abstract leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): ModelUpdateQueryBuilder<T>;\n}\n","import { Connection } from \"mysql2/promise\";\nimport { log, queryError } from \"../../utils/logger\";\nimport { Model } from \"../models/model\";\nimport {\n  ModelUpdateQueryBuilder,\n  WithDataOptions,\n} from \"../query_builder/update_query_builder\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport updateTemplate from \"../resources/query/UPDATE\";\nimport { SqlDataSource } from \"../sql_data_source\";\n\nexport class MysqlUpdateQueryBuilder<\n  T extends Model,\n> extends ModelUpdateQueryBuilder<T> {\n  protected sqlConnection: Connection;\n  protected joinQuery = \"\";\n  protected updateTemplate: ReturnType<typeof updateTemplate>;\n  protected isNestedCondition = false;\n\n  /**\n   * @description Constructs a Mysql_query_builder instance.\n   * @param model - The model class associated with the table.\n   * @param table - The name of the table.\n   * @param mysqlConnection - The MySQL connection pool.\n   * @param logs - A boolean indicating whether to log queries.\n   * @param isNestedCondition - A boolean indicating whether the query is nested in another query.\n   */\n  public constructor(\n    model: typeof Model,\n    table: string,\n    mysqlConnection: Connection,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, table, logs, false, sqlDataSource);\n    this.sqlConnection = mysqlConnection;\n    this.updateTemplate = updateTemplate(\n      this.sqlDataSource.getDbType(),\n      this.model,\n    );\n    this.joinQuery = \"\";\n    this.isNestedCondition = isNestedCondition;\n  }\n\n  public async withData(\n    data: Partial<T>,\n    options?: WithDataOptions,\n  ): Promise<number> {\n    const { ignoreBeforeUpdateHook } = options || {};\n    if (!ignoreBeforeUpdateHook) {\n      this.model.beforeUpdate(this);\n    }\n\n    const columns = Object.keys(data);\n    const values = Object.values(data);\n    this.whereQuery = this.whereTemplate.convertPlaceHolderToValue(\n      this.whereQuery,\n    );\n\n    const { query, params } = this.updateTemplate.massiveUpdate(\n      columns,\n      values,\n      this.whereQuery,\n      this.joinQuery,\n    );\n\n    params.push(...this.params);\n\n    log(query, this.logs, params);\n    try {\n      const rows: any = await this.sqlConnection.query(query, params);\n      if (!rows[0].affectedRows) {\n        return 0;\n      }\n\n      return rows[0].affectedRows;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): MysqlUpdateQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): MysqlUpdateQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   * @description Build more complex where conditions.\n   * @param cb\n   */\n  public whereBuilder(\n    cb: (queryBuilder: MysqlUpdateQueryBuilder<T>) => void,\n  ): this {\n    const queryBuilder = new MysqlUpdateQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(queryBuilder as unknown as MysqlUpdateQueryBuilder<T>);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  /**\n   * @description Build complex OR-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public orWhereBuilder(\n    cb: (queryBuilder: MysqlUpdateQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new MysqlUpdateQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as MysqlUpdateQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  /**\n   * @description Build complex AND-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public andWhereBuilder(\n    cb: (queryBuilder: MysqlUpdateQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new MysqlUpdateQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as MysqlUpdateQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n}\n","import mysql, { RowDataPacket } from \"mysql2/promise\";\nimport { log, queryError } from \"../../utils/logger\";\nimport { Model } from \"../models/model\";\nimport { ModelManager } from \"../models/model_manager/model_manager\";\nimport {\n  FindType,\n  UnrestrictedFindType,\n  FindOneType,\n  UnrestrictedFindOneType,\n} from \"../models/model_manager/model_manager_types\";\nimport SqlModelManagerUtils from \"../models/model_manager/model_manager_utils\";\nimport { parseDatabaseDataIntoModelResponse } from \"../serializer\";\nimport { SqlDataSource } from \"../sql_data_source\";\nimport { MysqlDeleteQueryBuilder } from \"./mysql_delete_query_builder\";\nimport { MysqlQueryBuilder } from \"./mysql_query_builder\";\nimport { MysqlUpdateQueryBuilder } from \"./mysql_update_query_builder\";\n\nexport class MysqlModelManager<T extends Model> extends ModelManager<T> {\n  protected mysqlConnection: mysql.Connection;\n  protected sqlModelManagerUtils: SqlModelManagerUtils<T>;\n\n  /**\n   * Constructor for MysqlModelManager class.\n   *\n   * @param {typeof Model} model - Model constructor.\n   * @param {Connection} mysqlConnection - MySQL connection pool.\n   * @param {boolean} logs - Flag to enable or disable logging.\n   */\n  constructor(\n    model: typeof Model,\n    mysqlConnection: mysql.Connection,\n    logs: boolean,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, logs, sqlDataSource);\n    this.mysqlConnection = mysqlConnection;\n    this.sqlModelManagerUtils = new SqlModelManagerUtils<T>(\n      \"mysql\",\n      mysqlConnection,\n    );\n  }\n\n  /**\n   * Find method to retrieve multiple records from the database based on the input conditions.\n   *\n   * @param {FindType} input - Optional query parameters for filtering, ordering, and pagination.\n   * @returns Promise resolving to an array of models.\n   */\n  public async find(\n    input?: FindType<T> | UnrestrictedFindType<T>,\n  ): Promise<T[]> {\n    try {\n      if (!input) {\n        return await this.query().many();\n      }\n\n      const query = this.query();\n      if (input.select) {\n        query.select(...(input.select as string[]));\n      }\n\n      if (input.relations) {\n        query.addRelations(input.relations);\n      }\n\n      if (input.where) {\n        Object.entries(input.where).forEach(([key, value]) => {\n          query.where(key, value);\n        });\n      }\n\n      if (input.orderBy) {\n        query.orderBy(input.orderBy.columns, input.orderBy.type);\n      }\n\n      if (input.limit) {\n        query.limit(input.limit);\n      }\n\n      if (input.offset) {\n        query.offset(input.offset);\n      }\n\n      if (input.groupBy) {\n        query.groupBy(...input.groupBy);\n      }\n\n      return await query.many({ ignoreHooks: input.ignoreHooks || [] });\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record from the database based on the input conditions.\n   *\n   * @param {FindOneType} input - query parameters for filtering and selecting a single record.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOne(\n    input: FindOneType<T> | UnrestrictedFindOneType<T>,\n  ): Promise<T | null> {\n    try {\n      const query = this.query();\n      if (input.select) {\n        query.select(...(input.select as string[]));\n      }\n\n      if (input.relations) {\n        query.addRelations(input.relations);\n      }\n\n      if (input.where) {\n        Object.entries(input.where).forEach(([key, value]) => {\n          query.where(key, value);\n        });\n      }\n\n      return await query.one({\n        throwErrorOnNull: input.throwErrorOnNull || false,\n        ignoreHooks: input.ignoreHooks || [],\n      });\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record by its PK from the database.\n   *\n   * @param {string | number | boolean} value - PK of the record to retrieve, hooks will not have any effect, since it's a direct query for the PK.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOneByPrimaryKey(\n    value: string | number | boolean,\n    throwErrorOnNull: boolean = false,\n  ): Promise<T | null> {\n    try {\n      if (!this.model.primaryKey) {\n        throw new Error(\n          \"Model \" +\n            this.model.table +\n            \" has no primary key to be retrieved by\",\n        );\n      }\n\n      return await this.query()\n        .where(this.model.primaryKey as string, value)\n        .one({\n          throwErrorOnNull,\n        });\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Save a new model instance to the database.\n   *\n   * @param {Model} model - Model instance to be saved.\n   * @param {TransactionType} trx - TransactionType to be used on the save operation.\n   * @returns Promise resolving to the saved model or null if saving fails.\n   */\n  public async insert(model: Partial<T>): Promise<T | null> {\n    this.model.beforeInsert(model as T);\n    const { query, params } = this.sqlModelManagerUtils.parseInsert(\n      model as T,\n      this.model,\n      this.sqlDataSource.getDbType(),\n    );\n\n    try {\n      log(query, this.logs, params);\n      const [result]: any = await this.mysqlConnection.query<RowDataPacket[]>(\n        query,\n        params,\n      );\n\n      // If pk it's not autogenerated but it's passed in creation process, the model it's retrieved by it's primary key\n      if (this.model.primaryKey && model[this.model.primaryKey as keyof T]) {\n        const pkValue = model[this.model.primaryKey as keyof T] as\n          | string\n          | number;\n        return await this.findOneByPrimaryKey(pkValue);\n      }\n\n      return await this.findOneByPrimaryKey(result[\"insertId\"]);\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Create multiple model instances in the database.\n   *\n   * @param {Model} model - Model instance to be saved.\n   * @param {TransactionType} trx - TransactionType to be used on the save operation.\n   * @returns Promise resolving to an array of saved models or null if saving fails.\n   */\n  public async insertMany(models: Partial<T>[]): Promise<T[]> {\n    models.forEach((model) => {\n      this.model.beforeInsert(model as T);\n    });\n\n    const { query, params } = this.sqlModelManagerUtils.parseMassiveInsert(\n      models as T[],\n      this.model,\n      this.sqlDataSource.getDbType(),\n    );\n\n    try {\n      log(query, this.logs, params);\n      const [rows]: any = await this.mysqlConnection.query(query, params);\n\n      if (!rows.affectedRows) {\n        return [];\n      }\n\n      // If pk it's not autogenerated but it's passed in creation process, the model it's retrieved by it's primary key\n      if (\n        this.model.primaryKey &&\n        models[0][this.model.primaryKey as keyof T]\n      ) {\n        const idsToFetchList = models.map(\n          (model) => model[this.model.primaryKey as keyof T],\n        ) as string[];\n\n        const primaryKeyList = idsToFetchList\n          .map((key) => `'${key}'`)\n          .join(\",\");\n\n        return await this.query()\n          .whereIn(this.model.primaryKey as string, idsToFetchList)\n          .orderByRaw(`FIELD(${this.model.primaryKey}, ${primaryKeyList})`)\n          .many();\n      }\n\n      const idsToFetchList = Array.from(\n        { length: rows.affectedRows },\n        (_, i) => i + rows.insertId,\n      );\n\n      return await this.query()\n        .whereIn(this.model.primaryKey as string, idsToFetchList)\n        .many();\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Update an existing model instance in the database.\n   * @param {Model} model - Model instance to be updated.\n   * @param {TransactionType} trx - TransactionType to be used on the update operation.\n   * @returns Promise resolving to the updated model or null if updating fails.\n   */\n  public async updateRecord(model: T): Promise<T | null> {\n    if (!this.model.primaryKey) {\n      throw new Error(\n        \"Model \" +\n          this.model.table +\n          \" has no primary key to be updated, try save\",\n      );\n    }\n\n    try {\n      const updateQuery = this.sqlModelManagerUtils.parseUpdate(\n        model,\n        this.model,\n        this.sqlDataSource.getDbType(),\n      );\n      log(updateQuery.query, this.logs, updateQuery.params);\n      await this.mysqlConnection.query(updateQuery.query, updateQuery.params);\n      if (!this.model.primaryKey) {\n        log(\n          \"Model has no primary key so no record can be retrieved\",\n          this.logs,\n        );\n        return null;\n      }\n\n      return await this.findOneByPrimaryKey(\n        model[this.model.primaryKey as keyof T] as string | number,\n      );\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Delete a record from the database from the given model.\n   *\n   * @param {Model} model - Model to delete.\n   * @param {TransactionType} trx - TransactionType to be used on the delete operation.\n   * @returns Promise resolving to the deleted model or null if deleting fails.\n   */\n  public async deleteRecord(model: T): Promise<T | null> {\n    try {\n      if (!this.model.primaryKey) {\n        throw new Error(\n          \"Model \" +\n            this.model.table +\n            \" has no primary key to be deleted from\",\n        );\n      }\n      const { query, params } = this.sqlModelManagerUtils.parseDelete(\n        this.model.table,\n        this.model.primaryKey,\n        model[this.model.primaryKey as keyof T] as string,\n      );\n\n      log(query, this.logs, params);\n      const [rows]: any = await this.mysqlConnection.query<RowDataPacket[]>(\n        query,\n        params,\n      );\n      if (this.sqlDataSource.getDbType() === \"mariadb\") {\n        return (await parseDatabaseDataIntoModelResponse(\n          [rows[0] as T],\n          this.model,\n        )) as T;\n      }\n\n      return model;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Create and return a new instance of the Mysql_query_builder for building more complex SQL queries.\n   *\n   * @returns {Mysql_query_builder<Model>} - Instance of Mysql_query_builder.\n   */\n  public query(): MysqlQueryBuilder<T> {\n    return new MysqlQueryBuilder<T>(\n      this.model,\n      this.model.table,\n      this.mysqlConnection,\n      this.logs,\n      false,\n      this.sqlDataSource,\n    );\n  }\n\n  /**\n   * @description Returns an update query builder.\n   */\n  public update(): MysqlUpdateQueryBuilder<T> {\n    return new MysqlUpdateQueryBuilder<T>(\n      this.model,\n      this.model.table,\n      this.mysqlConnection,\n      this.logs,\n      false,\n      this.sqlDataSource,\n    );\n  }\n\n  /**\n   * @description Returns a delete query builder.\n   */\n  public deleteQuery(): MysqlDeleteQueryBuilder<T> {\n    return new MysqlDeleteQueryBuilder<T>(\n      this.model,\n      this.model.table,\n      this.mysqlConnection,\n      this.logs,\n      false,\n      this.sqlDataSource,\n    );\n  }\n}\n","import { getBaseModelInstance, Model } from \"../models/model\";\nimport {\n  OneOptions,\n  QueryBuilder,\n  ModelQueryBuilder,\n  ManyOptions,\n} from \"../query_builder/query_builder\";\nimport { Client } from \"pg\";\nimport { log, queryError } from \"../../utils/logger\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport { PaginatedData, getPaginationMetadata } from \"../pagination\";\nimport { parseDatabaseDataIntoModelResponse } from \"../serializer\";\nimport {\n  DynamicColumnType,\n  RelationType,\n  SelectableType,\n} from \"../models/model_manager/model_manager_types\";\nimport \"reflect-metadata\";\nimport { SqlDataSource } from \"../../../src/sql/sql_data_source\";\nimport { convertCase } from \"../../utils/case_utils\";\nimport SqlModelManagerUtils from \"../models/model_manager/model_manager_utils\";\n\nexport class PostgresQueryBuilder<T extends Model> extends QueryBuilder<T> {\n  protected pgClient: Client;\n  protected postgresModelManagerUtils: SqlModelManagerUtils<T>;\n\n  public constructor(\n    model: typeof Model,\n    table: string,\n    pgClient: Client,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, table, logs, sqlDataSource);\n    this.pgClient = pgClient;\n    this.isNestedCondition = isNestedCondition;\n    this.postgresModelManagerUtils = new SqlModelManagerUtils<T>(\n      \"postgres\",\n      this.pgClient,\n    );\n  }\n\n  // SELECT\n  public select(...columns: string[]): PostgresQueryBuilder<T>;\n  public select(\n    ...columns: (SelectableType<T> | \"*\")[]\n  ): PostgresQueryBuilder<T>;\n  public select(\n    ...columns: (SelectableType<T> | \"*\" | string)[]\n  ): PostgresQueryBuilder<T> {\n    this.selectQuery = this.selectTemplate.selectColumns(\n      ...(columns as string[]),\n    );\n    return this;\n  }\n\n  public async one(\n    options: OneOptions = { throwErrorOnNull: false },\n  ): Promise<T | null> {\n    // hook query builder\n    if (!options.ignoreHooks?.includes(\"beforeFetch\")) {\n      this.model.beforeFetch(this);\n    }\n\n    this.limitQuery = this.selectTemplate.limit(1);\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      this.selectQuery = this.selectTemplate.selectColumns(`${this.table}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    query = this.whereTemplate.convertPlaceHolderToValue(query);\n\n    // limit to 1\n    this.limit(1);\n    query += this.groupFooterQuery();\n\n    query = query.trim();\n    log(query, this.logs, this.params);\n    try {\n      const result = await this.pgClient.query(query, this.params);\n      if (!result.rows[0]) {\n        if (options.throwErrorOnNull) {\n          throw new Error(\"ROW_NOT_FOUND\");\n        }\n\n        return null;\n      }\n\n      const modelInstance = getBaseModelInstance<T>();\n      await this.mergeRawPacketIntoModel(\n        modelInstance,\n        result.rows[0],\n        this.model,\n      );\n\n      const relationModels =\n        await this.postgresModelManagerUtils.parseQueryBuilderRelations(\n          [modelInstance],\n          this.model,\n          this.relations,\n          this.logs,\n        );\n\n      const model = (await parseDatabaseDataIntoModelResponse(\n        [modelInstance],\n        this.model,\n        relationModels,\n      )) as T;\n\n      return !options.ignoreHooks?.includes(\"afterFetch\")\n        ? ((await this.model.afterFetch([model]))[0] as T)\n        : model;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  public async oneOrFail(options?: {\n    ignoreHooks: OneOptions[\"ignoreHooks\"];\n  }): Promise<T> {\n    const model = await this.one({\n      throwErrorOnNull: true,\n      ignoreHooks: options?.ignoreHooks,\n    });\n    return model as T;\n  }\n\n  public async many(options: ManyOptions = {}): Promise<T[]> {\n    // hook query builder\n    if (!options.ignoreHooks?.includes(\"beforeFetch\")) {\n      this.model.beforeFetch(this);\n    }\n\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      this.selectQuery = this.selectTemplate.selectColumns(`${this.table}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    query += this.groupFooterQuery();\n    query = this.whereTemplate.convertPlaceHolderToValue(query);\n    query = query.trim();\n\n    log(query, this.logs, this.params);\n    try {\n      const result = await this.pgClient.query(query, this.params);\n      const rows = result.rows;\n\n      const modelPromises = rows.map(async (row) => {\n        const modelInstance = getBaseModelInstance<T>();\n        await this.mergeRawPacketIntoModel(modelInstance, row, this.model);\n\n        return modelInstance as T;\n      });\n\n      const models = await Promise.all(modelPromises);\n      const relationModels =\n        await this.postgresModelManagerUtils.parseQueryBuilderRelations(\n          models,\n          this.model,\n          this.relations,\n          this.logs,\n        );\n\n      const serializedModels = await parseDatabaseDataIntoModelResponse(\n        models,\n        this.model,\n        relationModels,\n      );\n      if (!serializedModels) {\n        return [];\n      }\n\n      if (!options.ignoreHooks?.includes(\"afterFetch\")) {\n        await this.model.afterFetch(serializedModels as T[]);\n      }\n\n      return (\n        Array.isArray(serializedModels) ? serializedModels : [serializedModels]\n      ) as T[];\n    } catch (error: any) {\n      throw new Error(\"query failed: \" + error.message);\n    }\n  }\n\n  public whereBuilder(\n    cb: (queryBuilder: PostgresQueryBuilder<T>) => void,\n  ): this {\n    const queryBuilder = new PostgresQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.pgClient,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(queryBuilder as unknown as PostgresQueryBuilder<T>);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  public orWhereBuilder(\n    cb: (queryBuilder: PostgresQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new PostgresQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.pgClient,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as PostgresQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  public andWhereBuilder(\n    cb: (queryBuilder: PostgresQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new PostgresQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.pgClient,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as PostgresQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  public async getCount(\n    options: { ignoreHooks: boolean } = { ignoreHooks: false },\n  ): Promise<number> {\n    if (options.ignoreHooks) {\n      const { rows } = await this.pgClient.query(\n        `SELECT COUNT(*) as total from ${this.table}`,\n      );\n      return +rows[0].total;\n    }\n    this.select(\"COUNT(*) as total\");\n    const result = await this.one();\n    return result ? +result.extraColumns[\"total\"] : 0;\n  }\n\n  public async getSum(column: SelectableType<T>): Promise<number>;\n  public async getSum(column: string): Promise<number>;\n  public async getSum(\n    column: SelectableType<T> | string,\n    options: { ignoreHooks: boolean } = { ignoreHooks: false },\n  ): Promise<number> {\n    if (options.ignoreHooks) {\n      const { rows } = await this.pgClient.query(\n        `SELECT SUM(${column as string}) as total from ${this.table}`,\n      );\n      return +rows[0].total || 0;\n    }\n\n    column = convertCase(column as string, this.model.databaseCaseConvention);\n    this.select(`SUM(${column as string}) as total`);\n    const result = await this.one();\n    return result ? +result.extraColumns[\"total\"] : 0;\n  }\n\n  public async paginate(\n    page: number,\n    limit: number,\n    options?: ManyOptions,\n  ): Promise<PaginatedData<T>> {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    this.offsetQuery = this.selectTemplate.offset((page - 1) * limit);\n\n    const originalSelectQuery = this.selectQuery;\n    this.select(\"COUNT(*) as total\");\n    const total = await this.many(options);\n    this.selectQuery = originalSelectQuery;\n\n    const models = await this.many(options);\n    const paginationMetadata = getPaginationMetadata(\n      page,\n      limit,\n      +total[0].extraColumns[\"total\"] as number,\n    );\n    let data =\n      (await parseDatabaseDataIntoModelResponse(models, this.model)) || [];\n    if (Array.isArray(data)) {\n      data = data.filter((model) => model !== null);\n    }\n    return {\n      paginationMetadata,\n      data: Array.isArray(data) ? data : [data],\n    } as PaginatedData<T>;\n  }\n\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): PostgresQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): PostgresQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.leftJoin();\n    return this;\n  }\n\n  public addRelations(relations: RelationType<T>[]): PostgresQueryBuilder<T> {\n    this.relations = relations as string[];\n    return this;\n  }\n\n  public addDynamicColumns(\n    dynamicColumns: DynamicColumnType<T>[],\n  ): ModelQueryBuilder<T> {\n    this.dynamicColumns = dynamicColumns as string[];\n    return this;\n  }\n\n  public groupBy(...columns: SelectableType<T>[]): this;\n  public groupBy(...columns: string[]): this;\n  public groupBy(...columns: (SelectableType<T> | string)[]): this {\n    this.groupByQuery = this.selectTemplate.groupBy(...(columns as string[]));\n    return this;\n  }\n\n  public groupByRaw(query: string): this {\n    this.groupByQuery = ` GROUP BY ${query}`;\n    return this;\n  }\n\n  public orderBy(columns: SelectableType<T>[], order: \"ASC\" | \"DESC\"): this;\n  public orderBy(columns: string[], order: \"ASC\" | \"DESC\"): this;\n  public orderBy(\n    columns: (SelectableType<T> | string)[],\n    order: \"ASC\" | \"DESC\",\n  ): this {\n    this.orderByQuery = this.selectTemplate.orderBy(columns as string[], order);\n    return this;\n  }\n\n  public orderByRaw(query: string): this {\n    this.orderByQuery = ` ORDER BY ${query}`;\n    return this;\n  }\n\n  public limit(limit: number) {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    return this;\n  }\n\n  public offset(offset: number) {\n    this.offsetQuery = this.selectTemplate.offset(offset);\n    return this;\n  }\n\n  public copy(): ModelQueryBuilder<T> {\n    const queryBuilder = new PostgresQueryBuilder<T>(\n      this.model as typeof Model,\n      this.table,\n      this.pgClient,\n      this.logs,\n      this.isNestedCondition,\n      this.sqlDataSource,\n    );\n    queryBuilder.selectQuery = this.selectQuery;\n    queryBuilder.whereQuery = this.whereQuery;\n    queryBuilder.groupByQuery = this.groupByQuery;\n    queryBuilder.orderByQuery = this.orderByQuery;\n    queryBuilder.limitQuery = this.limitQuery;\n    queryBuilder.offsetQuery = this.offsetQuery;\n    queryBuilder.params = [...this.params];\n    return queryBuilder;\n  }\n\n  protected groupFooterQuery(): string {\n    return (\n      this.groupByQuery + this.orderByQuery + this.limitQuery + this.offsetQuery\n    );\n  }\n}\n","import { Model } from \"../models/model\";\nimport { log, queryError } from \"../../utils/logger\";\nimport updateTemplate from \"../resources/query/UPDATE\";\nimport { Client } from \"pg\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport { SqlDataSource } from \"../../../src/sql/sql_data_source\";\nimport {\n  ModelUpdateQueryBuilder,\n  WithDataOptions,\n} from \"../query_builder/update_query_builder\";\n\nexport class PostgresUpdateQueryBuilder<\n  T extends Model,\n> extends ModelUpdateQueryBuilder<T> {\n  protected sqlConnection: Client;\n  protected joinQuery = \"\";\n  protected updateTemplate: ReturnType<typeof updateTemplate>;\n  protected isNestedCondition = false;\n\n  /**\n   * @description Constructs a Mysql_query_builder instance.\n   * @param model - The model class associated with the table.\n   * @param table - The name of the table.\n   * @param pgClient - The MySQL connection pool.\n   * @param logs - A boolean indicating whether to log queries.\n   * @param isNestedCondition - A boolean indicating whether the query is nested in another query.\n   */\n  public constructor(\n    model: typeof Model,\n    table: string,\n    pgClient: Client,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, table, logs, false, sqlDataSource);\n    this.sqlConnection = pgClient;\n    this.updateTemplate = updateTemplate(\n      this.sqlDataSource.getDbType(),\n      this.model,\n    );\n    this.joinQuery = \"\";\n    this.isNestedCondition = isNestedCondition;\n  }\n\n  public async withData(\n    data: Partial<T>,\n    options?: WithDataOptions,\n  ): Promise<number> {\n    const { ignoreBeforeUpdateHook } = options || {};\n    if (!ignoreBeforeUpdateHook) {\n      this.model.beforeUpdate(this);\n    }\n\n    const columns = Object.keys(data);\n    const values = Object.values(data);\n    this.whereQuery = this.whereTemplate.convertPlaceHolderToValue(\n      this.whereQuery,\n      values.length + 1,\n    );\n    const { query, params } = this.updateTemplate.massiveUpdate(\n      columns,\n      values,\n      this.whereQuery,\n      this.joinQuery,\n    );\n\n    params.push(...this.params);\n\n    log(query, this.logs, params);\n    try {\n      const result = await this.sqlConnection.query<T>(query, params);\n      if (!result.rows) {\n        return 0;\n      }\n\n      return result.rowCount || 0;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): PostgresUpdateQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): PostgresUpdateQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   * @description Build more complex where conditions.\n   * @param cb\n   */\n  public whereBuilder(\n    cb: (queryBuilder: PostgresUpdateQueryBuilder<T>) => void,\n  ): this {\n    const queryBuilder = new PostgresUpdateQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(queryBuilder as unknown as PostgresUpdateQueryBuilder<T>);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  /**\n   * @description Build complex OR-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public orWhereBuilder(\n    cb: (queryBuilder: PostgresUpdateQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new PostgresUpdateQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as PostgresUpdateQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  /**\n   * @description Build complex AND-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public andWhereBuilder(\n    cb: (queryBuilder: PostgresUpdateQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new PostgresUpdateQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as PostgresUpdateQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n}\n","import { Model } from \"../models/model\";\nimport { Client } from \"pg\";\nimport deleteTemplate from \"../resources/query/DELETE\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport { SqlDataSource } from \"../../../src/sql/sql_data_source\";\nimport { DateTime } from \"luxon\";\nimport updateTemplate from \"../resources/query/UPDATE\";\nimport {\n  DeleteOptions,\n  ModelDeleteQueryBuilder,\n  SoftDeleteOptions,\n} from \"../query_builder/delete_query_builder\";\nimport { log, queryError } from \"../../utils/logger\";\n\nexport class PostgresDeleteQueryBuilder<\n  T extends Model,\n> extends ModelDeleteQueryBuilder<T> {\n  protected sqlConnection: Client;\n  protected joinQuery;\n  protected updateTemplate: ReturnType<typeof updateTemplate>;\n  protected deleteTemplate: ReturnType<typeof deleteTemplate>;\n  protected isNestedCondition = false;\n\n  /**\n   * @description Constructs a Mysql_query_builder instance.\n   * @param model - The model class associated with the table.\n   * @param table - The name of the table.\n   * @param pgClient - The MySQL connection pool.\n   * @param logs - A boolean indicating whether to log queries.\n   * @param isNestedCondition - A boolean indicating whether the query is nested in another query.\n   */\n  public constructor(\n    model: typeof Model,\n    table: string,\n    pgClient: Client,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, table, logs, false, sqlDataSource);\n    this.sqlConnection = pgClient;\n    this.updateTemplate = updateTemplate(sqlDataSource.getDbType(), this.model);\n    this.deleteTemplate = deleteTemplate(table, sqlDataSource.getDbType());\n    this.joinQuery = \"\";\n    this.isNestedCondition = isNestedCondition;\n  }\n\n  public async delete(options: DeleteOptions = {}): Promise<number> {\n    const { ignoreBeforeDeleteHook } = options || {};\n    if (!ignoreBeforeDeleteHook) {\n      this.model.beforeDelete(this);\n    }\n\n    this.whereQuery = this.whereTemplate.convertPlaceHolderToValue(\n      this.whereQuery,\n    );\n    const query = this.deleteTemplate.massiveDelete(\n      this.whereQuery,\n      this.joinQuery,\n    );\n\n    log(query, this.logs, this.params);\n    try {\n      const result = await this.sqlConnection.query<T>(query, this.params);\n      if (!result.rows) {\n        return 0;\n      }\n\n      return result.rowCount || 0;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  public async softDelete(options?: SoftDeleteOptions<T>): Promise<number> {\n    const {\n      column = \"deletedAt\",\n      value = DateTime.local().toISO(),\n      ignoreBeforeDeleteHook = false,\n    } = options || {};\n    if (!ignoreBeforeDeleteHook) {\n      this.model.beforeDelete(this);\n    }\n\n    let { query, params } = this.updateTemplate.massiveUpdate(\n      [column as string],\n      [value],\n      this.whereQuery,\n      this.joinQuery,\n    );\n\n    params = [...params, ...this.params];\n\n    log(query, this.logs, params);\n    try {\n      const result = await this.sqlConnection.query<T>(query, params);\n      if (!result.rows) {\n        return 0;\n      }\n\n      return result.rowCount || 0;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): PostgresDeleteQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): PostgresDeleteQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   * @description Build more complex where conditions.\n   * @param cb\n   */\n  public whereBuilder(\n    cb: (queryBuilder: PostgresDeleteQueryBuilder<T>) => void,\n  ): this {\n    const queryBuilder = new PostgresDeleteQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(queryBuilder as unknown as PostgresDeleteQueryBuilder<T>);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  /**\n   * @description Build complex OR-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public orWhereBuilder(\n    cb: (queryBuilder: PostgresDeleteQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new PostgresDeleteQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as PostgresDeleteQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  /**\n   * @description Build complex AND-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public andWhereBuilder(\n    cb: (queryBuilder: PostgresDeleteQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new PostgresDeleteQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as PostgresDeleteQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n}\n","import { Model } from \"../models/model\";\nimport {\n  FindOneType,\n  FindType,\n  UnrestrictedFindOneType,\n  UnrestrictedFindType,\n} from \"../models/model_manager/model_manager_types\";\nimport pg from \"pg\";\nimport { log, queryError } from \"../../utils/logger\";\nimport { ModelManager } from \"../models/model_manager/model_manager\";\nimport { PostgresQueryBuilder } from \"./postgres_query_builder\";\nimport { parseDatabaseDataIntoModelResponse } from \"../serializer\";\nimport { PostgresUpdateQueryBuilder } from \"./postgres_update_query_builder\";\nimport { PostgresDeleteQueryBuilder } from \"./postgres_delete_query_builder\";\nimport { SqlDataSource } from \"../../../src/sql/sql_data_source\";\nimport SqlModelManagerUtils from \"../models/model_manager/model_manager_utils\";\n\nexport class PostgresModelManager<T extends Model> extends ModelManager<T> {\n  protected pgConnection: pg.Client;\n  protected sqlModelManagerUtils: SqlModelManagerUtils<T>;\n\n  /**\n   * Constructor for Postgres_model_manager class.\n   *\n   * @param {typeof Model} model - Model constructor.\n   * @param {Pool} pgConnection - PostgreSQL connection pool.\n   * @param {boolean} logs - Flag to enable or disable logging.\n   */\n  constructor(\n    model: typeof Model,\n    pgConnection: pg.Client,\n    logs: boolean,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, logs, sqlDataSource);\n    this.pgConnection = pgConnection;\n    this.sqlModelManagerUtils = new SqlModelManagerUtils(\n      \"postgres\",\n      pgConnection,\n    );\n  }\n\n  /**\n   * Find method to retrieve multiple records from the database based on the input conditions.\n   *\n   * @param {FindType} input - Optional query parameters for filtering, ordering, and pagination.\n   * @returns Promise resolving to an array of models.\n   */\n  public async find(\n    input?: FindType<T> | UnrestrictedFindType<T>,\n  ): Promise<T[]> {\n    try {\n      if (!input) {\n        return await this.query().many();\n      }\n\n      const query = this.query();\n      if (input.select) {\n        query.select(...(input.select as string[]));\n      }\n\n      if (input.relations) {\n        query.addRelations(input.relations);\n      }\n\n      if (input.where) {\n        Object.entries(input.where).forEach(([key, value]) => {\n          query.where(key, value);\n        });\n      }\n\n      if (input.orderBy) {\n        query.orderBy(input.orderBy.columns, input.orderBy.type);\n      }\n\n      if (input.limit) {\n        query.limit(input.limit);\n      }\n\n      if (input.offset) {\n        query.offset(input.offset);\n      }\n\n      if (input.groupBy) {\n        query.groupBy(...input.groupBy);\n      }\n\n      return await query.many({ ignoreHooks: input.ignoreHooks || [] });\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record from the database based on the input conditions.\n   *\n   * @param {FindOneType} input - query parameters for filtering and selecting a single record.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOne(\n    input: FindOneType<T> | UnrestrictedFindOneType<T>,\n  ): Promise<T | null> {\n    try {\n      const query = this.query();\n      if (input.select) {\n        query.select(...(input.select as string[]));\n      }\n\n      if (input.relations) {\n        query.addRelations(input.relations);\n      }\n\n      if (input.where) {\n        Object.entries(input.where).forEach(([key, value]) => {\n          query.where(key, value);\n        });\n      }\n\n      return await query.one({\n        throwErrorOnNull: input.throwErrorOnNull || false,\n        ignoreHooks: input.ignoreHooks || [],\n      });\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record by its PK from the database.\n   *\n   * @param {string | number | boolean} value - PK value of the record to retrieve.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOneByPrimaryKey(\n    value: string | number | boolean,\n    throwErrorOnNull: boolean = false,\n  ): Promise<T | null> {\n    try {\n      if (!this.model.primaryKey) {\n        throw new Error(\n          \"Model \" +\n            this.model.table +\n            \" has no primary key to be retrieved by\",\n        );\n      }\n\n      return await this.query()\n        .where(this.model.primaryKey as string, \"=\", value)\n        .one({ throwErrorOnNull });\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Save a new model instance to the database.\n   *\n   * @param {Model} model - Model instance to be saved.\n   * @param {MysqlTransaction} trx - MysqlTransaction to be used on the save operation.\n   * @returns Promise resolving to the saved model or null if saving fails.\n   */\n  public async insert(model: Partial<T>): Promise<T | null> {\n    this.model.beforeInsert(model as T);\n    const { query, params } = this.sqlModelManagerUtils.parseInsert(\n      model as T,\n      this.model,\n      this.sqlDataSource.getDbType(),\n    );\n\n    try {\n      const { query, params } = this.sqlModelManagerUtils.parseInsert(\n        model as T,\n        this.model,\n        this.sqlDataSource.getDbType(),\n      );\n      log(query, this.logs, params);\n      const { rows } = await this.pgConnection.query(query, params);\n      const insertedModel = rows[0] as T;\n      if (!insertedModel) {\n        throw new Error(rows[0]);\n      }\n\n      return (await parseDatabaseDataIntoModelResponse(\n        [insertedModel],\n        this.model,\n      )) as T;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Create multiple model instances in the database.\n   *\n   * @param {Model} models - Model instance to be saved.\n   * @param {Transaction} trx - MysqlTransaction to be used on the save operation.\n   * @returns Promise resolving to an array of saved models or null if saving fails.\n   */\n  public async insertMany(models: Partial<T>[]): Promise<T[]> {\n    models.forEach((model) => this.model.beforeInsert(model as T));\n    const { query, params } = this.sqlModelManagerUtils.parseMassiveInsert(\n      models as T[],\n      this.model,\n      this.sqlDataSource.getDbType(),\n    );\n\n    try {\n      const { query, params } = this.sqlModelManagerUtils.parseMassiveInsert(\n        models as T[],\n        this.model,\n        this.sqlDataSource.getDbType(),\n      );\n\n      log(query, this.logs, params);\n      const { rows } = await this.pgConnection.query(query, params);\n      const insertedModel = rows as T[];\n      if (!insertedModel.length) {\n        return [];\n      }\n\n      const insertModelPromise = insertedModel.map(\n        async (model) =>\n          (await parseDatabaseDataIntoModelResponse([model], this.model)) as T,\n      );\n      return await Promise.all(insertModelPromise);\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Update an existing model instance in the database.\n   * @param {Model} model - Model instance to be updated.\n   * @param {Transaction} trx - Transaction to be used on the update operation.\n   * @returns Promise resolving to the updated model or null if updating fails.\n   */\n  public async updateRecord(model: T): Promise<T | null> {\n    const { table, primaryKey } = this.model;\n    if (!primaryKey) {\n      throw new Error(\n        \"Model \" + table + \" has no primary key to be updated, try save\",\n      );\n    }\n\n    const { query, params } = this.sqlModelManagerUtils.parseUpdate(\n      model,\n      this.model,\n      this.sqlDataSource.getDbType(),\n    );\n\n    try {\n      const { query, params } = this.sqlModelManagerUtils.parseUpdate(\n        model,\n        this.model,\n        this.sqlDataSource.getDbType(),\n      );\n      log(query, this.logs, params);\n      await this.pgConnection.query(query, params);\n      if (!primaryKey) {\n        return null;\n      }\n\n      return await this.findOneByPrimaryKey(\n        model[primaryKey as keyof T] as string | number | boolean,\n      );\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Delete a record from the database from the given model.\n   *\n   * @param {Model} model - Model to delete.\n   * @param {Transaction} trx - Transaction to be used on the delete operation.\n   * @returns Promise resolving to the deleted model or null if deleting fails.\n   */\n  public async deleteRecord(model: T): Promise<T | null> {\n    try {\n      if (!this.model.primaryKey) {\n        throw new Error(\n          \"Model \" +\n            this.model.table +\n            \" has no primary key to be deleted from\",\n        );\n      }\n\n      const { query, params } = this.sqlModelManagerUtils.parseDelete(\n        this.model.table,\n        this.model.primaryKey,\n        model[this.model.primaryKey as keyof T] as string,\n      );\n\n      log(query, this.logs, params);\n      await this.pgConnection.query(query, params);\n      return model;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Create and return a new instance of the Mysql_query_builder for building more complex SQL queries.\n   *\n   * @returns {MysqlQueryBuilder<Model>} - Instance of Mysql_query_builder.\n   */\n  public query(): PostgresQueryBuilder<T> {\n    return new PostgresQueryBuilder<T>(\n      this.model,\n      this.model.table,\n      this.pgConnection,\n      this.logs,\n      false,\n      this.sqlDataSource,\n    );\n  }\n\n  /**\n   * @description Returns an update query builder.\n   */\n  public update(): PostgresUpdateQueryBuilder<T> {\n    return new PostgresUpdateQueryBuilder<T>(\n      this.model,\n      this.model.table,\n      this.pgConnection,\n      this.logs,\n      false,\n      this.sqlDataSource,\n    );\n  }\n\n  /**\n   * @description Returns a delete query builder.\n   */\n  public deleteQuery(): PostgresDeleteQueryBuilder<T> {\n    return new PostgresDeleteQueryBuilder<T>(\n      this.model,\n      this.model.table,\n      this.pgConnection,\n      this.logs,\n      false,\n      this.sqlDataSource,\n    );\n  }\n}\n","import { getBaseModelInstance, Model } from \"../models/model\";\nimport { log, queryError } from \"../../utils/logger\";\nimport {\n  OneOptions,\n  QueryBuilder,\n  ModelQueryBuilder,\n  ManyOptions,\n} from \"../query_builder/query_builder\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport { getPaginationMetadata, PaginatedData } from \"../pagination\";\nimport { parseDatabaseDataIntoModelResponse } from \"../serializer\";\nimport {\n  DynamicColumnType,\n  RelationType,\n  SelectableType,\n} from \"../models/model_manager/model_manager_types\";\nimport { SqlDataSource } from \"../../../src/sql/sql_data_source\";\nimport { convertCase } from \"../../utils/case_utils\";\nimport SqlModelManagerUtils from \"../models/model_manager/model_manager_utils\";\nimport sqlite3 from \"sqlite3\";\n\nexport class SqlLiteQueryBuilder<T extends Model> extends QueryBuilder<T> {\n  protected sqLiteConnection: sqlite3.Database;\n  protected sqliteModelManagerUtils: SqlModelManagerUtils<T>;\n\n  public constructor(\n    model: typeof Model,\n    table: string,\n    sqLiteConnection: sqlite3.Database,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, table, logs, sqlDataSource);\n    this.sqLiteConnection = sqLiteConnection;\n    this.isNestedCondition = isNestedCondition;\n    this.sqliteModelManagerUtils = new SqlModelManagerUtils<T>(\n      \"sqlite\",\n      this.sqLiteConnection,\n    );\n  }\n\n  public async one(\n    options: OneOptions = { throwErrorOnNull: false },\n  ): Promise<T | null> {\n    // hook query builder\n    if (!options.ignoreHooks?.includes(\"beforeFetch\")) {\n      this.model.beforeFetch(this);\n    }\n\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      this.selectQuery = this.selectTemplate.selectColumns(`${this.table}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    query = this.whereTemplate.convertPlaceHolderToValue(query);\n\n    // limit to 1\n    this.limit(1);\n    query += this.groupFooterQuery();\n\n    query = query.trim();\n    log(query, this.logs, this.params);\n    try {\n      const results = await this.promisifyQuery<T>(query, this.params);\n      if (!results.length) {\n        return null;\n      }\n\n      const result = results[0];\n      if (options.throwErrorOnNull && !result) {\n        throw new Error(\"ERR_NOT_FOUND\");\n      }\n\n      const modelInstance = getBaseModelInstance<T>();\n      await this.mergeRawPacketIntoModel(modelInstance, result, this.model);\n      const relationModels =\n        await this.sqliteModelManagerUtils.parseQueryBuilderRelations(\n          [modelInstance],\n          this.model,\n          this.relations,\n          this.logs,\n        );\n\n      const model = (await parseDatabaseDataIntoModelResponse(\n        [modelInstance],\n        this.model,\n        relationModels,\n      )) as T;\n\n      return !options.ignoreHooks?.includes(\"afterFetch\")\n        ? ((await this.model.afterFetch([model]))[0] as T)\n        : model;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  public async oneOrFail(options?: {\n    ignoreHooks: OneOptions[\"ignoreHooks\"];\n  }): Promise<T> {\n    const model = await this.one({\n      throwErrorOnNull: true,\n      ignoreHooks: options?.ignoreHooks,\n    });\n    return model as T;\n  }\n\n  public async many(options: ManyOptions = {}): Promise<T[]> {\n    // hook query builder\n    if (!options.ignoreHooks?.includes(\"beforeFetch\")) {\n      this.model.beforeFetch(this);\n    }\n\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      this.selectQuery = this.selectTemplate.selectColumns(`${this.table}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    query += this.groupFooterQuery();\n    query = this.whereTemplate.convertPlaceHolderToValue(query);\n    query = query.trim();\n\n    log(query, this.logs, this.params);\n    try {\n      const results = await this.promisifyQuery<T[]>(query, this.params);\n      const modelPromises = results.map(async (result) => {\n        const modelInstance = getBaseModelInstance<T>();\n        await this.mergeRawPacketIntoModel(modelInstance, result, this.model);\n\n        return modelInstance as T;\n      });\n\n      const models = await Promise.all(modelPromises);\n      const relationModels =\n        await this.sqliteModelManagerUtils.parseQueryBuilderRelations(\n          models,\n          this.model,\n          this.relations,\n          this.logs,\n        );\n\n      const serializedModels = await parseDatabaseDataIntoModelResponse(\n        models,\n        this.model,\n        relationModels,\n      );\n      if (!serializedModels) {\n        return [];\n      }\n\n      if (!options.ignoreHooks?.includes(\"afterFetch\")) {\n        await this.model.afterFetch(serializedModels as T[]);\n      }\n\n      return (\n        Array.isArray(serializedModels) ? serializedModels : [serializedModels]\n      ) as T[];\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  public whereBuilder(\n    cb: (queryBuilder: SqlLiteQueryBuilder<T>) => void,\n  ): this {\n    const queryBuilder = new SqlLiteQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqLiteConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(queryBuilder as unknown as SqlLiteQueryBuilder<T>);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  public orWhereBuilder(\n    cb: (queryBuilder: SqlLiteQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new SqlLiteQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqLiteConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as SqlLiteQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  public andWhereBuilder(\n    cb: (queryBuilder: SqlLiteQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new SqlLiteQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqLiteConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n    );\n    cb(nestedBuilder as unknown as SqlLiteQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  public async raw<T>(query: string, params: any[] = []) {\n    return await this.promisifyQuery<T>(query, params);\n  }\n\n  public async getCount(\n    options: { ignoreHooks: boolean } = { ignoreHooks: false },\n  ): Promise<number> {\n    if (options.ignoreHooks) {\n      const result = (await this.promisifyQuery<T>(\n        \"SELECT COUNT(*) as total FROM \" + this.table,\n        [],\n      )) as any;\n      return +result[0].total;\n    }\n\n    this.select(\"COUNT(*) as total\");\n    const result = await this.one();\n    return result ? +result.extraColumns.total : 0;\n  }\n\n  public async getSum(column: SelectableType<T>): Promise<number>;\n  public async getSum(column: string): Promise<number>;\n  public async getSum(\n    column: SelectableType<T> | string,\n    options: { ignoreHooks: boolean } = { ignoreHooks: false },\n  ): Promise<number> {\n    if (!options.ignoreHooks) {\n      const result = (await this.promisifyQuery(\n        `SELECT SUM(\"${column as string}) as total FROM ` + this.table,\n        [],\n      )) as any;\n      return +result[0].total || 0;\n    }\n\n    column = convertCase(column as string, this.model.databaseCaseConvention);\n    this.select(`SUM(${column as string}) as total`);\n    const result = await this.one();\n    return result ? +result.extraColumns.total : 0;\n  }\n\n  public async paginate(\n    page: number,\n    limit: number,\n    options?: ManyOptions,\n  ): Promise<PaginatedData<T>> {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    this.offsetQuery = this.selectTemplate.offset((page - 1) * limit);\n\n    const originalSelectQuery = this.selectQuery;\n    this.select(\"COUNT(*) as total\");\n    const total = await this.many(options);\n\n    this.selectQuery = originalSelectQuery;\n    const models = await this.many(options);\n\n    const paginationMetadata = getPaginationMetadata(\n      page,\n      limit,\n      +total[0].extraColumns[\"total\"] as number,\n    );\n    let data =\n      (await parseDatabaseDataIntoModelResponse(models, this.model)) || [];\n    if (Array.isArray(data)) {\n      data = data.filter((model) => model !== null);\n    }\n\n    return {\n      paginationMetadata,\n      data: Array.isArray(data) ? data : [data],\n    } as PaginatedData<T>;\n  }\n\n  // SELECT\n  public select(...columns: string[]): SqlLiteQueryBuilder<T>;\n  public select(\n    ...columns: (SelectableType<T> | \"*\")[]\n  ): SqlLiteQueryBuilder<T>;\n  public select(\n    ...columns: (SelectableType<T> | \"*\" | string)[]\n  ): SqlLiteQueryBuilder<T> {\n    this.selectQuery = this.selectTemplate.selectColumns(\n      ...(columns as string[]),\n    );\n    return this;\n  }\n\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): SqlLiteQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): SqlLiteQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.leftJoin();\n    return this;\n  }\n\n  public addRelations(relations: RelationType<T>[]): SqlLiteQueryBuilder<T> {\n    this.relations = relations as string[];\n    return this;\n  }\n\n  public addDynamicColumns(\n    dynamicColumns: DynamicColumnType<T>[],\n  ): ModelQueryBuilder<T> {\n    this.dynamicColumns = dynamicColumns as string[];\n    return this;\n  }\n\n  public groupBy(...columns: SelectableType<T>[]): this;\n  public groupBy(...columns: string[]): this;\n  public groupBy(...columns: (SelectableType<T> | string)[]): this {\n    this.groupByQuery = this.selectTemplate.groupBy(...(columns as string[]));\n    return this;\n  }\n\n  public groupByRaw(query: string): this {\n    this.groupByQuery = ` GROUP BY ${query}`;\n    return this;\n  }\n\n  public orderBy(columns: SelectableType<T>[], order: \"ASC\" | \"DESC\"): this;\n  public orderBy(columns: string[], order: \"ASC\" | \"DESC\"): this;\n  public orderBy(\n    columns: (SelectableType<T> | string)[],\n    order: \"ASC\" | \"DESC\",\n  ): this {\n    this.orderByQuery = this.selectTemplate.orderBy(columns as string[], order);\n    return this;\n  }\n\n  public orderByRaw(query: string): this {\n    this.orderByQuery = ` ORDER BY ${query}`;\n    return this;\n  }\n\n  public limit(limit: number) {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    return this;\n  }\n\n  public offset(offset: number) {\n    this.offsetQuery = this.selectTemplate.offset(offset);\n    return this;\n  }\n\n  public copy(): ModelQueryBuilder<T> {\n    const queryBuilder = new SqlLiteQueryBuilder<T>(\n      this.model as typeof Model,\n      this.table,\n      this.sqLiteConnection,\n      this.logs,\n      this.isNestedCondition,\n      this.sqlDataSource,\n    );\n\n    queryBuilder.selectQuery = this.selectQuery;\n    queryBuilder.whereQuery = this.whereQuery;\n    queryBuilder.joinQuery = this.joinQuery;\n    queryBuilder.groupByQuery = this.groupByQuery;\n    queryBuilder.orderByQuery = this.orderByQuery;\n    queryBuilder.limitQuery = this.limitQuery;\n    queryBuilder.offsetQuery = this.offsetQuery;\n    queryBuilder.params = [...this.params];\n    queryBuilder.relations = [...this.relations];\n    return queryBuilder;\n  }\n\n  protected groupFooterQuery(): string {\n    return (\n      this.groupByQuery + this.orderByQuery + this.limitQuery + this.offsetQuery\n    );\n  }\n\n  private promisifyQuery<T>(query: string, params: any): Promise<T[]> {\n    return new Promise<T[]>((resolve, reject) => {\n      this.sqLiteConnection.all<T>(query, params, (err, result) => {\n        if (err) {\n          reject(err);\n        }\n\n        if (!result) {\n          resolve([] as T[]);\n        }\n\n        if (!Array.isArray(result)) {\n          resolve([result]);\n        }\n\n        resolve(result);\n      });\n    });\n  }\n}\n","import { Model } from \"../models/model\";\nimport { log, queryError } from \"../../utils/logger\";\nimport updateTemplate from \"../resources/query/UPDATE\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport { SqlDataSource } from \"../../../src/sql/sql_data_source\";\nimport {\n  ModelUpdateQueryBuilder,\n  WithDataOptions,\n} from \"../query_builder/update_query_builder\";\nimport sqlite3 from \"sqlite3\";\nimport SqlModelManagerUtils from \"../models/model_manager/model_manager_utils\";\n\nexport class SqliteUpdateQueryBuilder<\n  T extends Model,\n> extends ModelUpdateQueryBuilder<T> {\n  protected sqlConnection: sqlite3.Database;\n  protected joinQuery = \"\";\n  protected updateTemplate: ReturnType<typeof updateTemplate>;\n  protected isNestedCondition = false;\n  protected sqlModelManagerUtils: SqlModelManagerUtils<T>;\n\n  /**\n   * @description Constructs a Mysql_query_builder instance.\n   * @param model - The model class associated with the table.\n   * @param table - The name of the table.\n   * @param sqlLiteCOnnection - The MySQL connection pool.\n   * @param logs - A boolean indicating whether to log queries.\n   * @param isNestedCondition - A boolean indicating whether the query is nested in another query.\n   */\n  public constructor(\n    model: typeof Model,\n    table: string,\n    sqlLiteConnection: sqlite3.Database,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n    sqlModelManagerUtils: SqlModelManagerUtils<T>,\n  ) {\n    super(model, table, logs, false, sqlDataSource);\n    this.sqlConnection = sqlLiteConnection;\n    this.updateTemplate = updateTemplate(\n      this.sqlDataSource.getDbType(),\n      this.model,\n    );\n    this.joinQuery = \"\";\n    this.isNestedCondition = isNestedCondition;\n    this.sqlModelManagerUtils = sqlModelManagerUtils;\n  }\n\n  /**\n   * @description Updates a record in the database.\n   * @param data - The data to update.\n   * @param trx - The transaction to run the query in.\n   * @returns The updated records.\n   */\n  public async withData(\n    data: Partial<T>,\n    options?: WithDataOptions,\n  ): Promise<number> {\n    const { ignoreBeforeUpdateHook } = options || {};\n    if (!ignoreBeforeUpdateHook) {\n      this.model.beforeUpdate(this);\n    }\n\n    const columns = Object.keys(data);\n    const values = Object.values(data);\n    this.whereQuery = this.whereTemplate.convertPlaceHolderToValue(\n      this.whereQuery,\n      values.length + 1,\n    );\n    const { query, params } = this.updateTemplate.massiveUpdate(\n      columns,\n      values,\n      this.whereQuery,\n      this.joinQuery,\n    );\n\n    params.push(...this.params);\n\n    log(query, this.logs, params);\n    try {\n      const result = await this.promisifyQuery(query, params);\n      return result;\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): SqliteUpdateQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): SqliteUpdateQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   * @description Build more complex where conditions.\n   * @param cb\n   */\n  public whereBuilder(\n    cb: (queryBuilder: SqliteUpdateQueryBuilder<T>) => void,\n  ): this {\n    const queryBuilder = new SqliteUpdateQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n      this.sqlModelManagerUtils,\n    );\n    cb(queryBuilder as unknown as SqliteUpdateQueryBuilder<T>);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  /**\n   * @description Build complex OR-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public orWhereBuilder(\n    cb: (queryBuilder: SqliteUpdateQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new SqliteUpdateQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n      this.sqlModelManagerUtils,\n    );\n    cb(nestedBuilder as unknown as SqliteUpdateQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  /**\n   * @description Build complex AND-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public andWhereBuilder(\n    cb: (queryBuilder: SqliteUpdateQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new SqliteUpdateQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n      this.sqlModelManagerUtils,\n    );\n    cb(nestedBuilder as unknown as SqliteUpdateQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  private promisifyQuery(query: string, params: any): Promise<number> {\n    return new Promise<number>((resolve, reject) => {\n      this.sqlConnection.run(query, params, function (this: any, err: any) {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(this.changes);\n      });\n    });\n  }\n}\n","import { Model } from \"../models/model\";\nimport { log, queryError } from \"../../utils/logger\";\nimport deleteTemplate from \"../resources/query/DELETE\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport { SqlDataSource } from \"../../../src/sql/sql_data_source\";\nimport { DateTime } from \"luxon\";\nimport updateTemplate from \"../resources/query/UPDATE\";\nimport {\n  DeleteOptions,\n  ModelDeleteQueryBuilder,\n  SoftDeleteOptions,\n} from \"../query_builder/delete_query_builder\";\nimport sqlite3 from \"sqlite3\";\nimport SqlModelManagerUtils from \"../models/model_manager/model_manager_utils\";\n\nexport class SqlLiteDeleteQueryBuilder<\n  T extends Model,\n> extends ModelDeleteQueryBuilder<T> {\n  protected sqlConnection: sqlite3.Database;\n  protected joinQuery;\n  protected updateTemplate: ReturnType<typeof updateTemplate>;\n  protected deleteTemplate: ReturnType<typeof deleteTemplate>;\n  protected isNestedCondition = false;\n  protected sqlModelManagerUtils: SqlModelManagerUtils<T>;\n\n  /**\n   * @description Constructs a Mysql_query_builder instance.\n   * @param model - The model class associated with the table.\n   * @param table - The name of the table.\n   * @param sqlConnection - The Sqlite connection pool.\n   * @param logs - A boolean indicating whether to log queries.\n   * @param isNestedCondition - A boolean indicating whether the query is nested in another query.\n   */\n  public constructor(\n    model: typeof Model,\n    table: string,\n    sqlConnection: sqlite3.Database,\n    logs: boolean,\n    isNestedCondition = false,\n    sqlDataSource: SqlDataSource,\n    sqlModelManagerUtils: SqlModelManagerUtils<T>,\n  ) {\n    super(model, table, logs, false, sqlDataSource);\n    this.sqlConnection = sqlConnection;\n    this.updateTemplate = updateTemplate(sqlDataSource.getDbType(), this.model);\n    this.deleteTemplate = deleteTemplate(table, sqlDataSource.getDbType());\n    this.joinQuery = \"\";\n    this.isNestedCondition = isNestedCondition;\n    this.isNestedCondition = isNestedCondition;\n    this.sqlModelManagerUtils = sqlModelManagerUtils;\n  }\n\n  public async delete(options: DeleteOptions = {}): Promise<number> {\n    const { ignoreBeforeDeleteHook } = options || {};\n    if (!ignoreBeforeDeleteHook) {\n      this.model.beforeDelete(this);\n    }\n\n    this.whereQuery = this.whereTemplate.convertPlaceHolderToValue(\n      this.whereQuery,\n    );\n    const query = this.deleteTemplate.massiveDelete(\n      this.whereQuery,\n      this.joinQuery,\n    );\n\n    log(query, this.logs, this.params);\n    try {\n      return await this.promisifyQuery(query, this.params);\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  public async softDelete(options?: SoftDeleteOptions<T>): Promise<number> {\n    const {\n      column = \"deletedAt\",\n      value = DateTime.local().toISO(),\n      ignoreBeforeDeleteHook = false,\n    } = options || {};\n    if (!ignoreBeforeDeleteHook) {\n      this.model.beforeDelete(this);\n    }\n\n    let { query, params } = this.updateTemplate.massiveUpdate(\n      [column as string],\n      [value],\n      this.whereQuery,\n      this.joinQuery,\n    );\n\n    params = [...params, ...this.params];\n\n    log(query, this.logs, params);\n    try {\n      return await this.promisifyQuery(query, params);\n    } catch (error) {\n      queryError(query);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): SqlLiteDeleteQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): SqlLiteDeleteQueryBuilder<T> {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn as string,\n      foreignColumn as string,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   * @description Build more complex where conditions.\n   * @param cb\n   */\n  public whereBuilder(\n    cb: (queryBuilder: SqlLiteDeleteQueryBuilder<T>) => void,\n  ): this {\n    const queryBuilder = new SqlLiteDeleteQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n      this.sqlModelManagerUtils,\n    );\n    cb(queryBuilder as unknown as SqlLiteDeleteQueryBuilder<T>);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  /**\n   * @description Build complex OR-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public orWhereBuilder(\n    cb: (queryBuilder: SqlLiteDeleteQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new SqlLiteDeleteQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n      this.sqlModelManagerUtils,\n    );\n    cb(nestedBuilder as unknown as SqlLiteDeleteQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  /**\n   * @description Build complex AND-based where conditions.\n   * @param cb Callback function that takes a query builder and adds conditions to it.\n   */\n  public andWhereBuilder(\n    cb: (queryBuilder: SqlLiteDeleteQueryBuilder<T>) => void,\n  ): this {\n    const nestedBuilder = new SqlLiteDeleteQueryBuilder(\n      this.model as typeof Model,\n      this.table,\n      this.sqlConnection,\n      this.logs,\n      true,\n      this.sqlDataSource,\n      this.sqlModelManagerUtils,\n    );\n    cb(nestedBuilder as unknown as SqlLiteDeleteQueryBuilder<T>);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  private promisifyQuery(query: string, params: any): Promise<number> {\n    return new Promise<number>((resolve, reject) => {\n      this.sqlConnection.run(query, params, function (this: any, err: any) {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(this.changes);\n      });\n    });\n  }\n}\n","import { Model } from \"../models/model\";\nimport {\n  FindOneType,\n  FindType,\n  UnrestrictedFindOneType,\n  UnrestrictedFindType,\n} from \"../models/model_manager/model_manager_types\";\nimport { log, queryError } from \"../../utils/logger\";\nimport { ModelManager } from \"../models/model_manager/model_manager\";\nimport { SqlDataSource } from \"../../../src/sql/sql_data_source\";\nimport SqlModelManagerUtils from \"../models/model_manager/model_manager_utils\";\nimport sqlite3 from \"sqlite3\";\nimport { SqlLiteQueryBuilder } from \"./sql_lite_query_builder\";\nimport { SqliteUpdateQueryBuilder } from \"./sql_lite_update_query_builder\";\nimport { SqlLiteDeleteQueryBuilder } from \"./sql_lite_delete_query_builder\";\n\nexport class SqliteModelManager<T extends Model> extends ModelManager<T> {\n  protected sqLiteConnection: sqlite3.Database;\n  protected sqlModelManagerUtils: SqlModelManagerUtils<T>;\n\n  /**\n   * Constructor for SqLiteModelManager class.\n   *\n   * @param {typeof Model} model - Model constructor.\n   * @param {Pool} sqLiteConnection - sqlite connection.\n   * @param {boolean} logs - Flag to enable or disable logging.\n   */\n  constructor(\n    model: typeof Model,\n    sqLiteConnection: sqlite3.Database,\n    logs: boolean,\n    sqlDataSource: SqlDataSource,\n  ) {\n    super(model, logs, sqlDataSource);\n    this.sqLiteConnection = sqLiteConnection;\n    this.sqlModelManagerUtils = new SqlModelManagerUtils<T>(\n      \"sqlite\",\n      sqLiteConnection,\n    );\n  }\n\n  /**\n   * Find method to retrieve multiple records from the database based on the input conditions.\n   *\n   * @param {FindType} input - Optional query parameters for filtering, ordering, and pagination.\n   * @returns Promise resolving to an array of models.\n   */\n  public async find(\n    input?: FindType<T> | UnrestrictedFindType<T>,\n  ): Promise<T[]> {\n    try {\n      if (!input) {\n        return await this.query().many();\n      }\n\n      const query = this.query();\n      if (input.select) {\n        query.select(...(input.select as string[]));\n      }\n\n      if (input.relations) {\n        query.addRelations(input.relations);\n      }\n\n      if (input.where) {\n        Object.entries(input.where).forEach(([key, value]) => {\n          query.where(key, value);\n        });\n      }\n\n      if (input.orderBy) {\n        query.orderBy(input.orderBy.columns, input.orderBy.type);\n      }\n\n      if (input.limit) {\n        query.limit(input.limit);\n      }\n\n      if (input.offset) {\n        query.offset(input.offset);\n      }\n\n      if (input.groupBy) {\n        query.groupBy(...input.groupBy);\n      }\n\n      return await query.many({ ignoreHooks: input.ignoreHooks || [] });\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record from the database based on the input conditions.\n   *\n   * @param {FindOneType} input - query parameters for filtering and selecting a single record.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOne(\n    input: FindOneType<T> | UnrestrictedFindOneType<T>,\n  ): Promise<T | null> {\n    try {\n      const query = this.query();\n      if (input.select) {\n        query.select(...(input.select as string[]));\n      }\n\n      if (input.relations) {\n        query.addRelations(input.relations);\n      }\n\n      if (input.where) {\n        Object.entries(input.where).forEach(([key, value]) => {\n          query.where(key, value);\n        });\n      }\n\n      return await query.one({\n        throwErrorOnNull: input.throwErrorOnNull || false,\n        ignoreHooks: input.ignoreHooks || [],\n      });\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record by its PK from the database.\n   *\n   * @param {string | number | boolean} value - PK of the record to retrieve, hooks will not have any effect, since it's a direct query for the PK.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOneByPrimaryKey(\n    value: string | number | boolean,\n    throwErrorOnNull: boolean = false,\n  ): Promise<T | null> {\n    try {\n      if (!this.model.primaryKey) {\n        throw new Error(\n          \"Model \" +\n            this.model.table +\n            \" has no primary key to be retrieved by\",\n        );\n      }\n\n      return await this.query()\n        .where(this.model.primaryKey as string, value)\n        .one({\n          throwErrorOnNull,\n        });\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Save a new model instance to the database.\n   *\n   * @param {Model} model - Model instance to be saved.\n   * @param {SqliteTransaction} trx - SqliteTransaction to be used on the save operation.\n   * @returns Promise resolving to the saved model or null if saving fails.\n   */\n  public async insert(model: Partial<T>): Promise<T | null> {\n    this.model.beforeInsert(model as T);\n    const { query, params } = this.sqlModelManagerUtils.parseInsert(\n      model as T,\n      this.model,\n      this.sqlDataSource.getDbType(),\n    );\n\n    try {\n      const { query, params } = this.sqlModelManagerUtils.parseInsert(\n        model as T,\n        this.model,\n        this.sqlDataSource.getDbType(),\n      );\n\n      log(query, this.logs, params);\n      return (await this.promisifyQuery<T>(query, params, {\n        isCreate: true,\n        models: model as T,\n      })) as T;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Create multiple model instances in the database.\n   *\n   * @param {Model} model - Model instance to be saved.\n   * @param {SqliteTransaction} trx - SqliteTransaction to be used on the save operation.\n   * @returns Promise resolving to an array of saved models or null if saving fails.\n   */\n  public async insertMany(models: Partial<T>[]): Promise<T[]> {\n    models.forEach((model) => {\n      this.model.beforeInsert(model as T);\n    });\n\n    const { query, params } = this.sqlModelManagerUtils.parseMassiveInsert(\n      models as T[],\n      this.model,\n      this.sqlDataSource.getDbType(),\n    );\n\n    try {\n      const { query, params } = this.sqlModelManagerUtils.parseMassiveInsert(\n        models as T[],\n        this.model,\n        this.sqlDataSource.getDbType(),\n      );\n      log(query, this.logs, params);\n      return (await this.promisifyQuery<T[]>(query, params, {\n        isInsertMany: true,\n        models: models as T[],\n      })) as T[];\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Update an existing model instance in the database.\n   * @param {Model} model - Model instance to be updated.\n   * @param {SqliteTransaction} trx - SqliteTransaction to be used on the update operation.\n   * @returns Promise resolving to the updated model or null if updating fails.\n   */\n  public async updateRecord(model: T): Promise<T | null> {\n    if (!this.model.primaryKey) {\n      throw new Error(\n        \"Model \" +\n          this.model.table +\n          \" has no primary key to be updated, try save\",\n      );\n    }\n\n    try {\n      const updateQuery = this.sqlModelManagerUtils.parseUpdate(\n        model,\n        this.model,\n        this.sqlDataSource.getDbType(),\n      );\n\n      log(updateQuery.query, this.logs, updateQuery.params);\n      await this.promisifyQuery<T>(updateQuery.query, updateQuery.params);\n\n      return await this.findOneByPrimaryKey(\n        model[this.model.primaryKey as keyof T] as string | number,\n      );\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Delete a record from the database from the given model.\n   *\n   * @param {Model} model - Model to delete.\n   * @param trx - SqliteTransaction to be used on the delete operation.\n   * @returns Promise resolving to the deleted model or null if deleting fails.\n   */\n  public async deleteRecord(model: T): Promise<T | null> {\n    try {\n      if (!this.model.primaryKey) {\n        throw new Error(\n          \"Model \" +\n            this.model.table +\n            \" has no primary key to be deleted from\",\n        );\n      }\n      const { query, params } = this.sqlModelManagerUtils.parseDelete(\n        this.model.table,\n        this.model.primaryKey,\n        model[this.model.primaryKey as keyof T] as string,\n      );\n\n      log(query, this.logs, params);\n      await this.promisifyQuery<T>(query, params);\n      return model;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"query failed \" + error);\n    }\n  }\n\n  /**\n   * Create and return a new instance of the Mysql_query_builder for building more complex SQL queries.\n   *\n   * @returns {MysqlQueryBuilder<Model>} - Instance of Mysql_query_builder.\n   */\n  public query(): SqlLiteQueryBuilder<T> {\n    return new SqlLiteQueryBuilder<T>(\n      this.model,\n      this.model.table,\n      this.sqLiteConnection,\n      this.logs,\n      false,\n      this.sqlDataSource,\n    );\n  }\n\n  /**\n   * @description Returns an update query builder.\n   */\n  public update(): SqliteUpdateQueryBuilder<T> {\n    return new SqliteUpdateQueryBuilder<T>(\n      this.model,\n      this.model.table,\n      this.sqLiteConnection,\n      this.logs,\n      false,\n      this.sqlDataSource,\n      this.sqlModelManagerUtils,\n    );\n  }\n\n  /**\n   * @description Returns a delete query builder.\n   */\n  public deleteQuery(): SqlLiteDeleteQueryBuilder<T> {\n    return new SqlLiteDeleteQueryBuilder<T>(\n      this.model,\n      this.model.table,\n      this.sqLiteConnection,\n      this.logs,\n      false,\n      this.sqlDataSource,\n      this.sqlModelManagerUtils,\n    );\n  }\n\n  private promisifyQuery<T>(\n    query: string,\n    params: any,\n    options: {\n      isCreate?: boolean;\n      isInsertMany?: boolean;\n      models?: T | T[];\n    } = {\n      isCreate: false,\n      isInsertMany: false,\n      models: [],\n    },\n  ): Promise<T | T[]> {\n    const primaryKeyName = this.model.primaryKey as string;\n    if (options.isCreate || options.isInsertMany) {\n      if (options.isCreate) {\n        const table = this.model.table;\n        const sqLiteConnection = this.sqLiteConnection;\n        return new Promise<T>((resolve, reject) => {\n          this.sqLiteConnection.run(\n            query,\n            params,\n            function (this: any, err: any) {\n              if (err) {\n                return reject(err);\n              }\n\n              const currentModel = options.models as T;\n              const lastID =\n                currentModel[primaryKeyName as keyof T] || this.lastID;\n              const selectQuery = `SELECT * FROM ${table} WHERE ${primaryKeyName} = ?`;\n              sqLiteConnection.get(\n                selectQuery,\n                [lastID],\n                (err: any, row: T) => {\n                  if (err) {\n                    return reject(err);\n                  }\n\n                  resolve(row as T);\n                },\n              );\n            },\n          );\n        });\n      }\n\n      if (!Array.isArray(options.models)) {\n        throw new Error(\n          \"Models should be an array when massive creating on sqlite\",\n        );\n      }\n\n      const models = options.models as T[];\n      const table = this.model.table;\n      const finalResult: T[] = [];\n      const sqLiteConnection = this.sqLiteConnection;\n      return new Promise<T[]>((resolve, reject) => {\n        models.forEach((model) => {\n          const { query, params } = this.sqlModelManagerUtils.parseInsert(\n            model as any,\n            this.model,\n            this.sqlDataSource.getDbType(),\n          );\n\n          this.sqLiteConnection.run(query, params, function (err: any) {\n            if (err) {\n              return reject(err);\n            }\n\n            const lastID = model[primaryKeyName as keyof T] || this.lastID;\n            const selectQuery = `SELECT * FROM ${table} WHERE ${primaryKeyName} = ?`;\n            sqLiteConnection.get(selectQuery, [lastID], (err: any, row: T) => {\n              if (err) {\n                return reject(err);\n              }\n\n              finalResult.push(row as T);\n              if (finalResult.length === models.length) {\n                resolve(finalResult);\n              }\n            });\n          });\n        });\n      });\n    }\n\n    return new Promise<T>((resolve, reject) => {\n      this.sqLiteConnection.all<T>(query, params, (err, rows) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(rows as T);\n      });\n    });\n  }\n}\n","export const BEGIN_TRANSACTION = \"BEGIN; \\n\";\nexport const COMMIT_TRANSACTION = \"COMMIT; \\n\";\nexport const ROLLBACK_TRANSACTION = \"ROLLBACK; \\n\";\n","import { Connection } from \"mysql2/promise\";\nimport { SqlConnectionType, SqlDataSource } from \"./sql_data_source\";\nimport {\n  BEGIN_TRANSACTION,\n  COMMIT_TRANSACTION,\n  ROLLBACK_TRANSACTION,\n} from \"./resources/query/TRANSACTION\";\nimport { Client } from \"pg\";\nimport { Database } from \"sqlite3\";\nimport { log } from \"../utils/logger\";\n\nexport class Transaction {\n  public sqlDataSource: SqlDataSource;\n  public sqlConnection: SqlConnectionType;\n  private readonly logs: boolean;\n\n  constructor(sqlDataSource: SqlDataSource, logs: boolean = false) {\n    this.sqlDataSource = sqlDataSource;\n    this.sqlConnection = this.sqlDataSource.getCurrentConnection();\n    this.logs = logs;\n  }\n\n  public async startTransaction(): Promise<void> {\n    try {\n      switch (this.sqlDataSource.getDbType()) {\n        case \"mysql\":\n        case \"mariadb\":\n          log(BEGIN_TRANSACTION, this.logs);\n          await (this.sqlConnection as Connection).beginTransaction();\n          break;\n\n        case \"postgres\":\n          log(BEGIN_TRANSACTION, this.logs);\n          await (this.sqlConnection as Client).query(BEGIN_TRANSACTION);\n          break;\n\n        case \"sqlite\":\n          log(BEGIN_TRANSACTION, this.logs);\n          (this.sqlConnection as Database).run(BEGIN_TRANSACTION, (err) => {\n            if (err) {\n              throw new Error(err.message);\n            }\n          });\n          break;\n\n        default:\n          throw new Error(\"Invalid database type while beginning transaction\");\n      }\n    } catch (error) {\n      await this.releaseConnection();\n    }\n  }\n\n  public async commit(): Promise<void> {\n    try {\n      switch (this.sqlDataSource.getDbType()) {\n        case \"mysql\":\n        case \"mariadb\":\n          log(COMMIT_TRANSACTION, this.logs);\n          await (this.sqlConnection as Connection).commit();\n          break;\n\n        case \"postgres\":\n          log(COMMIT_TRANSACTION, this.logs);\n          await (this.sqlConnection as Client).query(COMMIT_TRANSACTION);\n          break;\n\n        case \"sqlite\":\n          log(COMMIT_TRANSACTION, this.logs);\n          (this.sqlConnection as Database).run(COMMIT_TRANSACTION, (err) => {\n            if (err) {\n              throw new Error(err.message);\n            }\n          });\n          break;\n\n        default:\n          throw new Error(\"Invalid database type while committing transaction\");\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      await this.releaseConnection();\n    }\n  }\n\n  public async rollback(): Promise<void> {\n    try {\n      switch (this.sqlDataSource.getDbType()) {\n        case \"mysql\":\n        case \"mariadb\":\n          log(ROLLBACK_TRANSACTION, this.logs);\n          await (this.sqlConnection as Connection).rollback();\n          break;\n\n        case \"postgres\":\n          log(ROLLBACK_TRANSACTION, this.logs);\n          await (this.sqlConnection as Client).query(ROLLBACK_TRANSACTION);\n          break;\n\n        case \"sqlite\":\n          log(ROLLBACK_TRANSACTION, this.logs);\n          (this.sqlConnection as Database).run(ROLLBACK_TRANSACTION, (err) => {\n            if (err) {\n              throw new Error(err.message);\n            }\n          });\n          break;\n\n        default:\n          throw new Error(\n            \"Invalid database type while rolling back transaction\",\n          );\n      }\n    } finally {\n      await this.releaseConnection();\n    }\n  }\n\n  private async releaseConnection(): Promise<void> {\n    switch (this.sqlDataSource.getDbType()) {\n      case \"mysql\":\n      case \"mariadb\":\n        await (this.sqlConnection as Connection).end();\n        break;\n\n      case \"postgres\":\n        await (this.sqlConnection as Client).end();\n        break;\n\n      case \"sqlite\":\n        (this.sqlConnection as Database).close();\n        break;\n\n      default:\n        throw new Error(\"Invalid database type while releasing connection\");\n    }\n  }\n}\n","import { CaseConvention } from \"./utils/case_utils\";\n\nexport abstract class AbstractModel {\n  /**\n   * @description Extra columns for the model, all data retrieved from the database that is not part of the model will be stored here\n   */\n  public extraColumns: { [key: string]: any };\n\n  /**\n   * @description Defines the case convention for the model\n   * @type {CaseConvention}\n   */\n  static modelCaseConvention: CaseConvention = \"camel\";\n\n  /**\n   * @description Defines the case convention for the database, this should be the case convention you use in your database\n   * @type {CaseConvention}\n   */\n  static databaseCaseConvention: CaseConvention = \"snake\";\n\n  constructor() {\n    this.extraColumns = {};\n  }\n}\n","import Redis, { RedisOptions } from \"ioredis\";\n\n/**\n * @description The Redis_data_source class is a wrapper around the ioredis library that provides a simple interface to interact with a redis database\n */\nexport type RedisStorable =\n  | string\n  | number\n  | boolean\n  | Buffer\n  | Array<any>\n  | Record<string, any>;\n\n/**\n * @description The RedisGiveable type is a type that can be stored in the redis database\n */\nexport type RedisGiveable =\n  | string\n  | number\n  | boolean\n  | Record<string, any>\n  | Array<any>\n  | null;\n\nexport class RedisDataSource {\n  public static isConnected: boolean;\n  protected static redisConnection: Redis;\n  public isConnected: boolean;\n  protected redisConnection: Redis;\n\n  public constructor(input?: RedisOptions) {\n    this.isConnected = false;\n    const port = input?.port || +(process.env.REDIS_PORT as string) || 6379;\n\n    this.redisConnection = new Redis({\n      host: input?.host || process.env.REDIS_HOST,\n      username: input?.username || process.env.REDIS_USERNAME,\n      port: port,\n      password: input?.password || process.env.REDIS_PASSWORD,\n      ...input,\n    });\n  }\n\n  /**\n   * @description Connects to the redis database establishing a connection. If no connection details are provided, the default values from the env will be taken instead\n   * @description The User input connection details will always come first\n   * @description This is intended as a singleton connection to the redis database, if you need multiple connections, use the getConnection method\n   * @param {RedisDataSourceInput} input - Details for the redis connection\n   */\n  static async connect(input?: RedisOptions): Promise<void> {\n    if (RedisDataSource.isConnected) {\n      return;\n    }\n\n    const port = input?.port || +(process.env.REDIS_PORT as string) || 6379;\n    RedisDataSource.redisConnection = new Redis({\n      host: input?.host || process.env.REDIS_HOST,\n      username: input?.username || process.env.REDIS_USERNAME,\n      port: port,\n      password: input?.password || process.env.REDIS_PASSWORD,\n      ...input,\n    });\n\n    try {\n      await RedisDataSource.redisConnection.ping();\n      RedisDataSource.isConnected = true;\n    } catch (error) {\n      throw new Error(`Failed to connect to Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Establishes a connection to the redis database and returns the connection\n   * @param input\n   * @returns\n   */\n  static async getConnection(input?: RedisOptions): Promise<RedisDataSource> {\n    const connection = new RedisDataSource(input);\n    await connection.redisConnection.ping();\n    connection.isConnected = true;\n    return connection;\n  }\n\n  /**\n   * @description Sets a key-value pair in the redis database\n   * @param {string} key - The key\n   * @param {string} value - The value\n   * @param {number} expirationTime - The expiration time in milliseconds\n   * @returns {Promise<void>}\n   */\n  static async set(\n    key: string,\n    value: RedisStorable,\n    expirationTime?: number,\n  ): Promise<void> {\n    expirationTime = expirationTime ? expirationTime / 1000 : undefined;\n\n    if (typeof value === \"object\" && !Buffer.isBuffer(value)) {\n      value = JSON.stringify(value);\n    }\n\n    if (typeof value === \"boolean\") {\n      value = value.toString();\n    }\n\n    try {\n      if (expirationTime) {\n        await RedisDataSource.redisConnection.setex(key, expirationTime, value);\n        return;\n      }\n\n      await RedisDataSource.redisConnection.set(key, value);\n    } catch (error) {\n      throw new Error(`Failed to set key-value pair in Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Gets the value of a key in the redis database\n   * @param {string} key - The key\n   * @returns {Promise<string>}\n   */\n  static async get<T = RedisGiveable>(key: string): Promise<T | null> {\n    try {\n      const value = await RedisDataSource.redisConnection.get(key);\n      return RedisDataSource.getValue<T>(value);\n    } catch (error) {\n      throw new Error(`Failed to get value from Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Gets the value of a key in the redis database as a buffer\n   */\n  static async getBuffer(key: string): Promise<Buffer | null> {\n    try {\n      return await RedisDataSource.redisConnection.getBuffer(key);\n    } catch (error) {\n      throw new Error(`Failed to get value from Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Gets the value of a key in the redis database and deletes the key\n   * @param {string} key - The key\n   * @returns {Promise\n   * <T | null>}\n   */\n  static async getAndDelete<T = RedisGiveable>(key: string): Promise<T | null> {\n    try {\n      const value = await RedisDataSource.redisConnection.get(key);\n      await RedisDataSource.redisConnection.del(key);\n      return RedisDataSource.getValue<T>(value);\n    } catch (error) {\n      throw new Error(`Failed to get value from Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Deletes a key from the redis database\n   * @param {string} key - The key\n   * @returns {Promise<void>}\n   */\n  static async delete(key: string): Promise<void> {\n    try {\n      await RedisDataSource.redisConnection.del(key);\n    } catch (error) {\n      throw new Error(`Failed to delete key from Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Flushes all the data in the redis database\n   * @returns {Promise<void>}\n   */\n  static async flushAll(): Promise<void> {\n    try {\n      await RedisDataSource.redisConnection.flushall();\n    } catch (error) {\n      throw new Error(`Failed to flush Redis database: ${error}`);\n    }\n  }\n\n  /**\n   * @description Returns the raw redis connection that uses the ioredis library\n   * @returns {Redis}\n   */\n  static getRawConnection(): Redis {\n    if (!RedisDataSource.isConnected || !RedisDataSource.redisConnection) {\n      throw new Error(\"redis connection not established\");\n    }\n\n    return RedisDataSource.redisConnection;\n  }\n\n  /**\n   * @description Disconnects from the redis database\n   * @returns {Promise<void>}\n   */\n  static async disconnect(): Promise<void> {\n    try {\n      await RedisDataSource.redisConnection.quit();\n      RedisDataSource.isConnected = false;\n    } catch (error) {\n      throw new Error(`Failed to disconnect from Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Sets a key-value pair in the redis database\n   * @param {string} key - The key\n   * @param {string} value - The value\n   * @param {number} expirationTime - The expiration time in milliseconds\n   * @returns {Promise<void>}\n   */\n  async set(\n    key: string,\n    value: RedisStorable,\n    expirationTime?: number,\n  ): Promise<void> {\n    expirationTime = expirationTime ? expirationTime / 1000 : undefined;\n\n    if (typeof value === \"object\" && !Buffer.isBuffer(value)) {\n      value = JSON.stringify(value);\n    }\n\n    if (typeof value === \"boolean\") {\n      value = value.toString();\n    }\n\n    try {\n      if (expirationTime) {\n        await this.redisConnection.setex(key, expirationTime, value);\n        return;\n      }\n\n      await this.redisConnection.set(key, value);\n    } catch (error) {\n      throw new Error(`Failed to set key-value pair in Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Gets the value of a key in the redis database\n   * @param {string} key - The key\n   * @returns {Promise<string>}\n   */\n  async get<T = RedisGiveable>(key: string): Promise<T | null> {\n    try {\n      const value = await this.redisConnection.get(key);\n      return RedisDataSource.getValue<T>(value);\n    } catch (error) {\n      throw new Error(`Failed to get value from Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Gets the value of a key in the redis database as a buffer\n   */\n  async getBuffer(key: string): Promise<Buffer | null> {\n    try {\n      return await this.redisConnection.getBuffer(key);\n    } catch (error) {\n      throw new Error(`Failed to get value from Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Gets the value of a key in the redis database and deletes the key\n   * @param {string} key - The key\n   * @returns {Promise\n   * <T | null>}\n   */\n  async getAndDelete<T = RedisGiveable>(key: string): Promise<T | null> {\n    try {\n      const value = await this.redisConnection.get(key);\n      await this.redisConnection.del(key);\n      return RedisDataSource.getValue<T>(value);\n    } catch (error) {\n      throw new Error(`Failed to get value from Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Deletes a key from the redis database\n   * @param {string} key - The key\n   * @returns {Promise<void>}\n   */\n  async delete(key: string): Promise<void> {\n    try {\n      await this.redisConnection.del(key);\n    } catch (error) {\n      throw new Error(`Failed to delete key from Redis: ${error}`);\n    }\n  }\n\n  /**\n   * @description Flushes all the data in the redis database\n   * @returns {Promise<void>}\n   */\n  async flushAll(): Promise<void> {\n    try {\n      await this.redisConnection.flushall();\n    } catch (error) {\n      throw new Error(`Failed to flush Redis database: ${error}`);\n    }\n  }\n\n  /**\n   * @description Returns the raw redis connection that uses the ioredis library\n   * @returns {Redis}\n   */\n  getRawConnection(): Redis {\n    if (!this.isConnected || !this.redisConnection) {\n      throw new Error(\"redis connection not established\");\n    }\n\n    return this.redisConnection;\n  }\n\n  /**\n   * @description Disconnects from the redis database\n   * @returns {Promise<void>}\n   */\n  async disconnect(): Promise<void> {\n    try {\n      await this.redisConnection.quit();\n      this.isConnected = false;\n    } catch (error) {\n      throw new Error(`Failed to disconnect from Redis: ${error}`);\n    }\n  }\n\n  protected static getValue<T = RedisGiveable>(value: string | null): T | null {\n    if (!value) {\n      return null;\n    }\n\n    try {\n      const jsonVal = JSON.parse(value);\n      return jsonVal as T;\n    } catch (_error) {}\n\n    if (value === \"true\" || value === \"false\") {\n      return Boolean(value) as T;\n    }\n\n    if (Number(value)) {\n      return Number(value) as T;\n    }\n\n    if (Array.isArray(value)) {\n      return value as T;\n    }\n\n    return value as T;\n  }\n}\n","import { CaseConvention, convertCase } from \"../../utils/case_utils\";\nimport { Model } from \"../models/model\";\nimport { getModelColumns } from \"../models/model_decorators\";\nimport {\n  SelectableType,\n  RelationType,\n  DynamicColumnType,\n} from \"../models/model_manager/model_manager_types\";\nimport joinTemplate from \"../resources/query/JOIN\";\nimport selectTemplate from \"../resources/query/SELECT\";\nimport whereTemplate, {\n  BaseValues,\n  WhereOperatorType,\n} from \"../resources/query/WHERE\";\nimport { addDynamicColumnsToModel } from \"../serializer\";\nimport { SqlDataSourceType } from \"../sql_data_source\";\nimport { ModelQueryBuilder } from \"./query_builder\";\n\nexport class StandaloneQueryBuilder {\n  protected selectQuery: string;\n  protected joinQuery: string;\n  protected relations: string[];\n  protected dynamicColumns: string[];\n  protected groupByQuery: string;\n  protected orderByQuery: string;\n  protected limitQuery: string;\n  protected offsetQuery: string;\n  protected whereQuery: string = \"\";\n  protected dbType: SqlDataSourceType;\n\n  protected params: any[] = [];\n  protected model: typeof Model;\n\n  protected whereTemplate: ReturnType<typeof whereTemplate>;\n  protected isNestedCondition = false;\n  protected selectTemplate: ReturnType<typeof selectTemplate>;\n\n  /**\n   * @description Constructs a Mysql_query_builder instance.\n   * @param model - The model class associated with the table.\n   * @param table - The name of the table.\n   * @param logs - A boolean indicating whether to log queries.\n   */\n  public constructor(\n    dbType: SqlDataSourceType,\n    table: string,\n    modelCaseConvention: CaseConvention = \"camel\",\n    databaseCaseConvention: CaseConvention = \"snake\",\n    isNestedCondition: boolean = false,\n  ) {\n    this.dbType = dbType;\n    this.isNestedCondition = isNestedCondition;\n    this.model = {\n      modelCaseConvention,\n      databaseCaseConvention,\n      table: table,\n    } as typeof Model;\n    this.selectQuery = selectTemplate(this.dbType, this.model).selectAll;\n    this.selectTemplate = selectTemplate(this.dbType, this.model);\n    this.whereTemplate = whereTemplate(this.dbType, this.model);\n    this.whereQuery = \"\";\n    this.joinQuery = \"\";\n    this.relations = [];\n    this.dynamicColumns = [];\n    this.groupByQuery = \"\";\n    this.orderByQuery = \"\";\n    this.limitQuery = \"\";\n    this.offsetQuery = \"\";\n  }\n\n  public select(...columns: string[]): StandaloneQueryBuilder {\n    this.selectQuery = this.selectTemplate.selectColumns(\n      ...(columns as string[]),\n    );\n    return this;\n  }\n\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): StandaloneQueryBuilder {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): StandaloneQueryBuilder {\n    const join = joinTemplate(\n      this.model,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.leftJoin();\n    return this;\n  }\n\n  public whereBuilder(\n    cb: (queryBuilder: StandaloneQueryBuilder) => void,\n  ): this {\n    const queryBuilder = new StandaloneQueryBuilder(\n      this.dbType,\n      this.model.table,\n      this.model.modelCaseConvention,\n      this.model.databaseCaseConvention,\n      true,\n    );\n    cb(queryBuilder as unknown as StandaloneQueryBuilder);\n\n    let whereCondition = queryBuilder.whereQuery.trim();\n    if (whereCondition.startsWith(\"AND\")) {\n      whereCondition = whereCondition.substring(4); // 'AND '.length === 4 has to be removed from the beginning of the where condition\n    } else if (whereCondition.startsWith(\"OR\")) {\n      whereCondition = whereCondition.substring(3); // 'OR '.length === 3 has to be removed from the beginning of the where condition\n    }\n\n    whereCondition = \"(\" + whereCondition + \")\";\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? whereCondition\n        : `WHERE ${whereCondition}`;\n    } else {\n      this.whereQuery += ` AND ${whereCondition}`;\n    }\n\n    this.params.push(...queryBuilder.params);\n    return this;\n  }\n\n  public orWhereBuilder(\n    cb: (queryBuilder: StandaloneQueryBuilder) => void,\n  ): this {\n    const nestedBuilder = new StandaloneQueryBuilder(\n      this.dbType,\n      this.model.table,\n      this.model.modelCaseConvention,\n      this.model.databaseCaseConvention,\n      true,\n    );\n    cb(nestedBuilder as unknown as StandaloneQueryBuilder);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    nestedCondition = `(${nestedCondition})`;\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` OR ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  public andWhereBuilder(\n    cb: (queryBuilder: StandaloneQueryBuilder) => void,\n  ): this {\n    const nestedBuilder = new StandaloneQueryBuilder(\n      this.dbType,\n      this.model.table,\n      this.model.modelCaseConvention,\n      this.model.databaseCaseConvention,\n      true,\n    );\n    cb(nestedBuilder as unknown as StandaloneQueryBuilder);\n\n    let nestedCondition = nestedBuilder.whereQuery.trim();\n    if (nestedCondition.startsWith(\"AND\")) {\n      nestedCondition = nestedCondition.substring(4);\n    } else if (nestedCondition.startsWith(\"OR\")) {\n      nestedCondition = nestedCondition.substring(3);\n    }\n\n    if (!this.whereQuery) {\n      this.whereQuery = this.isNestedCondition\n        ? nestedCondition\n        : `WHERE ${nestedCondition}`;\n\n      this.params.push(...nestedBuilder.params);\n      return this;\n    }\n\n    this.whereQuery += ` AND ${nestedCondition}`;\n    this.params.push(...nestedBuilder.params);\n\n    return this;\n  }\n\n  /**\n   * @description Accepts a value and executes a callback only of the value is not null or undefined.\n   * @param {any} value\n   * @param callback\n   */\n  public when(\n    value: any,\n    cb: (value: any, query: StandaloneQueryBuilder) => void,\n  ): this {\n    if (value === undefined || value === null) {\n      return this;\n    }\n\n    cb(value, this);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The query_builder instance for chaining.\n   */\n  public where(\n    column: string,\n    operatorOrValue: WhereOperatorType | BaseValues,\n    value?: BaseValues,\n  ): this {\n    let operator: WhereOperatorType = \"=\";\n    let actualValue: BaseValues;\n\n    if (typeof operatorOrValue === \"string\" && value) {\n      operator = operatorOrValue as WhereOperatorType;\n      actualValue = value;\n    } else {\n      actualValue = operatorOrValue as BaseValues;\n      operator = \"=\";\n    }\n\n    if (this.whereQuery || this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.andWhere(\n        column as string,\n        actualValue,\n        operator,\n      );\n      this.whereQuery += query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.where(\n      column as string,\n      actualValue,\n      operator,\n    );\n    this.whereQuery = query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhere(\n    column: string,\n    operatorOrValue: WhereOperatorType | BaseValues,\n    value?: BaseValues,\n  ): this {\n    let operator: WhereOperatorType = \"=\";\n    let actualValue: BaseValues;\n\n    if (typeof operatorOrValue === \"string\" && value) {\n      operator = operatorOrValue as WhereOperatorType;\n      actualValue = value;\n    } else {\n      actualValue = operatorOrValue as BaseValues;\n      operator = \"=\";\n    }\n\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.where(\n        column as string,\n        actualValue,\n        operator,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhere(\n      column as string,\n      actualValue,\n      operator,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhere(\n    column: string,\n    operatorOrValue: WhereOperatorType | BaseValues,\n    value?: BaseValues,\n  ): this {\n    let operator: WhereOperatorType = \"=\";\n    let actualValue: BaseValues;\n\n    if (typeof operatorOrValue === \"string\" && value) {\n      operator = operatorOrValue as WhereOperatorType;\n      actualValue = value;\n    } else {\n      actualValue = operatorOrValue as BaseValues;\n      operator = \"=\";\n    }\n\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.where(\n        column as string,\n        actualValue,\n        operator,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhere(\n      column as string,\n      actualValue,\n      operator,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereBetween(column: string, min: BaseValues, max: BaseValues): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNotBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotBetween(\n        column as string,\n        min,\n        max,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereNotBetween(\n      column as string,\n      min,\n      max,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhereIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereNotIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNotIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereNotIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotIn(\n        column as string,\n        values,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereNotIn(\n      column as string,\n      values,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereNull(column: string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNull(column as string);\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNull(column as string);\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhereNull(column: string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNull(column as string);\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNull(column as string);\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereNull(column: string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNull(column as string);\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereNull(column as string);\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public whereNotNull(column: string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotNull(\n        column as string,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNotNull(\n      column as string,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public andWhereNotNull(column: string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotNull(\n        column as string,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.andWhereNotNull(\n      column as string,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The query_builder instance for chaining.\n   */\n  public orWhereNotNull(column: string): this {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query, params } = this.whereTemplate.whereNotNull(\n        column as string,\n      );\n      this.whereQuery = query;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query, params } = this.whereTemplate.orWhereNotNull(\n      column as string,\n    );\n    this.whereQuery += query;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The query_builder instance for chaining.\n   */\n  public rawWhere(query: string, queryParams: any[] = []) {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query: rawQuery, params } = this.whereTemplate.rawWhere(\n        query,\n        queryParams,\n      );\n      this.whereQuery = rawQuery;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query: rawQuery, params } = this.whereTemplate.rawAndWhere(\n      query,\n      queryParams,\n    );\n    this.whereQuery += rawQuery;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw AND WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The query_builder instance for chaining.\n   */\n  public rawAndWhere(query: string, queryParams: any[] = []) {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query: rawQuery, params } = this.whereTemplate.rawWhere(\n        query,\n        queryParams,\n      );\n      this.whereQuery = rawQuery;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query: rawQuery, params } = this.whereTemplate.rawAndWhere(\n      query,\n      queryParams,\n    );\n    this.whereQuery += rawQuery;\n    this.params.push(...params);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw OR WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The query_builder instance for chaining.\n   */\n  public rawOrWhere(query: string, queryParams: any[] = []) {\n    if (!this.whereQuery && !this.isNestedCondition) {\n      const { query: rawQuery, params } = this.whereTemplate.rawWhere(\n        query,\n        queryParams,\n      );\n      this.whereQuery = rawQuery;\n      this.params.push(...params);\n      return this;\n    }\n\n    const { query: rawQuery, params } = this.whereTemplate.rawOrWhere(\n      query,\n      queryParams,\n    );\n    this.whereQuery += rawQuery;\n    this.params.push(...params);\n    return this;\n  }\n\n  public groupBy(...columns: string[]): this {\n    this.groupByQuery = this.selectTemplate.groupBy(...(columns as string[]));\n    return this;\n  }\n\n  public groupByRaw(query: string): this {\n    this.groupByQuery = ` GROUP BY ${query}`;\n    return this;\n  }\n\n  public orderBy(columns: string[], order: \"ASC\" | \"DESC\"): this {\n    this.orderByQuery = this.selectTemplate.orderBy(columns as string[], order);\n    return this;\n  }\n\n  public orderByRaw(query: string): this {\n    this.orderByQuery = ` ORDER BY ${query}`;\n    return this;\n  }\n\n  public limit(limit: number) {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    return this;\n  }\n\n  public offset(offset: number) {\n    this.offsetQuery = this.selectTemplate.offset(offset);\n    return this;\n  }\n\n  public getCurrentQuery(dbType?: SqlDataSourceType): {\n    query: string;\n    params: any[];\n  } {\n    const query =\n      this.selectQuery +\n      this.joinQuery +\n      this.whereQuery +\n      this.groupByQuery +\n      this.orderByQuery +\n      this.limitQuery +\n      this.offsetQuery;\n\n    function parsePlaceHolders(\n      dbType: SqlDataSourceType,\n      query: string,\n      startIndex: number = 1,\n    ): string {\n      switch (dbType) {\n        case \"mysql\":\n        case \"sqlite\":\n        case \"mariadb\":\n          return query.replace(/PLACEHOLDER/g, () => \"?\");\n        case \"postgres\":\n          let index = startIndex;\n          return query.replace(/PLACEHOLDER/g, () => `$${index++}`);\n        default:\n          throw new Error(\n            \"Unsupported database type, did you forget to set the dbType in the function params?\",\n          );\n      }\n    }\n\n    const parsedQuery = parsePlaceHolders(dbType || this.dbType, query);\n    return { query: parsedQuery, params: this.params };\n  }\n}\n"],"mappings":"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","names":["dotenv","column","dotenv","DateTime","column","relationModel","column","column","column","column","DateTime","column","column","query","params","rawQuery","mysql","column","DateTime","column","query","result","column","idsToFetchList","column","DateTime","column","DateTime","query","params","result","column","DateTime","column","DateTime","query","params","table","sqLiteConnection","err","rows","column","DateTime","RedisOptions","column","query","params","rawQuery","dbType","builder"]}