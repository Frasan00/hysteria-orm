{"version":3,"sources":["../node_modules/dotenv/package.json","../node_modules/dotenv/lib/main.js","../src/Sql/Models/Relations/Relation.ts","../src/CaseUtils.ts","../src/Sql/Models/Model.ts","../src/Sql/Models/Relations/HasOne.ts","../src/Sql/Models/Relations/HasMany.ts","../src/Sql/Models/Relations/BelongsTo.ts","../src/Datasource.ts","../src/Sql/SqlDatasource.ts","../src/Sql/Templates/Query/SELECT.ts","../src/Sql/Templates/Query/INSERT.ts","../src/Sql/Templates/Query/UPDATE.ts","../src/Sql/Templates/Query/DELETE.ts","../src/Logger.ts","../src/Sql/Templates/Query/RELATIONS.ts","../src/Sql/Templates/Query/WHERE.TS.ts","../src/Sql/Mysql/MySqlModelManagerUtils.ts","../src/Sql/QueryBuilder/QueryBuilder.ts","../src/Sql/Templates/Query/JOIN.ts","../src/Sql/Mysql/MysqlQueryBuilder.ts","../src/Sql/Templates/Query/TRANSACTION.ts","../src/Sql/Mysql/MysqlTransaction.ts","../src/Sql/Models/ModelManager/AbstractModelManager.ts","../src/Sql/Mysql/MysqlModelManager.ts","../src/Sql/Postgres/PostgresModelManagerUtils.ts","../src/Sql/Postgres/PostgresTransaction.ts","../src/Sql/Postgres/PostgresQueryBuilder.ts","../src/Sql/Postgres/PostgresModelManager.ts","../src/Sql/Migrations/Migration.ts","../src/Sql/Migrations/Schema/Schema.ts","../src/Sql/Templates/Migration/CREATETABLE.ts","../src/Sql/Migrations/Columns/CreateTable/ColumnOptionsBuilder.ts","../src/Sql/Migrations/Columns/CreateTable/ColumnTypeBuilder.ts","../src/Sql/Migrations/Columns/CreateTable/ColumnBuilderConnector.ts","../src/Sql/Templates/Migration/DROPTABLE.ts","../src/Sql/Migrations/Columns/AlterTable/ColumnBuilderAlter.ts"],"sourcesContent":["{\n  \"name\": \"dotenv\",\n  \"version\": \"16.3.1\",\n  \"description\": \"Loads environment variables from .env file\",\n  \"main\": \"lib/main.js\",\n  \"types\": \"lib/main.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./lib/main.d.ts\",\n      \"require\": \"./lib/main.js\",\n      \"default\": \"./lib/main.js\"\n    },\n    \"./config\": \"./config.js\",\n    \"./config.js\": \"./config.js\",\n    \"./lib/env-options\": \"./lib/env-options.js\",\n    \"./lib/env-options.js\": \"./lib/env-options.js\",\n    \"./lib/cli-options\": \"./lib/cli-options.js\",\n    \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"scripts\": {\n    \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n    \"lint\": \"standard\",\n    \"lint-readme\": \"standard-markdown\",\n    \"pretest\": \"npm run lint && npm run dts-check\",\n    \"test\": \"tap tests/*.js --100 -Rspec\",\n    \"prerelease\": \"npm test\",\n    \"release\": \"standard-version\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/motdotla/dotenv.git\"\n  },\n  \"funding\": \"https://github.com/motdotla/dotenv?sponsor=1\",\n  \"keywords\": [\n    \"dotenv\",\n    \"env\",\n    \".env\",\n    \"environment\",\n    \"variables\",\n    \"config\",\n    \"settings\"\n  ],\n  \"readmeFilename\": \"README.md\",\n  \"license\": \"BSD-2-Clause\",\n  \"devDependencies\": {\n    \"@definitelytyped/dtslint\": \"^0.0.133\",\n    \"@types/node\": \"^18.11.3\",\n    \"decache\": \"^4.6.1\",\n    \"sinon\": \"^14.0.1\",\n    \"standard\": \"^17.0.0\",\n    \"standard-markdown\": \"^7.1.0\",\n    \"standard-version\": \"^9.5.0\",\n    \"tap\": \"^16.3.0\",\n    \"tar\": \"^6.1.11\",\n    \"typescript\": \"^4.8.4\"\n  },\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"browser\": {\n    \"fs\": false\n  }\n}\n","const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development')\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    throw new Error('INVALID_DOTENV_KEY: Missing key part')\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    throw new Error('INVALID_DOTENV_KEY: Missing environment part')\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n\n  if (options && options.path && options.path.length > 0) {\n    dotenvPath = options.path\n  }\n\n  // Locate .env.vault\n  return dotenvPath.endsWith('.vault') ? dotenvPath : `${dotenvPath}.vault`\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    let processEnv = process.env\n    if (options && options.processEnv != null) {\n      processEnv = options.processEnv\n    }\n\n    DotenvModule.populate(processEnv, parsed, options)\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _debug(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  const vaultPath = _vaultPath(options)\n\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!fs.existsSync(vaultPath)) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.slice(0, 12)\n  const authTag = ciphertext.slice(-16)\n  ciphertext = ciphertext.slice(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)'\n      throw new Error(msg)\n    } else if (decryptionFailed) {\n      const msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY'\n      throw new Error(msg)\n    } else {\n      console.error('Error: ', error.code)\n      console.error('Error: ', error.message)\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n","import { Model } from \"../Model\";\n\nexport enum RelationType {\n  hasOne = \"hasOne\", // One to One without foreign key\n  belongsTo = \"belongsTo\", // One to One with foreign key\n  hasMany = \"hasMany\",\n}\n\n/**\n * Main Model -> Related Model\n */\n\nexport abstract class Relation {\n  public abstract type: RelationType;\n  public foreignKey?: string;\n  public relatedModel: string;\n\n  protected constructor(relatedModel: string) {\n    this.relatedModel = relatedModel;\n  }\n}\n","import { Model } from \"./Sql/Models/Model\";\nimport { Relation } from \"./Sql/Models/Relations/Relation\";\n\nexport type PaginationMetadata = {\n  perPage: number;\n  currentPage: number;\n  firstPage: number;\n  isEmpty: boolean;\n  total: number;\n  hasTotal: boolean;\n  lastPage: number;\n  hasMorePages: boolean;\n  hasPages: boolean;\n};\n\nexport type PaginatedData<T> = {\n  paginationMetadata: PaginationMetadata;\n  data: T[];\n};\n\nexport function camelToSnakeCase(camelCase: any) {\n  if (typeof camelCase !== \"string\" || !camelCase) {\n    return camelCase;\n  }\n\n  return camelCase.replace(/([a-z0-9])([A-Z])/g, \"$1_$2\").toLowerCase();\n}\n\nfunction fromSnakeToCamelCase(snake: any) {\n  if (typeof snake !== \"string\" || !snake) {\n    return snake;\n  }\n\n  return snake.replace(/(_\\w)/g, (x) => x[1].toUpperCase());\n}\n\nexport function parseDatabaseDataIntoModelResponse<\n  T extends Record<string, any>,\n>(\n  models: T[],\n  paginate?: {\n    limit: number;\n    page: number;\n  },\n): { paginationMetadata: PaginationMetadata; data: T[] } | T | T[] | null {\n  if (!models) {\n    return null;\n  }\n\n  if (paginate) {\n    const offset = (paginate.page - 1) * paginate.limit;\n    const paginatedItems = models.slice(offset, offset + paginate.limit);\n\n    const paginationMetadata = {\n      perPage: paginate.limit,\n      currentPage: paginate.page,\n      firstPage: 1,\n      isEmpty: paginatedItems.length === 0,\n      total: models.length,\n      hasTotal: true,\n      lastPage: Math.ceil(models.length / paginate.limit),\n      hasMorePages: paginate.page < Math.ceil(models.length / paginate.limit),\n      hasPages: models.length > paginate.limit,\n    };\n\n    return {\n      paginationMetadata,\n      data: paginatedItems.map((model) => parseModel(model)),\n    };\n  }\n\n  const parsedModels = models.map((model) => parseModel(model));\n  return parsedModels.length === 1 ? parsedModels[0] : parsedModels;\n}\n\nfunction parseModel<T extends Record<string, any>>(model: T): T {\n  const camelCaseModel: Record<string, any> = {};\n\n  Object.keys(model).forEach((key) => {\n    if ([\"metadata\", \"aliasColumns\", \"setProps\"].includes(key)) {\n      camelCaseModel[key] = model[key];\n      return;\n    }\n\n    const originalValue = model[key];\n    const camelCaseKey = fromSnakeToCamelCase(key);\n\n    const isObject = typeof originalValue === \"object\";\n    const isNotArray = !Array.isArray(originalValue);\n    const isNotRelation = !(originalValue instanceof Relation);\n    const isNotDate = !(originalValue instanceof Date);\n\n    if (originalValue && isObject && isNotArray && isNotRelation && isNotDate) {\n      camelCaseModel[camelCaseKey] = parseModel(originalValue);\n    } else if (isNotRelation && isNotDate) {\n      camelCaseModel[camelCaseKey] = originalValue;\n    }\n  });\n\n  return camelCaseModel as T;\n}\n","/*\n * Represents a model in the Database\n */\nimport { camelToSnakeCase } from \"../../CaseUtils\";\n\nexport interface Metadata {\n  readonly tableName: string;\n  readonly primaryKey?: string;\n}\n\nexport abstract class Model {\n  public metadata: Metadata;\n  public aliasColumns: { [key: string]: string | number | boolean } = {};\n\n  protected constructor(tableName?: string, primaryKey?: string) {\n    this.metadata = {\n      tableName: tableName || camelToSnakeCase(this.constructor.name) + \"s\",\n      primaryKey: primaryKey,\n    };\n  }\n\n  public setProps<T extends this>(data: Partial<T>): void {\n    for (const key in data) {\n      Object.assign(this, { [key]: data[key] });\n    }\n  }\n}\n","import { Relation, RelationType } from \"./Relation\";\nimport { Model } from \"../Model\";\n\nexport class HasOne extends Relation {\n  public type: RelationType;\n  public foreignKey: string;\n\n  public constructor(relatedModel: string, foreignKey: string) {\n    super(relatedModel);\n    this.foreignKey = foreignKey;\n    this.type = RelationType.hasOne;\n  }\n}\n","import { Relation, RelationType } from \"./Relation\";\nimport { Model } from \"../Model\";\n\nexport class HasMany extends Relation {\n  public type: RelationType = RelationType.hasMany;\n  public foreignKey: string;\n\n  public constructor(relatedModel: string, foreignKey: string) {\n    super(relatedModel);\n    this.foreignKey = foreignKey;\n    this.type = RelationType.hasMany;\n  }\n}\n","import { Relation, RelationType } from \"./Relation\";\nimport { Model } from \"../Model\";\n\nexport class BelongsTo extends Relation {\n  public type: RelationType;\n  public foreignKey: string;\n\n  public constructor(relatedModel: string, foreignKey: string) {\n    super(relatedModel);\n    this.foreignKey = foreignKey;\n    this.type = RelationType.belongsTo;\n  }\n}\n","import { Model } from \"./Sql/Models/Model\";\nimport { AbstractModelManager } from \"./Sql/Models/ModelManager/AbstractModelManager\";\n\n/*\n * Creates a datasource for the selected database type with the provided credentials\n */\nexport type DatasourceType = \"mysql\" | \"postgres\";\n\nexport interface DatasourceInput {\n  readonly type: DatasourceType;\n  readonly host: string;\n  readonly port: number;\n  readonly username: string;\n  readonly password: string;\n  readonly database: string;\n  readonly logs?: boolean;\n}\n\nexport abstract class Datasource {\n  protected type: DatasourceType;\n  protected host: string;\n  protected port: number;\n  protected username: string;\n  protected password: string;\n  protected database: string;\n  protected logs: boolean;\n\n  protected constructor(input: DatasourceInput) {\n    this.type = input.type;\n    this.host = input.host;\n    this.port = input.port;\n    this.username = input.username;\n    this.password = input.password;\n    this.database = input.database;\n    this.logs = input.logs || false;\n  }\n\n  public abstract connect(): Promise<void>;\n  public abstract getModelManager(\n    model: typeof Model,\n  ): AbstractModelManager<Model>;\n}\n","import { Datasource, DatasourceInput, DatasourceType } from \"../Datasource\";\nimport mysql, { createPool, Pool } from \"mysql2/promise\";\nimport pg from \"pg\";\nimport { Model } from \"./Models/Model\";\nimport { MysqlModelManager } from \"./Mysql/MysqlModelManager\";\nimport { PostgresModelManager } from \"./Postgres/PostgresModelManager\";\n\ntype ModelManager<T extends Model> =\n  | MysqlModelManager<T>\n  | PostgresModelManager<T>;\n\nexport type SqlPoolType = mysql.Pool | pg.Pool;\nexport type SqlPoolConnectionType = mysql.PoolConnection | pg.PoolClient;\n\nexport class SqlDatasource extends Datasource {\n  protected sqlPool!: SqlPoolType;\n\n  public constructor(input: DatasourceInput) {\n    super(input);\n  }\n\n  /**\n   * @description Connects to the database establishing a connection pool.\n   */\n  public async connect(): Promise<void> {\n    switch (this.type) {\n      case \"mysql\":\n        this.sqlPool = createPool({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n        });\n        break;\n\n      case \"postgres\":\n        this.sqlPool = new pg.Pool({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n        });\n        break;\n      default:\n        throw new Error(`Unsupported datasource type: ${this.type}`);\n    }\n  }\n\n  /**\n   * @description Returns model manager for the provided model\n   * @param model\n   */\n  public getModelManager<T extends Model>(model: new () => T): ModelManager<T> {\n    switch (this.type) {\n      case \"mysql\":\n        return new MysqlModelManager<T>(\n          model,\n          this.sqlPool as mysql.Pool,\n          this.logs,\n        );\n      case \"postgres\":\n        return new PostgresModelManager<T>(\n          model,\n          this.sqlPool as pg.Pool,\n          this.logs,\n        );\n      default:\n        throw new Error(`Unsupported datasource type: ${this.type}`);\n    }\n  }\n\n  /**\n   * @description Returns raw mysql pool\n   */\n  public async getRawPool(): Promise<SqlPoolType> {\n    switch (this.type) {\n      case \"mysql\":\n        return createPool({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n        });\n      case \"postgres\":\n        return new pg.Pool({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n        });\n      default:\n        throw new Error(`Unsupported datasource type: ${this.type}`);\n    }\n  }\n\n  /**\n   * @description Returns raw mysql PoolConnection\n   */\n  public async getRawPoolConnection(): Promise<SqlPoolConnectionType> {\n    switch (this.type) {\n      case \"mysql\":\n        return createPool({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n        }).getConnection();\n      case \"postgres\":\n        return new pg.Pool({\n          host: this.host,\n          port: this.port,\n          user: this.username,\n          password: this.password,\n          database: this.database,\n        }).connect();\n      default:\n        throw new Error(`Unsupported datasource type: ${this.type}`);\n    }\n  }\n}\n","import { camelToSnakeCase } from \"../../../CaseUtils\";\n\nconst selectTemplate = (table: string) => {\n  return {\n    selectAll: `SELECT * FROM ${table} `,\n    selectById: (id: string) => `SELECT * FROM ${table} WHERE id = ${id} `,\n    selectColumns: (...columns: string[]) => {\n      columns = columns.map((column) => {\n        if (column === \"*\" || column.includes(\"as\") || column.includes(\"AS\")) {\n          return column;\n        }\n\n        return camelToSnakeCase(column);\n      });\n      return `SELECT ${columns.join(\", \")} FROM ${table} `;\n    },\n    selectCount: `SELECT COUNT(*) FROM ${table} `,\n    selectDistinct: (...columns: string[]) => {\n      columns = columns.map((column) => camelToSnakeCase(column));\n      return `SELECT DISTINCT ${columns.join(\", \")} FROM ${table} `;\n    },\n    selectSum: (column: string) =>\n      `SELECT SUM(${camelToSnakeCase(column)}) FROM ${table} `,\n    orderBy: (column: string[], order?: \"ASC\" | \"DESC\") => {\n      column = column.map((column) => camelToSnakeCase(column));\n      return `\\nORDER BY ${column.join(\", \")} ${order}`;\n    },\n    groupBy: (...columns: string[]) => {\n      columns = columns.map((column) => camelToSnakeCase(column));\n      return `\\nGROUP BY ${columns.join(\", \")} `;\n    },\n    limit: (limit: number) => `\\nLIMIT ${limit} `,\n    offset: (offset: number) => `\\nOFFSET ${offset} `,\n  };\n};\n\nexport type SelectTemplateType = {\n  selectAll: string;\n  selectById: (id: string) => string;\n  selectColumns: (...columns: string[]) => string;\n  selectCount: string;\n  selectDistinct: (...columns: string[]) => string;\n  selectSum: (column: string) => string;\n  orderBy: (column: string[], order?: \"ASC\" | \"DESC\") => string;\n  groupBy: (...columns: string[]) => string;\n  limit: (limit: number) => string;\n  offset: (offset: number) => string;\n};\n\nexport default selectTemplate;\n","import { camelToSnakeCase } from \"../../../CaseUtils\";\n\ntype BaseValues = string | number | boolean | Date | null | undefined;\n\nconst insertTemplate = (tableName: string) => {\n  return {\n    insert: (columns: string[], values: BaseValues[]) => {\n      columns = columns.map((column) => camelToSnakeCase(column));\n      values = parseValues(values);\n      return `INSERT INTO ${tableName} (${columns.join(\", \")})\n       VALUES (${values.join(\", \")});`;\n    },\n    insertMany: (columns: string[], values: string[][]) => {\n      columns = columns.map((column) => camelToSnakeCase(column));\n      const parsedValues = values.map(parseValues);\n      const valueSets = parsedValues.map((val) => `(${val.join(\", \")})`);\n      return `INSERT INTO ${tableName} (${columns.join(\", \")})\n       VALUES ${valueSets.join(\", \")};`;\n    },\n  };\n};\n\nfunction parseValues(values: BaseValues[]) {\n  return values.map((value: BaseValues) => {\n    if (typeof value === \"string\") {\n      return `'${value}'`;\n    }\n\n    if (typeof value === \"number\") {\n      return value;\n    }\n\n    if (typeof value === \"boolean\") {\n      return value ? 1 : 0;\n    }\n\n    if (value instanceof Date) {\n      return `'${value.toISOString()}'`;\n    }\n\n    if (value === null) {\n      return \"NULL\";\n    }\n\n    if (typeof value === \"function\") {\n      return;\n    }\n\n    return value || \"DEFAULT\";\n  });\n}\n\nexport default insertTemplate;\n","import { camelToSnakeCase } from \"../../../CaseUtils\";\n\nconst updateTemplate = (table: string) => {\n  return {\n    update: (\n      columns: string[],\n      values: string[],\n      primaryKey?: string,\n      primaryKeyValue?: string | undefined,\n    ) => {\n      columns = columns.map((column) => camelToSnakeCase(column));\n      return `UPDATE ${table} SET ${columns\n        .map((column, index) => parseColumnValue(column, values[index]))\n        .filter((column) => column !== undefined)\n        .join(\", \")} WHERE ${primaryKey} = ${primaryKeyValue};`;\n    },\n  };\n};\n\nfunction parseColumnValue(column: string, value: any) {\n  if (typeof value === \"string\") {\n    return `${column} = '${value}'`;\n  }\n\n  if (typeof value === \"number\") {\n    return `${column} = ${value}`;\n  }\n\n  if (typeof value === \"boolean\") {\n    return `${column} = ${value ? 1 : 0}`;\n  }\n\n  if (value instanceof Date) {\n    return `${column} = '${value.toISOString()}'`;\n  }\n\n  if (value === null) {\n    return `${column} = NULL`;\n  }\n\n  if (typeof value === \"function\") {\n    return;\n  }\n\n  return `${column} = ${value}`;\n}\n\nexport default updateTemplate;\n","const deleteTemplate = (tableName: string) => {\n  return {\n    delete: (column: string, value: string | number | boolean | Date) =>\n      `\\nDELETE FROM ${tableName} WHERE ${column} = ${parseValue(value)} `,\n  };\n};\n\nfunction parseValue(value: any) {\n  if (typeof value === \"string\") {\n    return `'${value}'`;\n  }\n\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  if (typeof value === \"boolean\") {\n    return value ? 1 : 0;\n  }\n\n  if (value instanceof Date) {\n    return `'${value.toISOString()}'`;\n  }\n\n  return value;\n}\n\nexport default deleteTemplate;\n","import winston from \"winston\";\n\ninterface LogColors {\n  info: string;\n  warn: string;\n  error: string;\n  [key: string]: string;\n}\n\nconst colors: LogColors = {\n  info: \"\\x1b[32m\",\n  warn: \"\\x1b[33m\",\n  error: \"\\x1b[31m\",\n};\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n  winston.format.printf(({ level, message, timestamp }) => {\n    const color = colors[level] || \"\\x1b[0m\";\n    return `${timestamp} ${color}${level}\\x1b[0m: ${color}${message}\\x1b[0m`;\n  }),\n);\n\nconst consoleTransport = new winston.transports.Console();\nconst fileTransport = new winston.transports.File({ filename: \"logfile.log\" });\n\nconst logger = winston.createLogger({\n  format: logFormat,\n  transports: [consoleTransport, fileTransport],\n});\n\nexport function log(query: string, logs: boolean) {\n  if (!logs) {\n    return;\n  }\n\n  logger.info(\"\\n\" + query);\n}\nexport function queryError(error: any) {\n  logger.error(\"Query Failed \", error);\n}\n\nexport default logger;\n","/**\n * @description Queries to retrieve model's relations from the related relation type\n */\nimport { Relation, RelationType } from \"../../Models/Relations/Relation\";\nimport { Model } from \"../../Models/Model\";\nimport { camelToSnakeCase } from \"../../../CaseUtils\";\n\nfunction relationTemplates<T extends Model>(model: T, relation: Relation) {\n  const primaryKey = model.metadata.primaryKey as keyof T;\n  switch (relation.type) {\n    case RelationType.hasOne:\n      return `SELECT * FROM ${relation.relatedModel} WHERE ${\n        relation.relatedModel\n      }.${camelToSnakeCase(relation.foreignKey as string)} = ${camelToSnakeCase(\n        model[primaryKey] as string,\n      )} LIMIT 1;`;\n\n    case RelationType.belongsTo:\n      return `SELECT * FROM ${relation.relatedModel} WHERE ${\n        relation.relatedModel\n      }.${primaryKey.toString()} = ${\n        model[camelToSnakeCase(relation.foreignKey) as keyof T]\n      };`;\n\n    case RelationType.hasMany:\n      return `SELECT * FROM ${relation.relatedModel} WHERE ${\n        relation.relatedModel\n      }.${camelToSnakeCase(relation.foreignKey as string)} = ${camelToSnakeCase(\n        model[primaryKey] as string,\n      )};`;\n\n    default:\n      return \"\";\n  }\n}\n\nexport default relationTemplates;\n","import { camelToSnakeCase } from \"../../../CaseUtils\";\n\nexport type WhereOperatorType = \"=\" | \"!=\" | \">\" | \"<\" | \">=\" | \"<=\" | \"LIKE\";\nexport type BaseValues = string | number | boolean | Date;\n\nconst whereTemplate = (_tableName: string) => {\n  return {\n    where: (\n      column: string,\n      value: BaseValues,\n      operator: WhereOperatorType = \"=\",\n    ) => `\\nWHERE ${camelToSnakeCase(column)} ${operator} ${parseValue(value)}`,\n    andWhere: (\n      column: string,\n      value: BaseValues,\n      operator: WhereOperatorType = \"=\",\n    ) => ` AND ${camelToSnakeCase(column)} ${operator} ${parseValue(value)}`,\n    orWhere: (\n      column: string,\n      value: BaseValues,\n      operator: WhereOperatorType = \"=\",\n    ) => ` OR ${camelToSnakeCase(column)} ${operator} ${parseValue(value)}`,\n    whereNot: (column: string, value: BaseValues) =>\n      `\\nWHERE ${camelToSnakeCase(column)} != ${parseValue(value)}`,\n    andWhereNot: (column: string, value: BaseValues) =>\n      ` AND ${camelToSnakeCase(column)} != ${parseValue(value)}`,\n    orWhereNot: (column: string, value: BaseValues) =>\n      ` OR ${camelToSnakeCase(column)} != ${parseValue(value)}`,\n    whereNull: (column: string) =>\n      `\\nWHERE ${camelToSnakeCase(column)} IS NULL`,\n    andWhereNull: (column: string) =>\n      ` AND ${camelToSnakeCase(column)} IS NULL`,\n    orWhereNull: (column: string) => ` OR ${camelToSnakeCase(column)} IS NULL`,\n    whereNotNull: (column: string) =>\n      `\\nWHERE ${camelToSnakeCase(column)} IS NOT NULL`,\n    andWhereNotNull: (column: string) =>\n      ` AND ${camelToSnakeCase(column)} IS NOT NULL`,\n    orWhereNotNull: (column: string) =>\n      ` OR ${camelToSnakeCase(column)} IS NOT NULL`,\n    whereBetween: (column: string, min: BaseValues, max: BaseValues) =>\n      `\\nWHERE ${camelToSnakeCase(column)} BETWEEN ${min} AND ${max}`,\n    andWhereBetween: (column: string, min: BaseValues, max: BaseValues) =>\n      ` AND ${camelToSnakeCase(column)} BETWEEN ${min} AND ${max}`,\n    orWhereBetween: (column: string, min: BaseValues, max: BaseValues) =>\n      ` OR ${camelToSnakeCase(column)} BETWEEN ${min} AND ${max}`,\n    whereNotBetween: (column: string, min: BaseValues, max: BaseValues) =>\n      `\\nWHERE ${camelToSnakeCase(column)} NOT BETWEEN ${min} AND ${max}`,\n    andWhereNotBetween: (column: string, min: BaseValues, max: BaseValues) =>\n      ` AND ${camelToSnakeCase(column)} NOT BETWEEN ${min} AND ${max}`,\n    orWhereNotBetween: (column: string, min: BaseValues, max: BaseValues) =>\n      ` OR ${camelToSnakeCase(column)} NOT BETWEEN ${min} AND ${max}`,\n    whereIn: (column: string, values: BaseValues[]) =>\n      `\\nWHERE ${camelToSnakeCase(column)} IN (${values\n        .map((value: BaseValues) => parseValue(value))\n        .join(\", \")})`,\n    andWhereIn: (column: string, values: BaseValues[]) =>\n      ` AND ${camelToSnakeCase(column)} IN (${values\n        .map((value: BaseValues) => parseValue(value))\n        .join(\", \")})`,\n    orWhereIn: (column: string, values: BaseValues[]) =>\n      ` OR ${camelToSnakeCase(column)} IN (${values\n        .map((value: BaseValues) => parseValue(value))\n        .join(\", \")})`,\n    whereNotIn: (column: string, values: BaseValues[]) =>\n      `\\nWHERE ${camelToSnakeCase(column)} NOT IN (${values\n        .map((value: BaseValues) => parseValue(value))\n        .join(\", \")})`,\n    andWhereNotIn: (column: string, values: BaseValues[]) =>\n      ` AND ${camelToSnakeCase(column)} NOT IN (${values\n        .map((value: BaseValues) => parseValue(value))\n        .join(\", \")})`,\n    orWhereNotIn: (column: string, values: BaseValues[]) =>\n      ` OR ${camelToSnakeCase(column)} NOT IN (${values\n        .map((value: BaseValues) => parseValue(value))\n        .join(\", \")})`,\n    rawWhere: (query: string) => `\\nWHERE ${query} `,\n    rawAndWhere: (query: string) => ` AND ${query} `,\n    rawOrWhere: (query: string) => ` OR ${query} `,\n  };\n};\n\nexport type WhereTemplateType = {\n  where: (\n    column: string,\n    value: BaseValues,\n    operator: WhereOperatorType,\n  ) => string;\n  andWhere: (\n    column: string,\n    value: BaseValues,\n    operator: WhereOperatorType,\n  ) => string;\n  orWhere: (\n    column: string,\n    value: BaseValues,\n    operator: WhereOperatorType,\n  ) => string;\n  whereNot: (column: string, value: BaseValues) => string;\n  andWhereNot: (column: string, value: BaseValues) => string;\n  orWhereNot: (column: string, value: BaseValues) => string;\n  whereNull: (column: string) => string;\n  andWhereNull: (column: string) => string;\n  orWhereNull: (column: string) => string;\n  whereNotNull: (column: string) => string;\n  andWhereNotNull: (column: string) => string;\n  orWhereNotNull: (column: string) => string;\n  whereBetween: (column: string, min: BaseValues, max: BaseValues) => string;\n  andWhereBetween: (column: string, min: BaseValues, max: BaseValues) => string;\n  orWhereBetween: (column: string, min: BaseValues, max: BaseValues) => string;\n  whereNotBetween: (column: string, min: BaseValues, max: BaseValues) => string;\n  andWhereNotBetween: (\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ) => string;\n  orWhereNotBetween: (\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ) => string;\n  whereIn: (column: string, values: BaseValues[]) => string;\n  andWhereIn: (column: string, values: BaseValues[]) => string;\n  orWhereIn: (column: string, values: BaseValues[]) => string;\n  whereNotIn: (column: string, values: BaseValues[]) => string;\n  andWhereNotIn: (column: string, values: BaseValues[]) => string;\n  orWhereNotIn: (column: string, values: BaseValues[]) => string;\n  rawWhere: (query: string) => string;\n  rawAndWhere: (query: string) => string;\n  rawOrWhere: (query: string) => string;\n};\n\nfunction parseValue(value: BaseValues) {\n  if (typeof value === \"string\") {\n    return `'${value}'`;\n  }\n\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  if (typeof value === \"boolean\") {\n    return value ? 1 : 0;\n  }\n  return `'${value.toISOString()}'`;\n}\n\nexport default whereTemplate;\n","import {\n  FindType,\n  FindOneType,\n} from \"../Models/ModelManager/ModelManagerTypes\";\nimport selectTemplate from \"../Templates/Query/SELECT\";\nimport { Model } from \"../Models/Model\";\nimport insertTemplate from \"../Templates/Query/INSERT\";\nimport updateTemplate from \"../Templates/Query/UPDATE\";\nimport deleteTemplate from \"../Templates/Query/DELETE\";\nimport { Relation } from \"../Models/Relations/Relation\";\nimport { log, queryError } from \"../../Logger\";\nimport relationTemplates from \"../Templates/Query/RELATIONS\";\nimport { Pool, RowDataPacket } from \"mysql2/promise\";\nimport whereTemplate from \"../Templates/Query/WHERE.TS\";\nimport pg from \"pg\";\n\nclass MySqlModelManagerUtils<T extends Model> {\n  public parseSelectQueryInput(\n    model: T,\n    input: FindType | FindOneType,\n  ): string {\n    let query = \"\";\n    query += this.parseSelect(model.metadata.tableName, input);\n    query += this.parseWhere(model.metadata.tableName, input);\n    query += this.parseQueryFooter(model.metadata.tableName, input);\n\n    return query;\n  }\n\n  private parseSelect(\n    tableName: string,\n    input: FindType | FindOneType,\n  ): string {\n    const select = selectTemplate(tableName);\n    return input.select\n      ? select.selectColumns(...input.select)\n      : select.selectAll;\n  }\n\n  private parseWhere(tableName: string, input: FindType | FindOneType): string {\n    const where = whereTemplate(tableName);\n    if (!input.where) {\n      return \"\";\n    }\n\n    let query = \"\";\n    const entries = Object.entries(input.where);\n    for (let index = 0; index < entries.length; index++) {\n      const [key, value] = entries[index];\n\n      if (index === 0) {\n        query += where.where(key, value);\n        continue;\n      }\n      query += where.andWhere(key, value);\n    }\n\n    return query;\n  }\n  private parseQueryFooter(\n    tableName: string,\n    input: FindType | FindOneType,\n  ): string {\n    if (!this.isFindType(input)) {\n      return \"\";\n    }\n\n    const select = selectTemplate(tableName);\n    let query = \"\";\n    if (input.offset) {\n      query += select.offset(input.offset);\n    }\n\n    if (input.groupBy) {\n      query += select.groupBy(...input.groupBy);\n    }\n\n    if (input.orderBy) {\n      query += select.orderBy([...input.orderBy.columns], input.orderBy.type);\n    }\n\n    if (input.limit) {\n      query += select.limit(input.limit);\n    }\n\n    return query;\n  }\n\n  public parseInsert(model: T): string {\n    const filteredModel = this.filterRelationsAndMetadata(model);\n    const keys = Object.keys(filteredModel);\n    const values = Object.values(filteredModel);\n    const insert = insertTemplate(model.metadata.tableName);\n\n    return insert.insert(keys, values);\n  }\n\n  public parseUpdate(model: T, modelName?: string): string {\n    const update = updateTemplate(modelName || model.metadata.tableName);\n    const filteredModel = this.filterRelationsAndMetadata(model);\n    const keys = Object.keys(filteredModel);\n    const values = Object.values(filteredModel);\n\n    const primaryKey = model.metadata.primaryKey as string;\n    const primaryKeyValue = model[primaryKey as keyof T];\n\n    return update.update(keys, values, primaryKey, primaryKeyValue as string);\n  }\n\n  private filterRelationsAndMetadata(model: T): T {\n    const filteredModel = {};\n\n    const keys = Object.keys(model);\n    for (const key of keys) {\n      if (key === \"metadata\") {\n        continue;\n      }\n\n      if (\n        typeof model[key as keyof T] === \"object\" &&\n        (model[key as keyof T] !== null ||\n          !Array.isArray(model[key as keyof T]))\n      ) {\n        continue;\n      }\n\n      Object.assign(filteredModel, { [key]: model[key as keyof T] });\n    }\n\n    return filteredModel as T;\n  }\n\n  public parseDelete(\n    tableName: string,\n    column: string,\n    value: string | number | boolean,\n  ): string {\n    return deleteTemplate(tableName).delete(column, value.toString());\n  }\n\n  private isFindType(input: FindType | FindOneType): input is FindType {\n    const instance = input as FindType;\n    return (\n      instance.hasOwnProperty(\"offset\") ||\n      instance.hasOwnProperty(\"groupBy\") ||\n      instance.hasOwnProperty(\"orderBy\") ||\n      instance.hasOwnProperty(\"limit\")\n    );\n  }\n\n  /*private _parseJoin(model: T, input: FindType | FindOneType): string {\n    if (!input.relations) {\n      return \"\";\n    }\n\n    const relations: string[] = input.relations.map((relationField) => {\n      const relation: Relation = this.getRelationFromModel(\n        model,\n        relationField,\n      );\n      const join = joinTemplate(model.metadata.tableName, relation.relatedModel);\n      switch (relation.type) {\n        case RelationType.belongsTo:\n          const belongsTo = relation as BelongsTo;\n          return join.belongsTo(belongsTo.foreignKey);\n\n        case RelationType.hasOne:\n          return join.hasOne();\n        case RelationType.hasMany:\n          return join.hasMany(model.metadata.primaryKey as string);\n\n        default:\n          throw new Error(\"Relation type not supported\");\n      }\n    });\n\n    return relations.join(\"\\n\");\n  }*/\n\n  private getRelationFromModel(model: T, relationField: string): Relation {\n    const relation = model[relationField as keyof T] as Relation;\n    if (!relation) {\n      throw new Error(\n        \"Relation \" +\n          relationField +\n          \" not found in model \" +\n          model.metadata.tableName,\n      );\n    }\n\n    return relation;\n  }\n\n  // Parses and fills input relations directly into the model\n  public async parseRelationInput(\n    model: T,\n    input: FindOneType,\n    mysqlConnection: Pool,\n    logs: boolean,\n  ): Promise<void> {\n    if (!input.relations) {\n      return;\n    }\n\n    if (!model.metadata.primaryKey) {\n      throw new Error(\"Model does not have a primary key\");\n    }\n\n    try {\n      const relationPromises = input.relations.map(\n        async (inputRelation: string) => {\n          const relation = this.getRelationFromModel(model, inputRelation);\n          const relationQuery = relationTemplates(model, relation);\n          console.log(relationQuery);\n\n          const [relatedModels] =\n            await mysqlConnection.query<RowDataPacket[]>(relationQuery);\n          if (relatedModels.length === 0) {\n            Object.assign(model, { [inputRelation as keyof T]: null });\n            log(relationQuery, logs);\n            return;\n          }\n\n          if (relatedModels.length === 1) {\n            Object.assign(model, {\n              [inputRelation as keyof T]: relatedModels[0],\n            });\n            log(relationQuery, logs);\n            return;\n          }\n\n          Object.assign(model, { [inputRelation as keyof T]: relatedModels });\n          log(relationQuery, logs);\n        },\n      );\n\n      await Promise.all(relationPromises);\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to parse relations \" + error);\n    }\n  }\n\n  // Parses and fills input relations directly into the model\n  public async parseQueryBuilderRelations(\n    model: T,\n    input: string[],\n    mysqlConnection: Pool,\n    logs: boolean,\n  ): Promise<void> {\n    if (input.length === 0) {\n      return;\n    }\n\n    if (!model.metadata.primaryKey) {\n      throw new Error(\"Model does not have a primary key\");\n    }\n\n    let relationQuery: string = \"\";\n    try {\n      const relationPromises = input.map(async (inputRelation: string) => {\n        const relation = this.getRelationFromModel(model, inputRelation);\n        relationQuery = relationTemplates(model, relation);\n\n        const [relatedModels] =\n          await mysqlConnection.query<RowDataPacket[]>(relationQuery);\n        if (relatedModels.length === 0) {\n          Object.assign(model, { [inputRelation as keyof T]: null });\n          log(relationQuery, logs);\n          return;\n        }\n\n        if (relatedModels.length === 1) {\n          Object.assign(model, {\n            [inputRelation as keyof T]: relatedModels[0],\n          });\n          log(relationQuery, logs);\n          return;\n        }\n\n        Object.assign(model, { [inputRelation as keyof T]: relatedModels });\n        log(relationQuery, logs);\n      });\n\n      await Promise.all(relationPromises);\n    } catch (error) {\n      queryError(\"Query Error: \" + relationQuery + error);\n      throw new Error(\"Failed to parse relations \" + error);\n    }\n  }\n}\n\nexport default new MySqlModelManagerUtils();\n","import { Pool } from \"mysql2/promise\";\nimport selectTemplate, { SelectTemplateType } from \"../Templates/Query/SELECT\";\nimport { Model } from \"../Models/Model\";\nimport whereTemplate, {\n  BaseValues,\n  WhereOperatorType,\n  WhereTemplateType,\n} from \"../Templates/Query/WHERE.TS\";\nimport { MysqlQueryBuilder } from \"../Mysql/MysqlQueryBuilder\";\nimport { PostgresQueryBuilder } from \"../Postgres/PostgresQueryBuilder\";\nimport { PaginatedData, PaginationMetadata } from \"../../CaseUtils\";\n\ntype QueryBuilders<T extends Model> =\n  | MysqlQueryBuilder<T>\n  | PostgresQueryBuilder<T>;\n\nexport abstract class QueryBuilder<T extends Model> {\n  protected selectQuery: string = \"\";\n  protected joinQuery: string = \"\";\n  protected relations: string[] = [];\n  protected whereQuery: string = \"\";\n  protected groupByQuery: string = \"\";\n  protected orderByQuery: string = \"\";\n  protected limitQuery: string = \"\";\n  protected offsetQuery: string = \"\";\n\n  protected model: new () => Model;\n  protected tableName: string;\n  protected logs: boolean;\n\n  protected selectTemplate: SelectTemplateType;\n  protected whereTemplate: WhereTemplateType;\n\n  /**\n   * @description Constructs a MysqlQueryBuilder instance.\n   * @param model - The model class associated with the table.\n   * @param tableName - The name of the table.\n   * @param logs - A boolean indicating whether to log queries.\n   */\n  protected constructor(\n    model: new () => Model,\n    tableName: string,\n    logs: boolean,\n  ) {\n    this.model = model;\n    this.logs = logs;\n    this.tableName = tableName;\n    this.selectQuery = selectTemplate(this.tableName).selectAll;\n    this.selectTemplate = selectTemplate(this.tableName);\n    this.whereTemplate = whereTemplate(this.tableName);\n  }\n\n  /**\n   * @description Executes the query and retrieves the first result.\n   * @returns A Promise resolving to the first result or null.\n   */\n  public abstract one(): Promise<T | null>;\n\n  /**\n   * @description Executes the query and retrieves multiple results.\n   * @returns A Promise resolving to an array of results.\n   */\n  public abstract many(): Promise<T[]>;\n\n  /**\n   * @description Executes the query and retrieves multiple results.\n   * @returns A Promise resolving to an array of results.\n   */\n  public abstract paginate(\n    page: number,\n    limit: number,\n  ): Promise<PaginatedData<T>>;\n\n  /**\n   * @description Columns are customizable with aliases. By default, without this function, all columns are selected\n   * @param columns\n   */\n  public abstract select(...columns: string[]): QueryBuilders<T>;\n\n  /**\n   *\n   * @param table\n   * @param primaryColumn\n   * @param foreignColumn\n   */\n  public abstract join(\n    table: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): QueryBuilders<T>;\n\n  /**\n   *\n   * @param table\n   * @param primaryColumn\n   * @param foreignColumn\n   */\n  public abstract leftJoin(\n    table: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds a relation to the query.\n   * @param relations - The relations to add.\n   */\n  public abstract addRelations(relations: string[]): QueryBuilders<T>;\n\n  /**\n   * @description Adds a WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract where(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds an AND WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract andWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds an OR WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract orWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds a WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract whereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds an AND WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract andWhereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds an OR WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract orWhereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds a WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract whereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds an OR WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract orWhereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds a WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract whereIn(\n    column: string,\n    values: BaseValues[],\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds an AND WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract andWhereIn(\n    column: string,\n    values: BaseValues[],\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds an OR WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract orWhereIn(\n    column: string,\n    values: BaseValues[],\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds a WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract whereNotIn(\n    column: string,\n    values: BaseValues[],\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds an OR WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract orWhereNotIn(\n    column: string,\n    values: BaseValues[],\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds a WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract whereNull(column: string): QueryBuilders<T>;\n\n  /**\n   * @description Adds an AND WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract andWhereNull(column: string): QueryBuilders<T>;\n\n  /**\n   * @description Adds an OR WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract orWhereNull(column: string): QueryBuilders<T>;\n\n  /**\n   * @description Adds a WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract whereNotNull(column: string): QueryBuilders<T>;\n\n  /**\n   * @description Adds an AND WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract andWhereNotNull(column: string): QueryBuilders<T>;\n\n  /**\n   * @description Adds an OR WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract orWhereNotNull(column: string): QueryBuilders<T>;\n\n  /**\n   * @description Adds a raw WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract rawWhere(query: string): QueryBuilders<T>;\n\n  /**\n   * @description Adds a raw AND WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract rawAndWhere(query: string): QueryBuilders<T>;\n\n  /**\n   * @description Adds a raw OR WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract rawOrWhere(query: string): QueryBuilders<T>;\n\n  /**\n   * @description Adds GROUP BY conditions to the query.\n   * @param columns - The columns to group by.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract groupBy(...columns: BaseValues[]): QueryBuilders<T>;\n\n  /**\n   * @description Adds ORDER BY conditions to the query.\n   * @param column - The column to order by.\n   * @param order - The order direction, either \"ASC\" or \"DESC\".\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract orderBy(\n    column: BaseValues[],\n    order: \"ASC\" | \"DESC\",\n  ): QueryBuilders<T>;\n\n  /**\n   * @description Adds a LIMIT condition to the query.\n   * @param limit - The maximum number of rows to return.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract limit(limit: number): QueryBuilders<T>;\n\n  /**\n   * @description Adds an OFFSET condition to the query.\n   * @param offset - The number of rows to skip.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public abstract offset(offset: number): QueryBuilders<T>;\n\n  protected groupFooterQuery(): string {\n    return (\n      this.groupByQuery + this.orderByQuery + this.limitQuery + this.offsetQuery\n    );\n  }\n}\n","const joinTemplate = (\n  _table: string,\n  relatedTable: string,\n  primaryColumn: string,\n  foreignColumn: string,\n) => {\n  return {\n    innerJoin: () => {\n      return `\\nINNER JOIN ${relatedTable} ON ${primaryColumn} = ${foreignColumn}`;\n    },\n    leftJoin: () => {\n      return `\\nLEFT JOIN ${relatedTable} ON ${primaryColumn} = ${foreignColumn}`;\n    },\n  };\n};\n\nexport default joinTemplate;\n","import { Pool, RowDataPacket } from \"mysql2/promise\";\nimport selectTemplate from \"../Templates/Query/SELECT\";\nimport { Model } from \"../Models/Model\";\nimport { log } from \"../../Logger\";\nimport ModelManagerUtils from \"./MySqlModelManagerUtils\";\nimport whereTemplate, {\n  BaseValues,\n  WhereOperatorType,\n} from \"../Templates/Query/WHERE.TS\";\nimport { QueryBuilder } from \"../QueryBuilder/QueryBuilder\";\nimport {\n  PaginatedData,\n  parseDatabaseDataIntoModelResponse,\n} from \"../../CaseUtils\";\nimport joinTemplate from \"../Templates/Query/JOIN\";\n\nexport class MysqlQueryBuilder<T extends Model> extends QueryBuilder<T> {\n  protected mysqlPool: Pool;\n\n  /**\n   * @description Constructs a MysqlQueryBuilder instance.\n   * @param model - The model class associated with the table.\n   * @param tableName - The name of the table.\n   * @param mysqlPool - The MySQL connection pool.\n   * @param logs - A boolean indicating whether to log queries.\n   */\n  public constructor(\n    model: new () => T,\n    tableName: string,\n    mysqlPool: Pool,\n    logs: boolean,\n  ) {\n    super(model, tableName, logs);\n    this.mysqlPool = mysqlPool;\n  }\n\n  private mergeRetrievedDataIntoModel(model: T, row: RowDataPacket) {\n    Object.entries(row).forEach(([key, value]) => {\n      if (Object.hasOwnProperty.call(model, key)) {\n        Object.assign(model, { [key]: value });\n      } else {\n        model.aliasColumns[key] = value as string | number | boolean;\n      }\n    });\n  }\n\n  /**\n   * @description Executes the query and retrieves the first result.\n   * @returns A Promise resolving to the first result or null.\n   */\n  public async one(): Promise<T | null> {\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      const select = selectTemplate(this.tableName);\n      this.selectQuery = select.selectColumns(`${this.tableName}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    log(query, this.logs);\n    const model = new this.model() as T;\n    try {\n      const [rows] = await this.mysqlPool.query<RowDataPacket[]>(query);\n      const modelData = rows[0];\n\n      this.mergeRetrievedDataIntoModel(model, modelData);\n\n      await ModelManagerUtils.parseQueryBuilderRelations(\n        model,\n        this.relations,\n        this.mysqlPool,\n        this.logs,\n      );\n\n      return parseDatabaseDataIntoModelResponse([model]) as T;\n    } catch (error) {\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Executes the query and retrieves multiple results.\n   * @returns A Promise resolving to an array of results.\n   */\n  public async many(): Promise<T[]> {\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      const select = selectTemplate(this.tableName);\n      this.selectQuery = select.selectColumns(`${this.tableName}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    query += this.groupFooterQuery();\n\n    log(query, this.logs);\n    const model = new this.model() as T;\n    try {\n      const [rows] = await this.mysqlPool.query<RowDataPacket[]>(query);\n      return Promise.all(\n        rows.map(async (row) => {\n          const modelData = rows[0] as T;\n\n          this.mergeRetrievedDataIntoModel(model, row);\n\n          // relations parsing on the queried model\n          await ModelManagerUtils.parseQueryBuilderRelations(\n            model,\n            this.relations,\n            this.mysqlPool,\n            this.logs,\n          );\n\n          return parseDatabaseDataIntoModelResponse([model]) as T;\n        }),\n      );\n    } catch (error) {\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Paginates the query results with the given page and limit.\n   * @param page\n   * @param limit\n   */\n  public async paginate(\n    page: number,\n    limit: number,\n  ): Promise<PaginatedData<T>> {\n    const models = await this.many();\n    return parseDatabaseDataIntoModelResponse(models, {\n      page,\n      limit,\n    }) as PaginatedData<T>;\n  }\n\n  /**\n   * @description Columns are customizable with aliases. By default, without this function, all columns are selected\n   * @param columns\n   */\n  public select(...columns: string[]) {\n    const select = selectTemplate(this.tableName);\n    this.selectQuery = select.selectColumns(...columns);\n    return this;\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): MysqlQueryBuilder<T> {\n    const join = joinTemplate(\n      this.tableName,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): MysqlQueryBuilder<T> {\n    const join = joinTemplate(\n      this.tableName,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  public addRelations(relations: string[]) {\n    this.relations = relations;\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public where(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): this {\n    if (this.whereQuery) {\n      this.whereQuery += this.whereTemplate.andWhere(column, value, operator);\n      return this;\n    }\n    this.whereQuery = this.whereTemplate.where(column, value, operator);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public andWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.where(column, value, operator);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhere(\n      column,\n      value,\n      operator,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE condition to the query.\n   * @param column - The column to filter.\n   * @param operator - The comparison operator.\n   * @param value - The value to compare against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public orWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.where(column, value, operator);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhere(\n      column,\n      value,\n      operator,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public whereBetween(column: string, min: BaseValues, max: BaseValues): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public andWhereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public orWhereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public whereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNotBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNotBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT BETWEEN condition to the query.\n   * @param column - The column to filter.\n   * @param min - The minimum value for the range.\n   * @param max - The maximum value for the range.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public orWhereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNotBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public whereIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereIn(column, values);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public andWhereIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereIn(column, values);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to match against.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public orWhereIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereIn(column, values);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public whereNotIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNotIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNotIn(column, values);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT IN condition to the query.\n   * @param column - The column to filter.\n   * @param values - An array of values to exclude.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public orWhereNotIn(column: string, values: BaseValues[]): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNotIn(\n      column,\n      values,\n    );\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public whereNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public andWhereNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public orWhereNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds a WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public whereNotNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNotNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNotNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds an AND WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public andWhereNotNull(column: string): this {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereNotNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds an OR WHERE NOT NULL condition to the query.\n   * @param column - The column to filter.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public orWhereNotNull(column: string) {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNotNull(column);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public rawWhere(query: string) {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.rawAndWhere(query);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).rawWhere(query);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw AND WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public rawAndWhere(query: string) {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.rawWhere(query);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).rawAndWhere(query);\n    return this;\n  }\n\n  /**\n   * @description Adds a raw OR WHERE condition to the query.\n   * @param query - The raw SQL WHERE condition.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public rawOrWhere(query: string) {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.rawWhere(query);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).rawOrWhere(query);\n    return this;\n  }\n\n  /**\n   * @description Adds GROUP BY conditions to the query.\n   * @param columns - The columns to group by.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public groupBy(...columns: string[]) {\n    this.groupByQuery = this.selectTemplate.groupBy(...columns);\n    return this;\n  }\n\n  /**\n   * @description Adds ORDER BY conditions to the query.\n   * @param column - The column to order by.\n   * @param order - The order direction, either \"ASC\" or \"DESC\".\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public orderBy(column: string[], order: \"ASC\" | \"DESC\") {\n    this.orderByQuery = this.selectTemplate.orderBy(column, order);\n    return this;\n  }\n\n  /**\n   * @description Adds a LIMIT condition to the query.\n   * @param limit - The maximum number of rows to return.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public limit(limit: number) {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    return this;\n  }\n\n  /**\n   * @description Adds an OFFSET condition to the query.\n   * @param offset - The number of rows to skip.\n   * @returns The MysqlQueryBuilder instance for chaining.\n   */\n  public offset(offset: number) {\n    this.offsetQuery = this.selectTemplate.offset(offset);\n    return this;\n  }\n\n  protected groupFooterQuery(): string {\n    return (\n      this.groupByQuery + this.orderByQuery + this.limitQuery + this.offsetQuery\n    );\n  }\n}\n","export const BEGIN_TRANSACTION = \"BEGIN; \\n\";\nexport const COMMIT_TRANSACTION = \"COMMIT; \\n\";\nexport const ROLLBACK_TRANSACTION = \"ROLLBACK; \\n\";\n","import { Pool, PoolConnection, RowDataPacket } from \"mysql2/promise\";\nimport { BEGIN_TRANSACTION } from \"../Templates/Query/TRANSACTION\";\nimport { COMMIT_TRANSACTION } from \"../Templates/Query/TRANSACTION\";\nimport { ROLLBACK_TRANSACTION } from \"../Templates/Query/TRANSACTION\";\nimport { log, queryError } from \"../../Logger\";\nimport { Metadata, Model } from \"../Models/Model\";\nimport selectTemplate from \"../Templates/Query/SELECT\";\n\nexport class MysqlTransaction {\n  protected tableName: string;\n  protected mysql: Pool;\n  protected mysqlConnection!: PoolConnection;\n  protected logs: boolean;\n\n  constructor(mysql: Pool, tableName: string, logs: boolean) {\n    this.logs = logs;\n    this.mysql = mysql;\n    this.tableName = tableName;\n  }\n\n  public async queryInsert<T extends Model>(\n    query: string,\n    metadata: Metadata,\n    params?: any[],\n  ): Promise<T> {\n    if (!this.mysqlConnection) {\n      throw new Error(\"MysqlTransaction not started.\");\n    }\n\n    log(query, this.logs);\n    const [rows]: any = await this.mysqlConnection.query<RowDataPacket[]>(\n      query,\n      params,\n    );\n    const insertId = rows.insertId;\n    const select = selectTemplate(this.tableName).selectById(insertId);\n    const [savedModel] =\n      await this.mysqlConnection.query<RowDataPacket[]>(select);\n    Object.assign(savedModel[0], { metadata });\n    return savedModel[0] as T;\n  }\n\n  public async queryUpdate<T extends Model>(\n    query: string,\n    params?: any[],\n  ): Promise<number> {\n    if (!this.mysqlConnection) {\n      throw new Error(\"MysqlTransaction not started.\");\n    }\n\n    log(query, this.logs);\n    const [rows]: any = await this.mysqlConnection.query<RowDataPacket[]>(\n      query,\n      params,\n    );\n    return rows.affectedRows;\n  }\n\n  public async queryDelete(query: string, params?: any[]): Promise<number> {\n    if (!this.mysqlConnection) {\n      throw new Error(\"MysqlTransaction not started.\");\n    }\n\n    log(query, this.logs);\n    const [rows]: any = await this.mysqlConnection.query<RowDataPacket[]>(\n      query,\n      params,\n    );\n\n    return rows.affectedRows;\n  }\n\n  /**\n   * Start transaction.\n   */\n  async start(): Promise<void> {\n    try {\n      log(BEGIN_TRANSACTION, this.logs);\n      this.mysqlConnection = await this.mysql.getConnection();\n      await this.mysqlConnection.query(BEGIN_TRANSACTION);\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to start transaction \" + error);\n    }\n  }\n\n  /**\n   * Commit transaction.\n   */\n  async commit(): Promise<void> {\n    if (!this.mysqlConnection) {\n      throw new Error(\"MysqlTransaction not started.\");\n    }\n\n    try {\n      log(COMMIT_TRANSACTION, this.logs);\n      await this.mysqlConnection.query(COMMIT_TRANSACTION);\n      this.mysqlConnection.release();\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to commit transaction \" + error);\n    }\n  }\n\n  /**\n   * Rollback transaction.\n   */\n  async rollback(): Promise<void> {\n    if (!this.mysqlConnection) {\n      return;\n    }\n\n    try {\n      log(ROLLBACK_TRANSACTION, this.logs);\n      await this.mysqlConnection.query(ROLLBACK_TRANSACTION);\n      this.mysqlConnection.release();\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to rollback transaction \" + error);\n    }\n  }\n}\n","/*\n * This class is used to make operations on models\n */\nimport { Model } from \"../Model\";\nimport { FindOneType, FindType } from \"./ModelManagerTypes\";\nimport { MysqlQueryBuilder } from \"../../Mysql/MysqlQueryBuilder\";\nimport { MysqlTransaction } from \"../../Mysql/MysqlTransaction\";\nimport { PostgresTransaction } from \"../../Postgres/PostgresTransaction\";\nimport { PostgresQueryBuilder } from \"../../Postgres/PostgresQueryBuilder\";\n\nexport abstract class AbstractModelManager<T extends Model> {\n  protected logs: boolean;\n  protected model: new () => T;\n  protected modelInstance: T;\n  public tableName: string;\n\n  protected constructor(model: new () => T, logs: boolean) {\n    this.logs = logs;\n    this.model = model;\n    this.modelInstance = new this.model();\n    this.tableName = this.modelInstance.metadata.tableName;\n  }\n\n  public abstract find(input?: FindType): Promise<T[]>;\n\n  public abstract findOne(input: FindOneType): Promise<T | null>;\n\n  public abstract findOneById(id: string | number): Promise<T | null>;\n\n  public abstract save(\n    model: T,\n    trx?: MysqlTransaction | PostgresTransaction,\n  ): Promise<T | null>;\n\n  public abstract update(\n    model: T,\n    trx?: MysqlTransaction | PostgresTransaction,\n  ): Promise<T | null>;\n\n  public abstract deleteByColumn(\n    column: string,\n    value: string | number | boolean,\n    trx?: MysqlTransaction | PostgresTransaction,\n  ): Promise<number> | Promise<number | null>;\n\n  public abstract delete(\n    model: T,\n    trx?: MysqlTransaction | PostgresTransaction,\n  ): Promise<T | null>;\n\n  public abstract createTransaction(): MysqlTransaction | PostgresTransaction;\n\n  public abstract query(): MysqlQueryBuilder<T> | PostgresQueryBuilder<T>;\n}\n","/*\n * This class is used to make operations on models\n */\nimport { Model } from \"../Models/Model\";\nimport {\n  FindOneType,\n  FindType,\n} from \"../Models/ModelManager/ModelManagerTypes\";\nimport mysql, { Pool, RowDataPacket } from \"mysql2/promise\";\nimport selectTemplate from \"../Templates/Query/SELECT\";\nimport ModelManagerQueryUtils from \"./MySqlModelManagerUtils\";\nimport { log, queryError } from \"../../Logger\";\nimport { MysqlQueryBuilder } from \"./MysqlQueryBuilder\";\nimport MySqlModelManagerUtils from \"./MySqlModelManagerUtils\";\nimport { MysqlTransaction } from \"./MysqlTransaction\";\nimport { AbstractModelManager } from \"../Models/ModelManager/AbstractModelManager\";\nimport { parseDatabaseDataIntoModelResponse } from \"../../CaseUtils\";\n\nexport class MysqlModelManager<\n  T extends Model,\n> extends AbstractModelManager<T> {\n  protected mysqlPool: mysql.Pool;\n\n  /**\n   * Constructor for MysqlModelManager class.\n   *\n   * @param {new () => T} model - Model constructor.\n   * @param {Pool} mysqlConnection - MySQL connection pool.\n   * @param {boolean} logs - Flag to enable or disable logging.\n   */\n  constructor(model: new () => T, mysqlConnection: mysql.Pool, logs: boolean) {\n    super(model, logs);\n    this.mysqlPool = mysqlConnection;\n  }\n\n  /**\n   * Find method to retrieve multiple records from the database based on the input conditions.\n   *\n   * @param {FindType} input - Optional query parameters for filtering, ordering, and pagination.\n   * @returns Promise resolving to an array of models.\n   */\n  public async find(input?: FindType): Promise<T[]> {\n    try {\n      if (!input) {\n        const select = selectTemplate(this.tableName);\n        log(select.selectAll, this.logs);\n        const [rows] = await this.mysqlPool.query<RowDataPacket[]>(\n          select.selectAll,\n        );\n\n        const models =\n          rows.map((row) => {\n            const model = row as T;\n            model.metadata = this.modelInstance.metadata;\n            model.aliasColumns = this.modelInstance.aliasColumns;\n            model.setProps = this.modelInstance.setProps;\n            return parseDatabaseDataIntoModelResponse([model]) as T;\n          }) || [];\n        return (\n          (models.map((model) =>\n            parseDatabaseDataIntoModelResponse([model]),\n          ) as T[]) || []\n        );\n      }\n\n      const query = ModelManagerQueryUtils.parseSelectQueryInput(\n        new this.model(),\n        input,\n      );\n      log(query, this.logs);\n\n      const [rows] = await this.mysqlPool.query<RowDataPacket[]>(query);\n      return Promise.all(\n        rows.map(async (row) => {\n          const model = new this.model();\n          const modelData = rows[0] as T;\n\n          // merge model data into model\n          Object.assign(model, modelData);\n\n          // relations parsing on the queried model\n          await MySqlModelManagerUtils.parseRelationInput(\n            model,\n            input,\n            this.mysqlPool,\n            this.logs,\n          );\n\n          return parseDatabaseDataIntoModelResponse([model]) as T;\n        }),\n      );\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record from the database based on the input conditions.\n   *\n   * @param {FindOneType} input - Query parameters for filtering and selecting a single record.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOne(input: FindOneType): Promise<T | null> {\n    const model = new this.model();\n    try {\n      const query = ModelManagerQueryUtils.parseSelectQueryInput(model, input);\n      log(query, this.logs);\n      const [rows] = await this.mysqlPool.query<RowDataPacket[]>(query);\n      const modelData = rows[0] as T;\n\n      // merge model data into model\n      Object.assign(model, modelData);\n\n      // relations parsing on the queried model\n      await MySqlModelManagerUtils.parseRelationInput(\n        model,\n        input,\n        this.mysqlPool,\n        this.logs,\n      );\n\n      return parseDatabaseDataIntoModelResponse([model]) as T;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record by its ID from the database.\n   *\n   * @param {string | number} id - ID of the record to retrieve.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOneById(id: string | number): Promise<T | null> {\n    const select = selectTemplate(this.tableName);\n    try {\n      const stringedId = typeof id === \"number\" ? id.toString() : id;\n      const query = select.selectById(stringedId);\n      log(query, this.logs);\n      const [rows] = await this.mysqlPool.query<RowDataPacket[]>(query);\n      const modelData = rows[0] as T;\n      return parseDatabaseDataIntoModelResponse([modelData]) as T;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Save a new model instance to the database.\n   *\n   * @param {Model} model - Model instance to be saved.\n   * @param {MysqlTransaction} trx - MysqlTransaction to be used on the save operation.\n   * @returns Promise resolving to the saved model or null if saving fails.\n   */\n  public async save(model: T, trx?: MysqlTransaction): Promise<T | null> {\n    if (trx) {\n      return await trx.queryInsert<T>(\n        ModelManagerQueryUtils.parseInsert(model),\n        this.modelInstance.metadata,\n      );\n    }\n\n    try {\n      const insertQuery = ModelManagerQueryUtils.parseInsert(model);\n      log(insertQuery, this.logs);\n      const [result]: any =\n        await this.mysqlPool.query<RowDataPacket[]>(insertQuery);\n      return await this.findOneById(result[\"insertId\"]);\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Update an existing model instance in the database.\n   * @param {Model} model - Model instance to be updated.\n   * @param {MysqlTransaction} trx - MysqlTransaction to be used on the update operation.\n   * @returns Promise resolving to the updated model or null if updating fails.\n   */\n  public async update(model: T, trx?: MysqlTransaction): Promise<T | null> {\n    const primaryKeyValue = this.modelInstance.metadata.primaryKey;\n    if (trx) {\n      await trx.queryUpdate<T>(ModelManagerQueryUtils.parseUpdate(model));\n\n      return await this.findOneById(\n        model[primaryKeyValue as keyof T] as string | number,\n      );\n    }\n\n    try {\n      const updateQuery = ModelManagerQueryUtils.parseUpdate(model);\n      log(updateQuery, this.logs);\n      await this.mysqlPool.query<RowDataPacket[]>(updateQuery);\n\n      return await this.findOneById(\n        model[primaryKeyValue as keyof T] as string | number,\n      );\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Delete a record from the database from the given column and value.\n   *\n   * @param {string} column - Column to filter by.\n   * @param {string | number | boolean} value - Value to filter by.\n   * @param {MysqlTransaction} trx - MysqlTransaction to be used on the delete operation.\n   * @returns Promise resolving to affected rows count\n   */\n  public async deleteByColumn(\n    column: string,\n    value: string | number | boolean,\n    trx?: MysqlTransaction,\n  ): Promise<number> {\n    if (trx) {\n      return await trx.queryDelete(\n        ModelManagerQueryUtils.parseDelete(this.tableName, column, value),\n      );\n    }\n\n    try {\n      const deleteQuery = ModelManagerQueryUtils.parseDelete(\n        this.tableName,\n        column,\n        value,\n      );\n      log(deleteQuery, this.logs);\n      const [rows]: any =\n        await this.mysqlPool.query<RowDataPacket[]>(deleteQuery);\n      return rows.affectedRows;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Delete a record from the database from the given model.\n   *\n   * @param {Model} model - Model to delete.\n   * @param {MysqlTransaction} trx - MysqlTransaction to be used on the delete operation.\n   * @returns Promise resolving to the deleted model or null if deleting fails.\n   */\n  public async delete(model: T, trx?: MysqlTransaction): Promise<T | null> {\n    try {\n      if (!model.metadata.primaryKey) {\n        throw new Error(\n          \"Model \" +\n            model.metadata.tableName +\n            \" has no primary key to be deleted from, try deleteByColumn\",\n        );\n      }\n      const deleteQuery = ModelManagerQueryUtils.parseDelete(\n        this.tableName,\n        model.metadata.primaryKey,\n        model[model.metadata.primaryKey as keyof T] as string,\n      );\n\n      if (trx) {\n        await trx.queryDelete(deleteQuery);\n        return model;\n      }\n\n      log(deleteQuery, this.logs);\n      await this.mysqlPool.query<RowDataPacket[]>(deleteQuery);\n      return model;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Creates a new transaction.\n   * @returns {MysqlTransaction} - Instance of MysqlTransaction.\n   */\n  public createTransaction(): MysqlTransaction {\n    return new MysqlTransaction(this.mysqlPool, this.tableName, this.logs);\n  }\n\n  /**\n   * Create and return a new instance of the MysqlQueryBuilder for building more complex SQL queries.\n   *\n   * @returns {MysqlQueryBuilder<Model>} - Instance of MysqlQueryBuilder.\n   */\n  public query(): MysqlQueryBuilder<T> {\n    return new MysqlQueryBuilder<T>(\n      this.model,\n      this.tableName,\n      this.mysqlPool,\n      this.logs,\n    );\n  }\n}\n","import {\n  FindType,\n  FindOneType,\n} from \"../Models/ModelManager/ModelManagerTypes\";\nimport selectTemplate from \"../Templates/Query/SELECT\";\nimport { Model } from \"../Models/Model\";\nimport insertTemplate from \"../Templates/Query/INSERT\";\nimport updateTemplate from \"../Templates/Query/UPDATE\";\nimport deleteTemplate from \"../Templates/Query/DELETE\";\nimport { Relation } from \"../Models/Relations/Relation\";\nimport { log, queryError } from \"../../Logger\";\nimport relationTemplates from \"../Templates/Query/RELATIONS\";\nimport { Pool, QueryResult, QueryResultRow } from \"pg\";\nimport whereTemplate from \"../Templates/Query/WHERE.TS\";\nimport pg from \"pg\";\n\nclass PostgresModelManagerUtils<T extends Model> {\n  public parseSelectQueryInput(\n    model: T,\n    input: FindType | FindOneType,\n  ): string {\n    let query = \"\";\n    query += this.parseSelect(model.metadata.tableName, input);\n    query += this.parseWhere(model.metadata.tableName, input);\n    query += this.parseQueryFooter(model.metadata.tableName, input);\n\n    return query;\n  }\n\n  private parseSelect(\n    tableName: string,\n    input: FindType | FindOneType,\n  ): string {\n    const select = selectTemplate(tableName);\n    return input.select\n      ? select.selectColumns(...input.select)\n      : select.selectAll;\n  }\n\n  private parseWhere(tableName: string, input: FindType | FindOneType): string {\n    const where = whereTemplate(tableName);\n    if (!input.where) {\n      return \"\";\n    }\n\n    let query = \"\";\n    const entries = Object.entries(input.where);\n    for (let index = 0; index < entries.length; index++) {\n      const [key, value] = entries[index];\n\n      if (index === 0) {\n        query += where.where(key, value);\n        continue;\n      }\n      query += where.andWhere(key, value);\n    }\n\n    return query;\n  }\n\n  private parseQueryFooter(\n    tableName: string,\n    input: FindType | FindOneType,\n  ): string {\n    if (!this.isFindType(input)) {\n      return \"\";\n    }\n\n    const select = selectTemplate(tableName);\n    let query = \"\";\n    if (input.offset) {\n      query += select.offset(input.offset);\n    }\n\n    if (input.groupBy) {\n      query += select.groupBy(...input.groupBy);\n    }\n\n    if (input.orderBy) {\n      query += select.orderBy([...input.orderBy.columns], input.orderBy.type);\n    }\n\n    if (input.limit) {\n      query += select.limit(input.limit);\n    }\n\n    return query;\n  }\n\n  public parseInsert(model: T): string {\n    const filteredModel = this.filterRelationsAndMetadata(model);\n    const keys = Object.keys(filteredModel);\n    const values = Object.values(filteredModel);\n    const insert = insertTemplate(model.metadata.tableName);\n\n    return insert.insert(keys, values);\n  }\n\n  public parseUpdate(model: T, modelName?: string): string {\n    const update = updateTemplate(modelName || model.metadata.tableName);\n    const filteredModel = this.filterRelationsAndMetadata(model);\n    const keys = Object.keys(filteredModel);\n    const values = Object.values(filteredModel);\n\n    const primaryKey = model.metadata.primaryKey as string;\n    const primaryKeyValue = model[primaryKey as keyof T];\n\n    return update.update(keys, values, primaryKey, primaryKeyValue as string);\n  }\n\n  private filterRelationsAndMetadata(model: T): T {\n    const filteredModel = {};\n\n    const keys = Object.keys(model);\n    for (const key of keys) {\n      if (key === \"metadata\") {\n        continue;\n      }\n\n      if (\n        typeof model[key as keyof T] === \"object\" &&\n        (model[key as keyof T] !== null ||\n          !Array.isArray(model[key as keyof T]))\n      ) {\n        continue;\n      }\n\n      Object.assign(filteredModel, { [key]: model[key as keyof T] });\n    }\n\n    return filteredModel as T;\n  }\n\n  public parseDelete(\n    tableName: string,\n    column: string,\n    value: string | number | boolean,\n  ): string {\n    return deleteTemplate(tableName).delete(column, value.toString());\n  }\n\n  private isFindType(input: FindType | FindOneType): input is FindType {\n    const instance = input as FindType;\n    return (\n      instance.hasOwnProperty(\"offset\") ||\n      instance.hasOwnProperty(\"groupBy\") ||\n      instance.hasOwnProperty(\"orderBy\") ||\n      instance.hasOwnProperty(\"limit\")\n    );\n  }\n\n  private getRelationFromModel(model: T, relationField: string): Relation {\n    const relation = model[relationField as keyof T] as Relation;\n    if (!relation) {\n      throw new Error(\n        \"Relation \" +\n          relationField +\n          \" not found in model \" +\n          model.metadata.tableName,\n      );\n    }\n\n    return relation;\n  }\n\n  // Parses and fills input relations directly into the model\n  public async parseRelationInput(\n    model: T,\n    input: FindOneType,\n    pgPool: Pool,\n    logs: boolean,\n  ): Promise<void> {\n    if (!input.relations) {\n      return;\n    }\n\n    if (!model.metadata.primaryKey) {\n      throw new Error(\"Model does not have a primary key\");\n    }\n\n    try {\n      const relationPromises = input.relations.map(\n        async (inputRelation: string) => {\n          const relation = this.getRelationFromModel(model, inputRelation);\n          const relationQuery = relationTemplates(model, relation);\n          console.log(relationQuery);\n\n          const { rows }: QueryResult<QueryResultRow> =\n            await pgPool.query(relationQuery);\n          if (rows.length === 0) {\n            Object.assign(model, { [inputRelation as keyof T]: null });\n            log(relationQuery, logs);\n            return;\n          }\n\n          if (rows.length === 1) {\n            Object.assign(model, {\n              [inputRelation as keyof T]: rows[0],\n            });\n            log(relationQuery, logs);\n            return;\n          }\n\n          Object.assign(model, { [inputRelation as keyof T]: rows });\n          log(relationQuery, logs);\n        },\n      );\n\n      await Promise.all(relationPromises);\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to parse relations \" + error);\n    }\n  }\n\n  // Parses and fills input relations directly into the model\n  public async parseQueryBuilderRelations(\n    model: T,\n    input: string[],\n    pgConnection: pg.Pool,\n    logs: boolean,\n  ): Promise<void> {\n    if (input.length === 0) {\n      return;\n    }\n\n    if (!model.metadata.primaryKey) {\n      throw new Error(\"Model does not have a primary key\");\n    }\n\n    let relationQuery: string = \"\";\n    try {\n      const relationPromises = input.map(async (inputRelation: string) => {\n        const relation = this.getRelationFromModel(model, inputRelation);\n        relationQuery = relationTemplates(model, relation);\n\n        // Changed to use pgConnection.query instead of mysqlConnection.query\n        const result = await pgConnection.query(relationQuery);\n        const relatedModels = result.rows;\n\n        if (relatedModels.length === 0) {\n          Object.assign(model, { [inputRelation as keyof T]: null });\n        } else if (relatedModels.length === 1) {\n          Object.assign(model, {\n            [inputRelation as keyof T]: relatedModels[0],\n          });\n        } else {\n          Object.assign(model, { [inputRelation as keyof T]: relatedModels });\n        }\n        log(relationQuery, logs);\n      });\n\n      await Promise.all(relationPromises);\n    } catch (error) {\n      queryError(\"Query Error: \" + relationQuery + error);\n      throw new Error(\"Failed to parse relations \" + error);\n    }\n  }\n}\n\nexport default new PostgresModelManagerUtils();\n","import { Pool, QueryResult, PoolClient } from \"pg\";\nimport { BEGIN_TRANSACTION } from \"../Templates/Query/TRANSACTION\";\nimport { COMMIT_TRANSACTION } from \"../Templates/Query/TRANSACTION\";\nimport { ROLLBACK_TRANSACTION } from \"../Templates/Query/TRANSACTION\";\nimport { log, queryError } from \"../../Logger\";\nimport { Metadata, Model } from \"../Models/Model\";\nimport selectTemplate from \"../Templates/Query/SELECT\";\n\nexport class PostgresTransaction {\n  protected tableName: string;\n  protected pgPool: Pool;\n  protected pgClient!: PoolClient;\n  protected logs: boolean;\n\n  constructor(pgPool: Pool, tableName: string, logs: boolean) {\n    this.logs = logs;\n    this.pgPool = pgPool;\n    this.tableName = tableName;\n  }\n\n  public async queryInsert<T extends Model>(\n    query: string,\n    metadata: Metadata,\n    params?: any[],\n  ): Promise<T> {\n    if (!this.pgClient) {\n      throw new Error(\"PostgresTransaction not started.\");\n    }\n\n    try {\n      log(query, this.logs);\n      const { rows }: QueryResult<T> = await this.pgClient.query<T>(\n        query,\n        params,\n      );\n\n      const insertId = rows[0][metadata.primaryKey as keyof T];\n      const select = selectTemplate(this.tableName).selectById(\n        insertId as string,\n      );\n      const { rows: savedModel } = await this.pgClient.query<T>(select);\n      return savedModel[0];\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to execute insert query in transaction \" + error);\n    }\n  }\n\n  public async queryUpdate<T extends Model>(\n    query: string,\n    params?: any[],\n  ): Promise<number | null> {\n    if (!this.pgClient) {\n      throw new Error(\"PostgresTransaction not started.\");\n    }\n\n    try {\n      log(query, this.logs);\n      const { rowCount }: QueryResult = await this.pgClient.query(\n        query,\n        params,\n      );\n      return rowCount;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to execute update query in transaction \" + error);\n    }\n  }\n\n  public async queryDelete(\n    query: string,\n    params?: any[],\n  ): Promise<number | null> {\n    if (!this.pgClient) {\n      throw new Error(\"PostgresTransaction not started.\");\n    }\n\n    try {\n      log(query, this.logs);\n      const { rowCount }: QueryResult = await this.pgClient.query(\n        query,\n        params,\n      );\n      return rowCount;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to execute delete query in transaction \" + error);\n    }\n  }\n\n  /**\n   * Start transaction.\n   */\n  async start(): Promise<void> {\n    try {\n      this.pgClient = await this.pgPool.connect();\n      await this.pgClient.query(BEGIN_TRANSACTION);\n      log(BEGIN_TRANSACTION, this.logs);\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to start transaction \" + error);\n    }\n  }\n\n  /**\n   * Commit transaction.\n   */\n  async commit(): Promise<void> {\n    if (!this.pgClient) {\n      throw new Error(\"PostgresTransaction not started.\");\n    }\n\n    try {\n      log(COMMIT_TRANSACTION, this.logs);\n      await this.pgClient.query(COMMIT_TRANSACTION);\n      this.pgClient.release();\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to commit transaction \" + error);\n    }\n  }\n\n  /**\n   * Rollback transaction.\n   */\n  async rollback(): Promise<void> {\n    if (!this.pgClient) {\n      return;\n    }\n\n    try {\n      log(ROLLBACK_TRANSACTION, this.logs);\n      await this.pgClient.query(ROLLBACK_TRANSACTION);\n      this.pgClient.release();\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Failed to rollback transaction \" + error);\n    }\n  }\n}\n","import { Model } from \"../Models/Model\";\nimport { QueryBuilder } from \"../QueryBuilder/QueryBuilder\";\nimport { Pool } from \"pg\";\nimport whereTemplate, {\n  BaseValues,\n  WhereOperatorType,\n} from \"../Templates/Query/WHERE.TS\";\nimport selectTemplate from \"../Templates/Query/SELECT\";\nimport { log } from \"../../Logger\";\nimport {\n  PaginatedData,\n  parseDatabaseDataIntoModelResponse,\n} from \"../../CaseUtils\";\nimport PostgresModelManagerUtils from \"./PostgresModelManagerUtils\";\nimport joinTemplate from \"../Templates/Query/JOIN\";\n\nexport class PostgresQueryBuilder<T extends Model> extends QueryBuilder<T> {\n  protected pgPool: Pool;\n\n  public constructor(\n    model: new () => T,\n    tableName: string,\n    pgPool: Pool,\n    logs: boolean,\n  ) {\n    super(model, tableName, logs);\n    this.pgPool = pgPool;\n  }\n\n  private mergeRetrievedDataIntoModel(model: T, row: any) {\n    Object.entries(row).forEach(([key, value]) => {\n      if (Object.hasOwnProperty.call(model, key)) {\n        Object.assign(model, { [key]: value });\n      } else {\n        model.aliasColumns[key] = value as string | number | boolean;\n      }\n    });\n  }\n\n  public async one(): Promise<T | null> {\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      const select = selectTemplate(this.tableName);\n      this.selectQuery = select.selectColumns(`${this.tableName}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    log(query, this.logs);\n    const model = new this.model() as T;\n    try {\n      const result = await this.pgPool.query(query);\n      const modelData = result.rows[0];\n\n      if (modelData) {\n        this.mergeRetrievedDataIntoModel(model, modelData);\n\n        await PostgresModelManagerUtils.parseQueryBuilderRelations(\n          model,\n          this.relations,\n          this.pgPool,\n          this.logs,\n        );\n\n        return parseDatabaseDataIntoModelResponse([model]) as T;\n      }\n\n      return null;\n    } catch (error) {\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  public async many(): Promise<T[]> {\n    let query: string = \"\";\n    if (this.joinQuery && !this.selectQuery) {\n      const select = selectTemplate(this.tableName);\n      this.selectQuery = select.selectColumns(`${this.tableName}.*`);\n    }\n    query = this.selectQuery + this.joinQuery;\n\n    if (this.whereQuery) {\n      query += this.whereQuery;\n    }\n\n    query += this.groupFooterQuery();\n\n    log(query, this.logs);\n    const modelInstance = new this.model() as T;\n    try {\n      const result = await this.pgPool.query(query);\n      const rows = result.rows;\n\n      return Promise.all(\n        rows.map(async (row) => {\n          const modelData = row as T;\n\n          const rowModel = new this.model() as T;\n          this.mergeRetrievedDataIntoModel(rowModel, modelData);\n\n          await PostgresModelManagerUtils.parseQueryBuilderRelations(\n            rowModel,\n            this.relations,\n            this.pgPool,\n            this.logs,\n          );\n\n          return parseDatabaseDataIntoModelResponse([rowModel]) as T;\n        }),\n      );\n    } catch (error: any) {\n      throw new Error(\"Query failed: \" + error.message);\n    }\n  }\n\n  /**\n   * @description Paginates the query results with the given page and limit.\n   * @param page\n   * @param limit\n   */\n  public async paginate(\n    page: number,\n    limit: number,\n  ): Promise<PaginatedData<T>> {\n    const models = await this.many();\n    return parseDatabaseDataIntoModelResponse(models, {\n      page,\n      limit,\n    }) as PaginatedData<T>;\n  }\n\n  public select(...columns: string[]): PostgresQueryBuilder<T> {\n    const select = selectTemplate(this.tableName);\n    this.selectQuery = select.selectColumns(...columns);\n    return this;\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public join(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): PostgresQueryBuilder<T> {\n    const join = joinTemplate(\n      this.tableName,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  /**\n   *\n   * @param relationTable - The name of the related table.\n   * @param primaryColumn - The name of the primary column in the caller table.\n   * @param foreignColumn - The name of the foreign column in the related table.\n   */\n  public leftJoin(\n    relationTable: string,\n    primaryColumn: string,\n    foreignColumn: string,\n  ): PostgresQueryBuilder<T> {\n    const join = joinTemplate(\n      this.tableName,\n      relationTable,\n      primaryColumn,\n      foreignColumn,\n    );\n    this.joinQuery += join.innerJoin();\n    return this;\n  }\n\n  public addRelations(relations: string[]): PostgresQueryBuilder<T> {\n    this.relations = relations;\n    return this;\n  }\n\n  public where(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): PostgresQueryBuilder<T> {\n    if (this.whereQuery) {\n      this.whereQuery += this.whereTemplate.andWhere(column, value, operator);\n      return this;\n    }\n    this.whereQuery = this.whereTemplate.where(column, value, operator);\n    return this;\n  }\n\n  public andWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.where(column, value, operator);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhere(\n      column,\n      value,\n      operator,\n    );\n    return this;\n  }\n\n  public andWhereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  public andWhereIn(\n    column: string,\n    values: BaseValues[],\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereIn(column, values);\n    return this;\n  }\n\n  public andWhereNotNull(column: string): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereNotNull(column);\n    return this;\n  }\n\n  public andWhereNull(column: string): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).andWhereNull(column);\n    return this;\n  }\n\n  public groupBy(columns: string): PostgresQueryBuilder<T> {\n    this.groupByQuery = this.selectTemplate.groupBy(...columns);\n    return this;\n  }\n\n  public limit(limit: number): PostgresQueryBuilder<T> {\n    this.limitQuery = this.selectTemplate.limit(limit);\n    return this;\n  }\n\n  public offset(offset: number): PostgresQueryBuilder<T> {\n    this.offsetQuery = this.selectTemplate.offset(offset);\n    return this;\n  }\n\n  public orWhere(\n    column: string,\n    operator: WhereOperatorType,\n    value: BaseValues,\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.where(column, value, operator);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhere(\n      column,\n      value,\n      operator,\n    );\n    return this;\n  }\n\n  public orWhereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  public orWhereIn(\n    column: string,\n    values: BaseValues[],\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereIn(column, values);\n    return this;\n  }\n\n  public orWhereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNotBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  public orWhereNotIn(\n    column: string,\n    values: BaseValues[],\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNotIn(\n      column,\n      values,\n    );\n    return this;\n  }\n\n  public orWhereNotNull(column: string): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNotNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNotNull(column);\n    return this;\n  }\n\n  public orWhereNull(column: string): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).orWhereNull(column);\n    return this;\n  }\n\n  public orderBy(\n    column: string[],\n    order: \"ASC\" | \"DESC\",\n  ): PostgresQueryBuilder<T> {\n    this.orderByQuery = this.selectTemplate.orderBy(column, order);\n    return this;\n  }\n\n  public rawAndWhere(query: string): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.rawWhere(query);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).rawAndWhere(query);\n    return this;\n  }\n\n  public rawOrWhere(query: string): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.rawWhere(query);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).rawOrWhere(query);\n    return this;\n  }\n\n  public rawWhere(query: string): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.rawAndWhere(query);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).rawWhere(query);\n    return this;\n  }\n\n  public whereBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  public whereIn(\n    column: string,\n    values: BaseValues[],\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.whereIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereIn(column, values);\n    return this;\n  }\n\n  public whereNotBetween(\n    column: string,\n    min: BaseValues,\n    max: BaseValues,\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNotBetween(column, min, max);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNotBetween(\n      column,\n      min,\n      max,\n    );\n    return this;\n  }\n\n  public whereNotIn(\n    column: string,\n    values: BaseValues[],\n  ): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNotIn(column, values);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNotIn(column, values);\n    return this;\n  }\n\n  public whereNotNull(column: string): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNotNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNotNull(column);\n    return this;\n  }\n\n  public whereNull(column: string): PostgresQueryBuilder<T> {\n    if (!this.whereQuery) {\n      this.whereQuery = this.whereTemplate.andWhereNull(column);\n      return this;\n    }\n    this.whereQuery += whereTemplate(this.tableName).whereNull(column);\n    return this;\n  }\n}\n","/*\n * This class is used to make operations on models\n */\nimport { Model } from \"../Models/Model\";\nimport {\n  FindOneType,\n  FindType,\n} from \"../Models/ModelManager/ModelManagerTypes\";\nimport pg, { QueryResult } from \"pg\";\nimport selectTemplate from \"../Templates/Query/SELECT\";\nimport ModelManagerQueryUtils from \"../Mysql/MySqlModelManagerUtils\";\nimport { log, queryError } from \"../../Logger\";\nimport PostgresModelManagerUtils from \"./PostgresModelManagerUtils\";\nimport { AbstractModelManager } from \"../Models/ModelManager/AbstractModelManager\";\nimport { PostgresTransaction } from \"./PostgresTransaction\";\nimport { PostgresQueryBuilder } from \"./PostgresQueryBuilder\";\nimport { parseDatabaseDataIntoModelResponse } from \"../../CaseUtils\";\n\nexport class PostgresModelManager<\n  T extends Model,\n> extends AbstractModelManager<T> {\n  protected pgPool: pg.Pool;\n\n  /**\n   * Constructor for PostgresModelManager class.\n   *\n   * @param {new () => T} model - Model constructor.\n   * @param {Pool} pgConnection - PostgreSQL connection pool.\n   * @param {boolean} logs - Flag to enable or disable logging.\n   */\n  constructor(model: new () => T, pgConnection: pg.Pool, logs: boolean) {\n    super(model, logs);\n    this.pgPool = pgConnection;\n  }\n\n  /**\n   * Find method to retrieve multiple records from the database based on the input conditions.\n   *\n   * @param {FindType} input - Optional query parameters for filtering, ordering, and pagination.\n   * @returns Promise resolving to an array of models.\n   */\n  public async find(input?: FindType): Promise<T[]> {\n    try {\n      if (!input) {\n        const select = selectTemplate(this.tableName);\n        log(select.selectAll, this.logs);\n        const { rows }: QueryResult<T> = await this.pgPool.query(\n          select.selectAll,\n        );\n\n        const models =\n          rows.map((row) => {\n            const model = row as T;\n            model.metadata = this.modelInstance.metadata;\n            model.aliasColumns = this.modelInstance.aliasColumns;\n            model.setProps = this.modelInstance.setProps;\n            return parseDatabaseDataIntoModelResponse([model]) as T;\n          }) || [];\n        return (\n          (models.map((model) =>\n            parseDatabaseDataIntoModelResponse([model]),\n          ) as T[]) || []\n        );\n      }\n\n      const query = ModelManagerQueryUtils.parseSelectQueryInput(\n        new this.model(),\n        input,\n      );\n      log(query, this.logs);\n\n      const { rows }: QueryResult<T> = await this.pgPool.query(query);\n      return Promise.all(\n        rows.map(async (row) => {\n          const model = new this.model();\n          const modelData = row as T;\n\n          // merge model data into model\n          Object.assign(model, modelData);\n\n          // relations parsing on the queried model\n          await PostgresModelManagerUtils.parseRelationInput(\n            model,\n            input,\n            this.pgPool,\n            this.logs,\n          );\n\n          return parseDatabaseDataIntoModelResponse([model]) as T;\n        }),\n      );\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record from the database based on the input conditions.\n   *\n   * @param {FindOneType} input - Query parameters for filtering and selecting a single record.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOne(input: FindOneType): Promise<T | null> {\n    const model = new this.model();\n    try {\n      const query = ModelManagerQueryUtils.parseSelectQueryInput(model, input);\n      log(query, this.logs);\n\n      const { rows } = await this.pgPool.query(query);\n      const modelData = rows[0] as T;\n\n      if (!modelData) {\n        return null;\n      }\n\n      Object.assign(model, modelData);\n\n      await PostgresModelManagerUtils.parseRelationInput(\n        model,\n        input,\n        this.pgPool,\n        this.logs,\n      );\n\n      return parseDatabaseDataIntoModelResponse([model]) as T;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Find a single record by its ID from the database.\n   *\n   * @param {string | number} id - ID of the record to retrieve.\n   * @returns Promise resolving to a single model or null if not found.\n   */\n  public async findOneById(id: string | number): Promise<T | null> {\n    const select = selectTemplate(this.tableName);\n    try {\n      const stringedId = typeof id === \"number\" ? id.toString() : id;\n      const query = select.selectById(stringedId);\n      log(query, this.logs);\n\n      const { rows } = await this.pgPool.query(query);\n      const modelData = rows[0] as T;\n\n      if (!modelData) {\n        return null;\n      }\n\n      return parseDatabaseDataIntoModelResponse([modelData]) as T;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n  /**\n   * Save a new model instance to the database.\n   *\n   * @param {Model} model - Model instance to be saved.\n   * @param {MysqlTransaction} trx - MysqlTransaction to be used on the save operation.\n   * @returns Promise resolving to the saved model or null if saving fails.\n   */\n  public async save(model: T, trx?: PostgresTransaction): Promise<T | null> {\n    if (trx) {\n      return await trx.queryInsert<T>(\n        ModelManagerQueryUtils.parseInsert(model),\n        this.modelInstance.metadata,\n      );\n    }\n\n    try {\n      const insertQuery = ModelManagerQueryUtils.parseInsert(model);\n      log(insertQuery, this.logs);\n      const { rows } = await this.pgPool.query(insertQuery);\n      const insertedModel = rows[0] as T;\n\n      if (!insertedModel) {\n        return null;\n      }\n\n      return parseDatabaseDataIntoModelResponse([insertedModel]) as T;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * Update an existing model instance in the database.\n   * @param {Model} model - Model instance to be updated.\n   * @param {PostgresTransaction} trx - PostgresTransaction to be used on the update operation.\n   * @returns Promise resolving to the updated model or null if updating fails.\n   */\n  public async update(model: T, trx?: PostgresTransaction): Promise<T | null> {\n    const primaryKeyValue = this.modelInstance.metadata.primaryKey;\n    if (trx) {\n      await trx.queryUpdate<T>(ModelManagerQueryUtils.parseUpdate(model));\n\n      return await this.findOneById(\n        model[primaryKeyValue as keyof T] as string | number,\n      );\n    }\n\n    try {\n      const updateQuery = ModelManagerQueryUtils.parseUpdate(model);\n      log(updateQuery, this.logs);\n      await this.pgPool.query(updateQuery);\n\n      return await this.findOneById(\n        model[primaryKeyValue as keyof T] as string | number,\n      );\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Delete a record from the database from the given column and value.\n   *\n   * @param {string} column - Column to filter by.\n   * @param {string | number | boolean} value - Value to filter by.\n   * @param {PostgresTransaction} trx - PostgresTransaction to be used on the delete operation.\n   * @returns Promise resolving to affected rows count\n   */\n  public async deleteByColumn(\n    column: string,\n    value: string | number | boolean,\n    trx?: PostgresTransaction,\n  ): Promise<number> {\n    if (trx) {\n      return (\n        (await trx.queryDelete(\n          ModelManagerQueryUtils.parseDelete(this.tableName, column, value),\n        )) || 0\n      );\n    }\n\n    try {\n      const deleteQuery = ModelManagerQueryUtils.parseDelete(\n        this.tableName,\n        column,\n        value,\n      );\n      log(deleteQuery, this.logs);\n      const result = await this.pgPool.query(deleteQuery);\n      return result.rowCount || 0;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Delete a record from the database from the given model.\n   *\n   * @param {Model} model - Model to delete.\n   * @param {PostgresTransaction} trx - PostgresTransaction to be used on the delete operation.\n   * @returns Promise resolving to the deleted model or null if deleting fails.\n   */\n  public async delete(model: T, trx?: PostgresTransaction): Promise<T | null> {\n    try {\n      if (!model.metadata.primaryKey) {\n        throw new Error(\n          \"Model \" +\n            model.metadata.tableName +\n            \" has no primary key to be deleted from, try deleteByColumn\",\n        );\n      }\n      const deleteQuery = ModelManagerQueryUtils.parseDelete(\n        this.tableName,\n        model.metadata.primaryKey,\n        model[model.metadata.primaryKey as keyof T] as string,\n      );\n\n      if (trx) {\n        await trx.queryDelete(deleteQuery);\n        return model;\n      }\n\n      log(deleteQuery, this.logs);\n      await this.pgPool.query(deleteQuery);\n      return model;\n    } catch (error) {\n      queryError(error);\n      throw new Error(\"Query failed \" + error);\n    }\n  }\n\n  /**\n   * @description Creates a new transaction.\n   * @returns {MysqlTransaction} - Instance of MysqlTransaction.\n   */\n  public createTransaction(): PostgresTransaction {\n    return new PostgresTransaction(this.pgPool, this.tableName, this.logs);\n  }\n\n  /**\n   * Create and return a new instance of the MysqlQueryBuilder for building more complex SQL queries.\n   *\n   * @returns {MysqlQueryBuilder<Model>} - Instance of MysqlQueryBuilder.\n   */\n  public query(): PostgresQueryBuilder<T> {\n    return new PostgresQueryBuilder<T>(\n      this.model,\n      this.tableName,\n      this.pgPool,\n      this.logs,\n    );\n  }\n}\n","import path from \"path\";\nimport Schema from \"./Schema/Schema\";\n\nexport abstract class Migration {\n  public migrationName: string = path.basename(__filename);\n  public schema: Schema = new Schema();\n\n  public abstract up(): void;\n\n  public abstract down(): void;\n}\n","import dotenv from \"dotenv\";\nimport createTableTemplate from \"../../Templates/Migration/CREATETABLE\";\nimport ColumnBuilderConnector from \"../Columns/CreateTable/ColumnBuilderConnector\";\nimport dropTableTemplate from \"../../Templates/Migration/DROPTABLE\";\nimport ColumnBuilderAlter from \"../Columns/AlterTable/ColumnBuilderAlter\";\n\ndotenv.config();\n\nexport default class Schema {\n  public queryStatements: string[];\n  public sqlType: \"mysql\" | \"postgres\";\n\n  constructor(sqlType?: \"mysql\" | \"postgres\") {\n    this.queryStatements = [];\n    const dbVendor = process.env.DATABASE_TYPE as\n      | \"mysql\"\n      | \"postgres\"\n      | undefined;\n    this.sqlType = dbVendor || sqlType || \"mysql\";\n  }\n\n  public rawQuery(query: string): void {\n    this.queryStatements.push(query);\n  }\n\n  public createTable(\n    tableName: string,\n    options: { ifNotExists?: boolean },\n  ): ColumnBuilderConnector {\n    const partialQuery = options.ifNotExists\n      ? createTableTemplate.createTableIfNotExists(tableName)\n      : createTableTemplate.createTable(tableName);\n    return new ColumnBuilderConnector(\n      tableName,\n      this.queryStatements,\n      partialQuery,\n      this.sqlType,\n    );\n  }\n\n  public alterTable(tableName: string) {\n    return new ColumnBuilderAlter(\n      tableName,\n      this.queryStatements,\n      \"\",\n      this.sqlType,\n    );\n  }\n\n  public dropTable(tableName: string, ifExists: boolean = false): void {\n    this.rawQuery(dropTableTemplate(tableName, ifExists));\n  }\n\n  public truncateTable(tableName: string): void {\n    this.rawQuery(`TRUNCATE TABLE ${tableName}`);\n  }\n}\n","const createTableTemplate = {\n  createTableIfNotExists: (tableName: string) =>\n    `\\nCREATE TABLE IF NOT EXISTS ${tableName} (\\n`,\n  createTable: (tableName: string) => `\\nCREATE TABLE \\`${tableName}\\` (\\n`,\n  createTableEnd: \"\\n);\",\n};\n\nexport default createTableTemplate;\n","import ColumnTypeBuilder from \"./ColumnTypeBuilder\";\n\nexport default class ColumnOptionsBuilder {\n  protected tableName: string;\n  protected queryStatements: string[];\n  protected partialQuery: string;\n  protected columnName: string;\n  protected columnReferences?: {\n    table: string;\n    column: string;\n  };\n  protected sqlType: \"mysql\" | \"postgres\";\n\n  constructor(\n    tableName: string,\n    queryStatements: string[],\n    partialQuery: string,\n    sqlType: \"mysql\" | \"postgres\",\n    columnName: string = \"\",\n    columnReferences?: {\n      table: string;\n      column: string;\n    },\n  ) {\n    this.tableName = tableName;\n    this.queryStatements = queryStatements;\n    this.partialQuery = partialQuery;\n    this.sqlType = sqlType;\n    this.columnName = columnName;\n    this.columnReferences = columnReferences;\n  }\n\n  /**\n   * @description Makes the column nullable\n   */\n  public nullable(): ColumnOptionsBuilder {\n    this.partialQuery += \" NULL\";\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n    );\n  }\n\n  /**\n   * @description Makes the column unsigned allowing only positive values\n   */\n  public unsigned(): ColumnOptionsBuilder {\n    this.partialQuery += \" UNSIGNED\";\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n    );\n  }\n\n  /**\n   * @description Makes the column not nullable\n   */\n  public notNullable(): ColumnOptionsBuilder {\n    this.partialQuery += \" NOT NULL\";\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n    );\n  }\n\n  /**\n   * @description Makes the column the primary key\n   */\n  public primary(): ColumnOptionsBuilder {\n    this.partialQuery += \" PRIMARY KEY\";\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n    );\n  }\n\n  /**\n   * @description Adds an unique constraint\n   */\n  public unique(): ColumnOptionsBuilder {\n    this.partialQuery += \" UNIQUE\";\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n    );\n  }\n\n  /**\n   * @description Adds an auto increment - only for mysql\n   */\n  public autoIncrement(): ColumnOptionsBuilder {\n    switch (this.sqlType) {\n      case \"mysql\":\n        this.partialQuery += \" AUTO_INCREMENT\";\n        return new ColumnOptionsBuilder(\n          this.tableName,\n          this.queryStatements,\n          this.partialQuery,\n          this.sqlType,\n        );\n\n      case \"postgres\":\n        throw new Error(\"Auto Increment not supported for PostgreSQL\");\n    }\n  }\n\n  /**\n   * @description Adds a foreign key with a specific constraint\n   * @param table\n   * @param column\n   */\n  public references(table: string, column: string): ColumnOptionsBuilder {\n    this.columnReferences = { table, column };\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n      this.columnReferences,\n    );\n  }\n\n  /**\n   * @description Chains a new column creation\n   */\n  public newColumn(): ColumnTypeBuilder {\n    this.partialQuery += \",\\n\";\n    if (this.columnReferences) {\n      this.partialQuery += `CONSTRAINT ${this.tableName}_${this.columnName}_fk FOREIGN KEY (${this.columnName}) REFERENCES ${this.columnReferences.table} (${this.columnReferences.column}),\\n`;\n    }\n\n    return new ColumnTypeBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n    );\n  }\n\n  /**\n   * @description Commits the column creation - if omitted, the migration will be run empty\n   */\n  public commit(): void {\n    if (this.columnReferences) {\n      this.partialQuery += \",\\n\";\n      this.partialQuery += `CONSTRAINT ${this.columnName}_fk FOREIGN KEY (${this.columnName}) REFERENCES ${this.columnReferences.table} (${this.columnReferences.column}),\\n`;\n    }\n    this.partialQuery += \"\\n\";\n\n    this.partialQuery += \");\";\n    this.queryStatements.push(this.partialQuery);\n  }\n}\n","import ColumnOptionsBuilder from \"./ColumnOptionsBuilder\";\n\nexport default class ColumnTypeBuilder {\n  protected tableName: string;\n  protected queryStatements: string[];\n  protected partialQuery: string;\n  protected columnName: string;\n  protected sqlType: `mysql` | `postgres`;\n\n  constructor(\n    tableName: string,\n    queryStatements: string[],\n    partialQuery: string,\n    sqlType: `mysql` | `postgres`,\n  ) {\n    this.tableName = tableName;\n    this.queryStatements = queryStatements;\n    this.partialQuery = partialQuery;\n    this.sqlType = sqlType;\n    this.columnName = \"\";\n  }\n\n  public varchar(name: string, length: number): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} VARCHAR(${length})`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public tinytext(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} TINYTEXT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public mediumtext(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} MEDIUMTEXT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public longtext(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} LONGTEXT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public binary(name: string, length: number): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} BINARY(${length})`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public enum(name: string, values: string[]): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} ENUM(\"${values.join('\",\"')}\")`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public text(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} TEXT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public char(name: string, length: number): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} CHAR(${length})`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public tinyint(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} TINYINT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public smallint(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} SMALLINT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public mediumint(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} MEDIUMINT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  /**\n   * @description If using mysql, it will automatically add INT AUTO_INCREMENT PRIMARY KEY\n   * @param name\n   */\n  public serial(name: string): ColumnOptionsBuilder {\n    if (this.sqlType === `mysql`) {\n      this.columnName = name;\n      this.partialQuery += `${name} INT AUTO_INCREMENT PRIMARY KEY`;\n      return new ColumnOptionsBuilder(\n        this.tableName,\n        this.queryStatements,\n        this.partialQuery,\n        this.sqlType,\n        this.columnName,\n      );\n    }\n\n    this.columnName = name;\n    this.partialQuery += `${name} SERIAL`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  /**\n   * @description If using mysql, it will automatically add BIGINT AUTO_INCREMENT PRIMARY KEY\n   * @param name\n   */\n  public bigSerial(name: string): ColumnOptionsBuilder {\n    if (this.sqlType === `mysql`) {\n      this.columnName = name;\n      this.partialQuery += `${name} BIGINT AUTO_INCREMENT PRIMARY KEY`;\n      return new ColumnOptionsBuilder(\n        this.tableName,\n        this.queryStatements,\n        this.partialQuery,\n        this.sqlType,\n        this.columnName,\n      );\n    }\n\n    this.columnName = name;\n    this.partialQuery += `${name} BIGSERIAL`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public integer(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} INT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public bigint(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} BIGINT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public float(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} FLOAT`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public decimal(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} DECIMAL`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public double(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} DOUBLE`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public boolean(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} BOOLEAN`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public date(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} DATE`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  public timestamp(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} TIMESTAMP`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  /**\n   * @description EXPERIMENTAL\n   * @param name\n   */\n  public json(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} JSON`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n\n  /**\n   * @description EXPERIMENTAL\n   * @param name\n   */\n  public jsonb(name: string): ColumnOptionsBuilder {\n    this.columnName = name;\n    this.partialQuery += `${name} JSONB`;\n    return new ColumnOptionsBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n      this.columnName,\n    );\n  }\n}\n","import ColumnTypeBuilder from \"./ColumnTypeBuilder\";\n\nexport default class ColumnBuilderConnector {\n  protected tableName: string;\n  protected queryStatements: string[];\n  protected partialQuery: string;\n  protected sqlType: \"mysql\" | \"postgres\";\n\n  constructor(\n    tableName: string,\n    queryStatements: string[],\n    partialQuery: string,\n    sqlType: \"mysql\" | \"postgres\",\n  ) {\n    this.tableName = tableName;\n    this.queryStatements = queryStatements;\n    this.partialQuery = partialQuery;\n    this.sqlType = sqlType;\n  }\n\n  public newColumn(): ColumnTypeBuilder {\n    return new ColumnTypeBuilder(\n      this.tableName,\n      this.queryStatements,\n      this.partialQuery,\n      this.sqlType,\n    );\n  }\n}\n","const dropTableTemplate = (tableName: string, ifExists: boolean) =>\n  ifExists ? `DROP TABLE IF EXISTS ${tableName}` : `DROP TABLE ${tableName}`;\n\nexport default dropTableTemplate;\n","type AlterOptions = {\n  afterColumn?: string;\n  references?: {\n    table: string;\n    column: string;\n  };\n};\n\ntype DataType =\n  | \"varchar\"\n  | \"tinytext\"\n  | \"mediumtext\"\n  | \"longtext\"\n  | \"binary\"\n  | \"text\"\n  | \"char\"\n  | \"tinyint\"\n  | \"smallint\"\n  | \"mediumint\"\n  | \"integer\"\n  | \"bigint\"\n  | \"float\"\n  | \"decimal\"\n  | \"double\"\n  | \"boolean\"\n  | \"date\"\n  | \"timestamp\"\n  | \"json\"\n  | \"jsonb\";\n\nexport default class ColumnBuilderAlter {\n  protected tableName: string;\n  protected queryStatements: string[];\n  protected partialQuery: string;\n  protected sqlType: \"mysql\" | \"postgres\";\n\n  constructor(\n    tableName: string,\n    queryStatements: string[],\n    partialQuery: string,\n    sqlType: \"mysql\" | \"postgres\",\n  ) {\n    this.tableName = tableName;\n    this.queryStatements = queryStatements;\n    this.partialQuery = partialQuery;\n    this.sqlType = sqlType;\n  }\n\n  /**\n   * @description Add a new column to the table\n   * @param columnName { string }\n   * @param dataType { varchar | tinytext | mediumtext | longtext | binary | text | char | tinyint | smallint | mediumint | integer | bigint | float | decimal | double | boolean | date | timestamp | json | jsonb }\n   * @param options { afterColumn?: string; references?: { table: string; column: string }; default?: string; primaryKey?: boolean; unique?: boolean; notNullable?: boolean; autoIncrement?: boolean; length?: number; }\n   */\n  public addColumn(\n    columnName: string,\n    dataType: DataType,\n    options?: {\n      afterColumn?: string;\n      references?: { table: string; column: string };\n      default?: string;\n      primaryKey?: boolean;\n      unique?: boolean;\n      notNullable?: boolean;\n      autoIncrement?: boolean;\n      length?: number;\n    },\n  ): ColumnBuilderAlter {\n    let query = `ALTER TABLE ${this.tableName} ADD COLUMN ${columnName}`;\n\n    if (options?.length) {\n      query += ` ${dataType}(${options.length})`;\n    } else {\n      switch (dataType) {\n        case \"varchar\":\n          query += \" varchar(255)\";\n          break;\n        case \"char\":\n          query += \" char(1)\";\n          break;\n        case \"binary\":\n          query += \" binary()\";\n          break;\n        default:\n          query += ` ${dataType}`;\n      }\n    }\n\n    if (options?.notNullable) {\n      query += \" NOT NULL\";\n    }\n\n    if (options?.autoIncrement) {\n      if (this.sqlType === \"mysql\") {\n        query += \" AUTO_INCREMENT\";\n      } else {\n        query += \" SERIAL\";\n      }\n    }\n\n    if (options?.default !== undefined) {\n      query += ` DEFAULT ${options.default}`;\n    }\n\n    if (options?.primaryKey) {\n      query += \" PRIMARY KEY\";\n    }\n\n    if (options?.unique) {\n      query += \" UNIQUE\";\n    }\n\n    if (options?.references) {\n      query += ` REFERENCES ${options.references.table}(${options.references.column})`;\n    }\n\n    if (this.sqlType === \"mysql\" && options?.afterColumn) {\n      query += ` AFTER ${options.afterColumn}`;\n    }\n\n    this.partialQuery = query;\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Add a new enum column to the table\n   * @param columnName { string }\n   * @param values { string[] }\n   * @param options { afterColumn?: string; notNullable?: boolean }\n   */\n  public addEnumColumn(\n    columnName: string,\n    values: string[],\n    options?: { afterColumn?: string; notNullable?: boolean },\n  ): ColumnBuilderAlter {\n    this.partialQuery = `ALTER TABLE ${this.tableName} ADD COLUMN ${columnName} ENUM(${values\n      .map((value) => `'${value}'`)\n      .join(\",\")})`;\n\n    if (options?.notNullable) {\n      this.partialQuery += \" NOT NULL\";\n    }\n\n    if (options?.afterColumn) {\n      this.partialQuery += ` AFTER ${options.afterColumn}`;\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Drops a column from the table\n   * @param columnName\n   */\n  public dropColumn(columnName: string): ColumnBuilderAlter {\n    this.partialQuery = `ALTER TABLE ${this.tableName} DROP COLUMN ${columnName}`;\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Renames a column\n   * @param oldColumnName\n   * @param newColumnName\n   */\n  public renameColumn(\n    oldColumnName: string,\n    newColumnName: string,\n  ): ColumnBuilderAlter {\n    if (this.sqlType === \"mysql\") {\n      this.partialQuery = `ALTER TABLE ${this.tableName} CHANGE ${oldColumnName} ${newColumnName}`;\n    } else {\n      this.partialQuery = `ALTER TABLE ${this.tableName} RENAME COLUMN ${oldColumnName} TO ${newColumnName}`;\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n\n  public modifyColumnType(\n    columnName: string,\n    newDataType: DataType,\n    length?: number\n  ): ColumnBuilderAlter {\n    if (this.sqlType === \"mysql\") {\n      this.partialQuery = `ALTER TABLE ${this.tableName} MODIFY COLUMN ${columnName} ${newDataType}(${length})`;\n    } else {\n      this.partialQuery = `ALTER TABLE ${this.tableName} ALTER COLUMN ${columnName} TYPE ${newDataType}(${length})`;\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Renames a table\n   * @param oldTableName\n   * @param newTableName\n   */\n  public renameTable(\n    oldTableName: string,\n    newTableName: string,\n  ): ColumnBuilderAlter {\n    if (this.sqlType === \"mysql\") {\n      this.partialQuery = `RENAME TABLE ${oldTableName} TO ${newTableName}`;\n    } else {\n      this.partialQuery = `ALTER TABLE ${oldTableName} RENAME TO ${newTableName}`;\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Set a default value\n   * @param columnName\n   * @param defaultValue\n   */\n  public setDefaultValue(\n    columnName: string,\n    defaultValue: string,\n  ): ColumnBuilderAlter {\n    this.partialQuery = `ALTER TABLE ${this.tableName} ALTER COLUMN ${columnName} SET DEFAULT ${defaultValue}`;\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Drop a default value\n   * @param columnName\n   */\n  public dropDefaultValue(columnName: string): ColumnBuilderAlter {\n    this.partialQuery = `ALTER TABLE ${this.tableName} ALTER COLUMN ${columnName} DROP DEFAULT`;\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Add a foreign key\n   * @param columnName\n   * @param options\n   */\n  public addForeignKey(\n    columnName: string,\n    options: AlterOptions,\n  ): ColumnBuilderAlter {\n    if (!options.references) {\n      throw new Error(\n        \"References option must be provided to add a foreign key\",\n      );\n    }\n\n    const fkName = `${this.tableName}_${columnName}_fk`;\n    const referencesSQL = `REFERENCES ${options.references.table}(${options.references.column})`;\n\n    if (this.sqlType === \"mysql\") {\n      this.partialQuery = `ALTER TABLE ${this.tableName} ADD CONSTRAINT ${fkName} FOREIGN KEY (${columnName}) ${referencesSQL}`;\n    } else {\n      this.partialQuery = `ALTER TABLE ${this.tableName} ADD FOREIGN KEY (${columnName}) ${referencesSQL}`;\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Drop a foreign key\n   * @param columnName\n   */\n  public dropForeignKey(columnName: string): ColumnBuilderAlter {\n    if (this.sqlType === \"mysql\") {\n      this.partialQuery = `ALTER TABLE ${this.tableName} DROP FOREIGN KEY ${columnName}`;\n    } else {\n      this.partialQuery = `ALTER TABLE ${this.tableName} DROP CONSTRAINT IF EXISTS ${this.tableName}_${columnName}_fk`;\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Add a primary key\n   * @param columnNames\n   */\n  public addPrimaryKey(columnNames: string[]): ColumnBuilderAlter {\n    const pkName = `${this.tableName}_pk`;\n    this.partialQuery = `ALTER TABLE ${\n      this.tableName\n    } ADD CONSTRAINT ${pkName} PRIMARY KEY (${columnNames.join(\", \")})`;\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Drop a primary key\n   */\n  public dropPrimaryKey(): ColumnBuilderAlter {\n    if (this.sqlType === \"mysql\") {\n      this.partialQuery = `ALTER TABLE ${this.tableName} DROP PRIMARY KEY`;\n    } else {\n      const pkName = `${this.tableName}_pkey`;\n      this.partialQuery = `ALTER TABLE ${this.tableName} DROP CONSTRAINT ${pkName}`;\n    }\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Add a check constraint - EXPERIMENTAL\n   * @param condition\n   * @param constraintName\n   */\n  public addCheckConstraint(\n    condition: string,\n    constraintName?: string,\n  ): ColumnBuilderAlter {\n    const ckName = constraintName || `${this.tableName}_ck`;\n    this.partialQuery = `ALTER TABLE ${this.tableName} ADD CONSTRAINT ${ckName} CHECK (${condition})`;\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description drop a check constraint - EXPERIMENTAL\n   * @param constraintName\n   */\n  public dropCheckConstraint(constraintName: string): ColumnBuilderAlter {\n    this.partialQuery = `ALTER TABLE ${this.tableName} DROP CONSTRAINT ${constraintName}`;\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Add a unique constraint - EXPERIMENTAL\n   * @param columnNames\n   * @param constraintName\n   */\n  public addUniqueConstraint(\n    columnNames: string[],\n    constraintName?: string,\n  ): ColumnBuilderAlter {\n    const uqName =\n      constraintName || `${this.tableName}_uq_${columnNames.join(\"_\")}`;\n    this.partialQuery = `ALTER TABLE ${\n      this.tableName\n    } ADD CONSTRAINT ${uqName} UNIQUE (${columnNames.join(\", \")})`;\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Drop a unique constraint - EXPERIMENTAL\n   * @param constraintName\n   */\n  public dropUniqueConstraint(constraintName: string): ColumnBuilderAlter {\n    this.partialQuery = `ALTER TABLE ${this.tableName} DROP CONSTRAINT ${constraintName}`;\n\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n    return this;\n  }\n\n  /**\n   * @description Commits the changes - if omitted, the migration will be run empty\n   */\n  public commit(): void {\n    this.queryStatements.push(this.partialQuery);\n    this.partialQuery = \"\";\n  }\n}\n"],"mappings":"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","names":["path","column","parseValue","mysql","rows","rows","dotenv"]}