import "reflect-metadata";
import type { ModelQueryBuilder } from "../model_query_builder/model_query_builder";
import type { OneOptions } from "../model_query_builder/model_query_builder_types";
import type { ModelManager } from "./model_manager/model_manager";
import type {
  FindOneType,
  FindType,
  ModelKey,
  UnrestrictedFindOneType,
  UnrestrictedFindType,
} from "./model_manager/model_manager_types";
import type {
  BaseModelMethodOptions,
  ModelWithoutExtraColumns,
} from "./model_types";

import { Entity } from "../../entity";
import { HysteriaError } from "../../errors/hysteria_error";
import { baseSoftDeleteDate } from "../../utils/date_utils";
import { SqlDataSource } from "../sql_data_source";
import {
  belongsTo,
  column,
  getPrimaryKey,
  hasMany,
  hasOne,
  manyToMany,
} from "./decorators/model_decorators";
import { getBaseTableName } from "./model_utils";
import { ColumnOptions } from "./decorators/model_decorators_types";

/**
 * @description Represents a Table in the Database
 */
export abstract class Model extends Entity {
  /**
   * @description The column used to soft delete a record, default is deletedAt
   */
  static softDeleteColumn = "deletedAt";

  /**
   * @description The value used to soft delete a record, default is the current date and time
   * @default format: "YYYY-MM-DD HH:mm:ss" in UTC timezone
   */
  static softDeleteValue = baseSoftDeleteDate();

  /**
   * @description The sql sqlInstance generated by SqlDataSource.connect
   */
  static sqlInstance: SqlDataSource;

  /**
   * @description Used in order to override the table name for the model
   */
  static _table: string;

  /**
   * @description Table name for the model, default will be the plural snake case of the model name given that is in PascalCase (es. User -> users)
   * @description If you want to override the table name, you can set the _table property in the model
   * @warning This is a getter you cannot override it, if you want to override it use the _table property
   */
  static get table(): string {
    return this._table || getBaseTableName(this);
  }

  /**
   * @description Getter for the primary key of the model
   */
  static get primaryKey(): string | undefined {
    return getPrimaryKey(this);
  }

  /**
   * @description Constructor for the model, it's not meant to be used directly, it just initializes the $additional, it's advised to only use the static methods to interact with the database to save the model
   * @description Using the constructor could lead to unexpected behavior, if you want to create a new record use the insert method
   * @deprecated
   */
  constructor() {
    super();
  }

  /**
   * @description Returns all the records for the given model
   */
  static async all<T extends Model>(
    this: new () => T | typeof Model,
    options: BaseModelMethodOptions = {},
  ): Promise<T[]> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return await modelManager.find();
  }

  /**
   * @description Gives a query sqlInstance for the given model
   */
  static query<T extends Model>(
    this: new () => T | typeof Model,
    options: BaseModelMethodOptions = {},
  ): ModelQueryBuilder<T> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.query() as ModelQueryBuilder<T>;
  }

  /**
   * @description Finds the first record in the database
   * @deprecated Used only for debugging purposes, use findOne or query instead
   */
  static async first<T extends Model>(
    this: new () => T | typeof Model,
    options: OneOptions & BaseModelMethodOptions = {},
  ): Promise<T | null> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.query().one(options);
  }

  /**
   * @description Finds records for the given model
   */
  static async find<T extends Model>(
    this: new () => T | typeof Model,
    findOptions?: FindType<T> | UnrestrictedFindType<T>,
    options: BaseModelMethodOptions = {},
  ): Promise<T[]> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.find(findOptions as FindType<T>);
  }

  /**
   * @description Finds a record for the given model or throws an error if it doesn't exist
   */
  static async findOneOrFail<T extends Model>(
    this: new () => T | typeof Model,
    findOneOptions: (FindOneType<T> | UnrestrictedFindOneType<T>) & {
      customError?: Error;
    },
    options: BaseModelMethodOptions = {},
  ): Promise<T> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.findOneOrFail(findOneOptions as FindOneType<T>);
  }

  /**
   * @description Finds a record for the given model
   */
  static async findOne<T extends Model>(
    this: new () => T | typeof Model,
    findOneOptions: (FindOneType<T> | UnrestrictedFindOneType<T>) &
      BaseModelMethodOptions,
    options: BaseModelMethodOptions = {},
  ): Promise<T | null> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.findOne(findOneOptions as FindOneType<T>);
  }

  /**
   * @description Finds records for the given column and value
   */
  static async findBy<T extends Model>(
    this: new () => T | typeof Model,
    column: ModelKey<T>,
    value: string | number | boolean | Date | null,
    options: BaseModelMethodOptions = {},
  ): Promise<T[]> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.find({
      where: {
        [column]: value,
      },
    });
  }

  /**
   * @description Finds the first record for the given column and value
   */
  static async findOneBy<T extends Model>(
    this: new () => T | typeof Model,
    column: ModelKey<T>,
    value: string | number | boolean | Date | null,
    options: BaseModelMethodOptions = {},
  ): Promise<T | null> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.findOne({
      where: {
        [column]: value,
      },
    });
  }

  /**
   * @description Finds a record for the given model for the given value, the model must have a primary key defined else it will throw an error
   */
  static async findOneByPrimaryKey<T extends Model>(
    this: new () => T | typeof Model,
    value: string | number,
    options: BaseModelMethodOptions = {},
  ): Promise<T | null> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.findOneByPrimaryKey(value);
  }

  /**
   * @description Refreshes a model from the database, the model must have a primary key defined
   */
  static async refresh<T extends Model>(
    this: new () => T | typeof Model,
    model: T,
    options: BaseModelMethodOptions = {},
  ): Promise<T | null> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    const primaryKey = typeofModel.primaryKey as keyof T;
    const primaryKeyValue = model[primaryKey];
    const refreshedModel = await modelManager.findOneByPrimaryKey(
      primaryKeyValue as string,
    );
    if (!refreshedModel) {
      return null;
    }

    refreshedModel.$additional = model.$additional;
    return refreshedModel;
  }

  /**
   * @description Saves a new record to the database
   * @description $additional will be ignored if set in the modelData and won't be returned in the response
   * @warning If not using postgres and the model has no primary key, the model will be saved, but it won't be possible to retrieve it so at that point it will be returned as null, this is not typed as Model | null for type safety reasons
   */
  static async insert<T extends Model>(
    this: new () => T | typeof Model,
    modelData: ModelWithoutExtraColumns<T>,
    options: BaseModelMethodOptions = {},
  ): Promise<T> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.insert(modelData as T);
  }

  /**
   * @description Saves multiple records to the database
   * @description $additional will be ignored if set in the modelData and won't be returned in the response
   * @warning If not using postgres and the model has no primary key, the models will be saved, but it won't be possible to retrieve them so at that point they will be returned as an empty array
   */
  static async insertMany<T extends Model>(
    this: new () => T | typeof Model,
    modelsData: ModelWithoutExtraColumns<T>[],
    options: BaseModelMethodOptions = {},
  ): Promise<T[]> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.insertMany(modelsData as T[]);
  }

  /**
   * @description Updates a record, returns the updated record
   * @description Model is retrieved from the database using the primary key regardless of any model hooks
   * @description Can only be used if the model has a primary key, use a massive update if the model has no primary key
   * @throws {HysteriaError} If the model has no primary key
   */
  static async updateRecord<T extends Model>(
    this: new () => T | typeof Model,
    modelSqlInstance: T,
    options: BaseModelMethodOptions = {},
  ): Promise<T> {
    try {
      const typeofModel = this as unknown as typeof Model;
      const modelManager = typeofModel.dispatchModelManager<T>(options);
      const updatedModel = await modelManager.updateRecord(modelSqlInstance);
      updatedModel.$additional = modelSqlInstance.$additional;
      return updatedModel;
    } catch (error) {
      if (
        error instanceof HysteriaError &&
        error.message === "MODEL_HAS_NO_PRIMARY_KEY"
      ) {
        throw new HysteriaError(
          `${this.name}::updateRecord`,
          "MODEL_HAS_NO_PRIMARY_KEY",
        );
      }

      throw error;
    }
  }

  /**
   * @description Finds the first record or creates a new one if it doesn't exist
   * @returns {Promise<T | { isNew: boolean; model: T }>}
   */
  static async firstOrCreate<T extends Model, O extends boolean = false>(
    this: new () => T | typeof Model,
    searchCriteria: ModelWithoutExtraColumns<T>,
    createData: ModelWithoutExtraColumns<T>,
    options: BaseModelMethodOptions & { fullResponse?: O } = {},
  ): Promise<
    O extends true
      ? {
          isNew: boolean;
          model: T;
        }
      : T
  > {
    if (!options.fullResponse) {
      options.fullResponse = false as O;
    }

    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    const doesExist = await modelManager.findOne({
      where: searchCriteria,
    });

    if (doesExist) {
      if (options.fullResponse) {
        return {
          isNew: false,
          model: doesExist,
        } as O extends true ? { isNew: boolean; model: T } : T;
      }

      return doesExist as O extends true ? { isNew: boolean; model: T } : T;
    }

    const newModel = await modelManager.insert(createData as T);
    if (options.fullResponse) {
      return {
        isNew: true,
        model: newModel,
      } as O extends true ? { isNew: boolean; model: T } : T;
    }

    return newModel as O extends true ? { isNew: boolean; model: T } : T;
  }

  /**
   * @description Updates or creates a new record
   * @warning Model must have a primary key defined
   * @throws {HysteriaError} If the model has no primary key
   */
  static async upsert<T extends Model>(
    this: new () => T | typeof Model,
    searchCriteria: ModelWithoutExtraColumns<T>,
    data: ModelWithoutExtraColumns<T>,
    options: { updateOnConflict?: boolean } & BaseModelMethodOptions = {
      updateOnConflict: true,
    },
  ): Promise<T> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    const doesExist = await modelManager.findOne({
      where: searchCriteria,
    });

    if (doesExist) {
      (data as T)[typeofModel.primaryKey as keyof T] =
        doesExist[typeofModel.primaryKey as keyof T];

      if (options.updateOnConflict) {
        return (await modelManager.updateRecord(data as T)) as T;
      }

      return doesExist;
    }

    return (await modelManager.insert(data as T)) as T;
  }

  /**
   * @description Updates or creates multiple records
   * @warning Model must have a primary key defined
   * @throws {HysteriaError} If the model has no primary key
   */
  static async upsertMany<T extends Model>(
    this: new () => T | typeof Model,
    searchCriteria: ModelKey<T>[],
    data: ModelWithoutExtraColumns<T>[],
    options: { updateOnConflict?: boolean } & BaseModelMethodOptions = {
      updateOnConflict: true,
    },
  ): Promise<T[]> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);

    if (
      !data.every((record) =>
        searchCriteria.every((column) => column in record),
      )
    ) {
      throw new HysteriaError(
        "Model::upsertMany",
        "CONFLICT_COLUMNS_NOT_PRESENT_IN_DATA",
      );
    }

    const results: T[] = await Promise.all(
      data.map(async (record) => {
        const search = searchCriteria.reduce((acc, column) => {
          acc[column] = record[column];
          return acc;
        }, {} as ModelWithoutExtraColumns<T>);

        const doesExist = await modelManager.findOne({ where: search });

        if (doesExist) {
          (record as T)[typeofModel.primaryKey as keyof T] =
            doesExist[typeofModel.primaryKey as keyof T];

          if (options.updateOnConflict) {
            return (await modelManager.updateRecord(record as T)) as T;
          }

          return doesExist;
        }

        return (await modelManager.insert(record as T)) as T;
      }),
    );

    return results;
  }

  /**
   * @description Deletes a record to the database
   */
  static async deleteRecord<T extends Model>(
    this: new () => T | typeof Model,
    modelSqlInstance: T,
    options: BaseModelMethodOptions = {},
  ): Promise<void> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.deleteRecord(modelSqlInstance);
  }

  /**
   * @description Soft Deletes a record to the database
   * @description default column: deletedAt
   * @description default value: The current date and time in UTC timezone in the format "YYYY-MM-DD HH:mm:ss"
   * @description You can override the column and value by providing the column and value on the static properties of the model `softDeleteColumn` and `softDeleteValue`
   */
  static async softDelete<T extends Model>(
    this: new () => T | typeof Model,
    modelSqlInstance: T,
    softDeleteOptions?: {
      column?: ModelKey<T>;
      value?: string | number | boolean | Date;
    },
    options?: BaseModelMethodOptions,
  ): Promise<T> {
    const typeofModel = this as unknown as typeof Model;
    const {
      column = typeofModel.softDeleteColumn as ModelKey<T>,
      value = typeofModel.softDeleteValue,
    } = softDeleteOptions || {};

    modelSqlInstance[column as keyof T] = value as T[keyof T];
    const modelManager = typeofModel.dispatchModelManager<T>({
      trx: options?.trx,
      useConnection: options?.useConnection,
    });
    await modelManager.updateRecord(modelSqlInstance);

    if (typeof value === "string") {
      modelSqlInstance[column as keyof T] = new Date(value) as T[keyof T];
      return modelSqlInstance;
    }

    modelSqlInstance[column as keyof T] = value as T[keyof T];
    return modelSqlInstance;
  }

  /**
   * @description Truncates the table for the given model
   */
  static async truncate<T extends Model>(
    this: new () => T | typeof Model,
    truncateOptions?: { force?: boolean },
    options: BaseModelMethodOptions = {},
  ): Promise<void> {
    const typeofModel = this as unknown as typeof Model;
    const modelManager = typeofModel.dispatchModelManager<T>(options);
    return modelManager.query().truncate(truncateOptions);
  }

  /**
   * @description Merges the provided data with the model instance
   */
  static combineProps<T extends Model>(sqlInstance: T, data: Partial<T>): void {
    for (const key in data) {
      Object.assign(sqlInstance, { [key]: data[key] });
    }
  }

  /**
   * @description Adds a beforeFetch clause to the model, adding the ability to modify the query before fetching the data
   */
  static beforeFetch(queryBuilder: ModelQueryBuilder<any>): void {
    queryBuilder;
  }

  /**
   * @description Adds a beforeInsert clause to the model, adding the ability to modify the data after fetching the data
   */
  static async beforeInsert(data: any): Promise<void> {
    return data;
  }

  /**
   * @description Adds a beforeUpdate clause to the model, adding the ability to modify the query before updating the data
   */
  static beforeUpdate(queryBuilder: ModelQueryBuilder<any>): void {
    queryBuilder;
  }

  /**
   * @description Adds a beforeDelete clause to the model, adding the ability to modify the query before deleting the data
   */
  static beforeDelete(queryBuilder: ModelQueryBuilder<any>): void {
    queryBuilder;
  }

  /**
   * @description Adds a afterFetch clause to the model, adding the ability to modify the data after fetching the data
   */
  static async afterFetch(data: Model[]): Promise<Model[]> {
    return data;
  }

  // JS Static methods

  /**
   * @description Defines a column in the model, useful in javascript in order to not have to rely on decorators since are not supported without a transpiler like babel
   * @javascript
   */
  static column(columnName: string, options: ColumnOptions = {}): void {
    column(options)(this.prototype, columnName);
  }

  /**
   * @description Defines an hasOne relation
   * @javascript
   */
  static hasOne(
    columnName: string,
    model: () => typeof Model,
    foreignKey?: ModelKey<InstanceType<typeof Model>>,
  ): void {
    hasOne(model, foreignKey)(this.prototype, columnName);
  }

  /**
   * @description Defines an hasMany
   * @javascript
   */
  static hasMany(
    columnName: string,
    model: () => typeof Model,
    foreignKey?: ModelKey<InstanceType<typeof Model>>,
  ): void {
    hasMany(model, foreignKey)(this.prototype, columnName);
  }

  /**
   * @description Defines a belongsTo
   * @javascript
   */
  static belongsTo(
    columnName: string,
    model: () => typeof Model,
    foreignKey: string,
  ): void {
    belongsTo(model, foreignKey)(this.prototype, columnName);
  }

  /**
   * @description Defines a many to many
   * @javascript
   */
  static manyToMany(
    columnName: string,
    model: () => typeof Model,
    throughModel: string,
    foreignKey: string,
  ): void {
    manyToMany(model, throughModel, foreignKey)(this.prototype, columnName);
  }

  /**
   * @description Establishes a connection to the database instantiated from the SqlDataSource.connect method, this is done automatically when using the static methods
   * @description This method is meant to be used only if you want to establish sql sqlInstance of the model directly
   * @internal
   */
  private static establishConnection(): void {
    const sql = SqlDataSource.getInstance();
    if (!sql) {
      throw new HysteriaError(
        "sqlInstance not initialized, did you defined it in SqlDataSource.connect static method?",
        "CONNECTION_NOT_ESTABLISHED",
      );
    }

    this.sqlInstance = sql;
  }

  /**
   * @description Gives the correct model manager with the correct connection based on the options provided
   */
  private static dispatchModelManager<T extends Model>(
    this: typeof Model,
    options?: BaseModelMethodOptions,
  ): ModelManager<T> {
    if (options?.useConnection) {
      return options.useConnection.getModelManager<T>(
        this as unknown as typeof Model,
      );
    }

    if (options?.trx) {
      return options.trx.sqlDataSource.getModelManager<T>(
        this as unknown as typeof Model,
      );
    }

    const typeofModel = this as unknown as typeof Model;
    typeofModel.establishConnection();
    return typeofModel.sqlInstance.getModelManager<T>(typeofModel);
  }
}
