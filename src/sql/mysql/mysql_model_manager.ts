import mysql, { RowDataPacket } from "mysql2/promise";
import { log } from "../../utils/logger";
import { Model } from "../models/model";
import { ModelManager } from "../models/model_manager/model_manager";
import {
  FindType,
  UnrestrictedFindType,
  FindOneType,
  UnrestrictedFindOneType,
} from "../models/model_manager/model_manager_types";
import SqlModelManagerUtils from "../models/model_manager/model_manager_utils";
import { parseDatabaseDataIntoModelResponse } from "../serializer";
import { SqlDataSource } from "../sql_data_source";
import { MysqlQueryBuilder } from "./mysql_query_builder";

export class MysqlModelManager<T extends Model> extends ModelManager<T> {
  protected type: "mysql" | "mariadb";
  protected mysqlConnection: mysql.Connection;
  protected sqlModelManagerUtils: SqlModelManagerUtils<T>;

  /**
   * Constructor for MysqlModelManager class.
   *
   * @param {typeof Model} model - Model constructor.
   * @param {Connection} mysqlConnection - MySQL connection pool.
   * @param {boolean} logs - Flag to enable or disable logging.
   */
  constructor(
    type: "mysql" | "mariadb",
    model: typeof Model,
    mysqlConnection: mysql.Connection,
    logs: boolean,
    sqlDataSource: SqlDataSource,
  ) {
    super(model, logs, sqlDataSource);
    this.type = type;
    this.mysqlConnection = mysqlConnection;
    this.sqlModelManagerUtils = new SqlModelManagerUtils<T>(
      this.type,
      mysqlConnection,
    );
  }

  /**
   * Find method to retrieve multiple records from the database based on the input conditions.
   *
   * @param {FindType} input - Optional query parameters for filtering, ordering, and pagination.
   * @returns Promise resolving to an array of models.
   */
  async find(input?: FindType<T> | UnrestrictedFindType<T>): Promise<T[]> {
    if (!input) {
      return await this.query().many();
    }

    const query = this.query();
    if (input.select) {
      query.select(...(input.select as string[]));
    }

    if (input.relations) {
      input.relations.forEach((relation) => {
        query.with(relation);
      });
    }

    if (input.where) {
      Object.entries(input.where).forEach(([key, value]) => {
        query.where(key, value);
      });
    }

    if (input.orderBy) {
      Object.entries(input.orderBy).forEach(([key, value]) => {
        query.orderBy(key, value);
      });
    }

    if (input.limit) {
      query.limit(input.limit);
    }

    if (input.offset) {
      query.offset(input.offset);
    }

    if (input.groupBy) {
      query.groupBy(...(input.groupBy as string[]));
    }

    return await query.many({ ignoreHooks: input.ignoreHooks || [] });
  }

  /**
   * Find a single record from the database based on the input conditions.
   *
   * @param {FindOneType} input - query parameters for filtering and selecting a single record.
   * @returns Promise resolving to a single model or null if not found.
   */
  async findOne(
    input: FindOneType<T> | UnrestrictedFindOneType<T>,
  ): Promise<T | null> {
    const results = await this.find({
      ...input,
      limit: 1,
    });

    if (!results.length) {
      return null;
    }

    return results[0];
  }

  /**
   * Find a single record by its PK from the database.
   *
   * @param {string | number | boolean} value - PK of the record to retrieve, hooks will not have any effect, since it's a direct query for the PK.
   * @returns Promise resolving to a single model or null if not found.
   */
  async findOneByPrimaryKey(
    value: string | number | boolean,
  ): Promise<T | null> {
    if (!this.model.primaryKey) {
      throw new Error(
        "Model " + this.model.table + " has no primary key to be retrieved by",
      );
    }

    return await this.query()
      .where(this.model.primaryKey as string, value)
      .one();
  }

  /**
   * Save a new model instance to the database.
   *
   * @param {Model} model - Model instance to be saved.
   * @param {TransactionType} trx - TransactionType to be used on the save operation.
   * @returns Promise resolving to the saved model or null if saving fails.
   */
  async insert(model: Partial<T>): Promise<T | null> {
    this.model.beforeInsert(model as T);
    const { query, params } = this.sqlModelManagerUtils.parseInsert(
      model as T,
      this.model,
      this.sqlDataSource.getDbType(),
    );

    log(query, this.logs, params);
    const [result]: any = await this.mysqlConnection.query<RowDataPacket[]>(
      query,
      params,
    );

    // If pk it's not autogenerated but it's passed in creation process, the model it's retrieved by it's primary key
    if (this.model.primaryKey && model[this.model.primaryKey as keyof T]) {
      const pkValue = model[this.model.primaryKey as keyof T] as
        | string
        | number;
      return await this.findOneByPrimaryKey(pkValue);
    }

    return await this.findOneByPrimaryKey(result["insertId"]);
  }

  /**
   * Create multiple model instances in the database.
   *
   * @param {Model} model - Model instance to be saved.
   * @param {TransactionType} trx - TransactionType to be used on the save operation.
   * @returns Promise resolving to an array of saved models or null if saving fails.
   */
  async insertMany(models: Partial<T>[]): Promise<T[]> {
    models.forEach((model) => {
      this.model.beforeInsert(model as T);
    });

    const { query, params } = this.sqlModelManagerUtils.parseMassiveInsert(
      models as T[],
      this.model,
      this.sqlDataSource.getDbType(),
    );

    log(query, this.logs, params);
    const [rows]: any = await this.mysqlConnection.query(query, params);

    if (!rows.affectedRows) {
      return [];
    }

    // If pk it's not autogenerated but it's passed in creation process, the model it's retrieved by it's primary key
    if (this.model.primaryKey && models[0][this.model.primaryKey as keyof T]) {
      const idsToFetchList = models.map(
        (model) => model[this.model.primaryKey as keyof T],
      ) as string[];

      const primaryKeyList = idsToFetchList.map((key) => `'${key}'`).join(",");

      return await this.query()
        .whereIn(this.model.primaryKey as string, idsToFetchList)
        .orderByRaw(`FIELD(${this.model.primaryKey}, ${primaryKeyList})`)
        .many();
    }

    const idsToFetchList = Array.from(
      { length: rows.affectedRows },
      (_, i) => i + rows.insertId,
    );

    return await this.query()
      .whereIn(this.model.primaryKey as string, idsToFetchList)
      .many();
  }

  /**
   * Update an existing model instance in the database.
   * @param {Model} model - Model instance to be updated.
   * @param {TransactionType} trx - TransactionType to be used on the update operation.
   * @returns Promise resolving to the updated model or null if updating fails.
   */
  async updateRecord(model: T): Promise<T | null> {
    if (!this.model.primaryKey) {
      throw new Error(
        "Model " +
          this.model.table +
          " has no primary key to be updated, try save",
      );
    }

    const updateQuery = this.sqlModelManagerUtils.parseUpdate(
      model,
      this.model,
      this.sqlDataSource.getDbType(),
    );
    log(updateQuery.query, this.logs, updateQuery.params);
    await this.mysqlConnection.query(updateQuery.query, updateQuery.params);
    if (!this.model.primaryKey) {
      log("Model has no primary key so no record can be retrieved", this.logs);
      return null;
    }

    return await this.findOneByPrimaryKey(
      model[this.model.primaryKey as keyof T] as string | number,
    );
  }

  /**
   * @description Delete a record from the database from the given model.
   *
   * @param {Model} model - Model to delete.
   * @param {TransactionType} trx - TransactionType to be used on the delete operation.
   * @returns Promise resolving to the deleted model or null if deleting fails.
   */
  async deleteRecord(model: T): Promise<T | null> {
    if (!this.model.primaryKey) {
      throw new Error(
        "Model " + this.model.table + " has no primary key to be deleted from",
      );
    }
    const { query, params } = this.sqlModelManagerUtils.parseDelete(
      this.model.table,
      this.model.primaryKey,
      model[this.model.primaryKey as keyof T] as string,
    );

    log(query, this.logs, params);
    const [rows]: any = await this.mysqlConnection.query<RowDataPacket[]>(
      query,
      params,
    );
    if (this.sqlDataSource.getDbType() === "mariadb") {
      return (await parseDatabaseDataIntoModelResponse(
        [rows[0] as T],
        this.model,
      )) as T;
    }

    return model;
  }

  /**
   * Create and return a new instance of the Mysql_query_builder for building more complex SQL queries.
   *
   * @returns {Mysql_query_builder<Model>} - Instance of Mysql_query_builder.
   */
  query(): MysqlQueryBuilder<T> {
    return new MysqlQueryBuilder<T>(
      this.type,
      this.model,
      this.model.table,
      this.mysqlConnection,
      this.logs,
      false,
      this.sqlDataSource,
    );
  }
}
