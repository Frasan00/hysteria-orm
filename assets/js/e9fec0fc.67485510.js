"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[1378],{3479:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>d,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"databases/sql/query-builder/dry-query-builder","title":"DryQueryBuilder (Raw SQL)","description":"The DryQueryBuilder is a specialized query builder designed specifically for debugging write operations (INSERT, UPDATE, DELETE, TRUNCATE) without executing them. Access it via sql.dryQuery(\'table\') or sql.dryQuery(table, options).","source":"@site/docs/databases/sql/query-builder/dry-query-builder.md","sourceDirName":"databases/sql/query-builder","slug":"/databases/sql/query-builder/dry-query-builder","permalink":"/hysteria-orm/docs/databases/sql/query-builder/dry-query-builder","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/query-builder/dry-query-builder.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"DryQueryBuilder (Raw SQL)","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"QueryBuilder (Raw SQL)","permalink":"/hysteria-orm/docs/databases/sql/query-builder/"},"next":{"title":"DryModelQueryBuilder (Type-Safe)","permalink":"/hysteria-orm/docs/databases/sql/query-builder/dry-model-query-builder"}}');var i=n(4848),t=n(8453);const l={title:"DryQueryBuilder (Raw SQL)",sidebar_position:4},d="DryQueryBuilder (Raw SQL)",o={},a=[{value:"Key Features",id:"key-features",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Getting the Query String for Write Operations",id:"getting-the-query-string-for-write-operations",level:3},{value:"Debugging Read Queries (Use Regular QueryBuilder)",id:"debugging-read-queries-use-regular-querybuilder",level:3},{value:"Available Methods",id:"available-methods",level:2},{value:"Write Operations Only",id:"write-operations-only",level:3},{value:"Insert Operations",id:"insert-operations",level:3},{value:"Update Operations",id:"update-operations",level:3},{value:"Delete Operations",id:"delete-operations",level:3},{value:"Truncate Operations",id:"truncate-operations",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Common Table Expressions (CTEs) with Write Operations",id:"common-table-expressions-ctes-with-write-operations",level:3},{value:"Subqueries with Write Operations",id:"subqueries-with-write-operations",level:3},{value:"Unions with Write Operations",id:"unions-with-write-operations",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"1. Write Operation Debugging",id:"1-write-operation-debugging",level:3},{value:"2. Migration Scripts",id:"2-migration-scripts",level:3},{value:"3. Write Operation Analysis",id:"3-write-operation-analysis",level:3},{value:"4. Dynamic Write Query Building",id:"4-dynamic-write-query-building",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Core Methods",id:"core-methods",level:3},{value:"Query Building Methods",id:"query-building-methods",level:3},{value:"Modification Methods",id:"modification-methods",level:3},{value:"Limitations",id:"limitations",level:2},{value:"Comparison to Regular QueryBuilder",id:"comparison-to-regular-querybuilder",level:2}];function u(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"dryquerybuilder-raw-sql",children:"DryQueryBuilder (Raw SQL)"})}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"DryQueryBuilder"})," is a specialized query builder designed specifically for debugging ",(0,i.jsx)(r.strong,{children:"write operations"})," (INSERT, UPDATE, DELETE, TRUNCATE) without executing them. Access it via ",(0,i.jsx)(r.code,{children:"sql.dryQuery('table')"})," or ",(0,i.jsx)(r.code,{children:"sql.dryQuery(table, options)"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Write Operations Only"}),": Specifically designed for debugging INSERT, UPDATE, DELETE, and TRUNCATE operations"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"No Execution"}),": Builds query statements without running them against the database"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Query Inspection"}),": Get the raw SQL string using ",(0,i.jsx)(r.code,{children:"toQuery()"})," or ",(0,i.jsx)(r.code,{children:"unWrap()"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Write Operation Debugging"}),": Perfect for debugging complex write operations before execution"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Migration Scripts"}),": Ideal for building write queries in migration scripts"]}),"\n"]}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Important:"})," Use DryQueryBuilder only for debugging ",(0,i.jsx)(r.strong,{children:"write operations"}),". For debugging ",(0,i.jsx)(r.strong,{children:"read queries"})," (SELECT), use the regular QueryBuilder with ",(0,i.jsx)(r.code,{children:"toQuery()"})," and ",(0,i.jsx)(r.code,{children:"unWrap()"})," methods."]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(r.h3,{id:"getting-the-query-string-for-write-operations",children:"Getting the Query String for Write Operations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"import { sql } from \"hysteria-orm\";\n\n// Build a write operation without executing it\nconst insertQuery = sql.dryQuery('users')\n  .insert({ name: 'John Doe', email: 'john@example.com' });\n\n// Get the SQL string\nconst sqlString = insertQuery.toQuery();\nconsole.log(sqlString); // INSERT INTO `users` (`name`, `email`) VALUES (?, ?)\n\n// Get unwrapped query (alternative method)\nconst unwrappedQuery = insertQuery.unWrap();\nconsole.log(unwrappedQuery);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"debugging-read-queries-use-regular-querybuilder",children:"Debugging Read Queries (Use Regular QueryBuilder)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// For debugging READ queries, use the regular QueryBuilder\nconst readQuery = sql.query('users')\n  .where('status', 'active')\n  .select('id', 'name', 'email');\n\n// Debug the read query\nconst readSqlString = readQuery.toQuery();\nconsole.log(readSqlString); // SELECT `id`, `name`, `email` FROM `users` WHERE `status` = ?\n\n// Or get the unwrapped query\nconst readUnwrappedQuery = readQuery.unWrap();\nconsole.log(readUnwrappedQuery);\n"})}),"\n",(0,i.jsx)(r.h2,{id:"available-methods",children:"Available Methods"}),"\n",(0,i.jsx)(r.h3,{id:"write-operations-only",children:"Write Operations Only"}),"\n",(0,i.jsx)(r.p,{children:"DryQueryBuilder is designed specifically for write operations. For read queries, use the regular QueryBuilder:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// \u2705 CORRECT: Use DryQueryBuilder for write operations\nconst writeQuery = sql.dryQuery('users')\n  .where('id', 1)\n  .update({ name: 'Updated Name' });\n\nconst writeSql = writeQuery.toQuery();\nconsole.log(writeSql); // UPDATE `users` SET `name` = ? WHERE `id` = ?\n\n// \u274c WRONG: Don't use DryQueryBuilder for read operations\n// const readQuery = sql.dryQuery('users').select('*'); // This won't work as expected\n\n// \u2705 CORRECT: Use regular QueryBuilder for read operations\nconst readQuery = sql.query('users')\n  .select('id', 'name', 'email')\n  .where('age', '>', 18);\n\nconst readSql = readQuery.toQuery();\nconsole.log(readSql); // SELECT `id`, `name`, `email` FROM `users` WHERE `age` > ?\n"})}),"\n",(0,i.jsx)(r.h3,{id:"insert-operations",children:"Insert Operations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Single insert\nconst insertQuery = sql.dryQuery('users')\n  .insert({ name: 'John Doe', email: 'john@example.com' });\n\nconst insertSql = insertQuery.toQuery();\nconsole.log(insertSql); // INSERT INTO `users` (`name`, `email`) VALUES (?, ?)\n\n// Multiple inserts\nconst insertManyQuery = sql.dryQuery('users')\n  .insertMany([\n    { name: 'John Doe', email: 'john@example.com' },\n    { name: 'Jane Smith', email: 'jane@example.com' }\n  ]);\n\nconst insertManySql = insertManyQuery.toQuery();\n"})}),"\n",(0,i.jsx)(r.h3,{id:"update-operations",children:"Update Operations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const updateQuery = sql.dryQuery('users')\n  .where('id', 1)\n  .update({ name: 'Updated Name', email: 'updated@example.com' });\n\nconst updateSql = updateQuery.toQuery();\nconsole.log(updateSql); // UPDATE `users` SET `name` = ?, `email` = ? WHERE `id` = ?\n"})}),"\n",(0,i.jsx)(r.h3,{id:"delete-operations",children:"Delete Operations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Hard delete\nconst deleteQuery = sql.dryQuery('users')\n  .where('status', 'inactive')\n  .delete();\n\nconst deleteSql = deleteQuery.toQuery();\nconsole.log(deleteSql); // DELETE FROM `users` WHERE `status` = ?\n\n// Soft delete\nconst softDeleteQuery = sql.dryQuery('users')\n  .where('id', 1)\n  .softDelete({ column: 'deletedAt' });\n\nconst softDeleteSql = softDeleteQuery.toQuery();\nconsole.log(softDeleteSql); // UPDATE `users` SET `deletedAt` = ? WHERE `id` = ?\n"})}),"\n",(0,i.jsx)(r.h3,{id:"truncate-operations",children:"Truncate Operations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const truncateQuery = sql.dryQuery('users').truncate();\nconst truncateSql = truncateQuery.toQuery();\nconsole.log(truncateSql); // TRUNCATE TABLE `users`\n"})}),"\n",(0,i.jsx)(r.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(r.h3,{id:"common-table-expressions-ctes-with-write-operations",children:"Common Table Expressions (CTEs) with Write Operations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// CTEs with UPDATE operations\nconst cteUpdateQuery = sql.dryQuery('users')\n  .with('active_users', (qb) =>\n    qb.select('id').from('users').where('isActive', true)\n  )\n  .where('id', (sub) => sub.select('id').from('active_users'))\n  .update({ lastLoginAt: new Date() });\n\nconst cteUpdateSql = cteUpdateQuery.toQuery();\nconsole.log(cteUpdateSql);\n\n// For CTEs with SELECT operations, use regular QueryBuilder\nconst cteSelectQuery = sql.query('users')\n  .with('active_users', (qb) =>\n    qb.select('id', 'name').where('isActive', true)\n  )\n  .select('*')\n  .from('active_users');\n\nconst cteSelectSql = cteSelectQuery.toQuery();\nconsole.log(cteSelectSql);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"subqueries-with-write-operations",children:"Subqueries with Write Operations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Subqueries with DELETE operations\nconst subqueryDeleteQuery = sql.dryQuery('posts')\n  .where('userId', (sub) =>\n    sub.select('id').from('users').where('isActive', false)\n  )\n  .delete();\n\nconst subqueryDeleteSql = subqueryDeleteQuery.toQuery();\nconsole.log(subqueryDeleteSql);\n\n// For subqueries with SELECT operations, use regular QueryBuilder\nconst subquerySelectQuery = sql.query('posts')\n  .where('userId', (sub) =>\n    sub.select('id').from('users').where('isActive', true)\n  );\n\nconst subquerySelectSql = subquerySelectQuery.toQuery();\nconsole.log(subquerySelectSql);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"unions-with-write-operations",children:"Unions with Write Operations"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Note: Unions are typically used with SELECT operations\n// For debugging SELECT with unions, use regular QueryBuilder\nconst unionSelectQuery = sql.query('users')\n  .select('name')\n  .union('SELECT name FROM admins');\n\nconst unionSelectSql = unionSelectQuery.toQuery();\nconsole.log(unionSelectSql);\n"})}),"\n",(0,i.jsx)(r.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsx)(r.h3,{id:"1-write-operation-debugging",children:"1. Write Operation Debugging"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Debug complex write operations before execution\nconst debugUpdateQuery = sql.dryQuery('orders')\n  .join('users', 'orders.userId', 'users.id')\n  .where('orders.status', 'pending')\n  .where('users.isActive', true)\n  .update({ status: 'processed', processedAt: new Date() });\n\nconsole.log('Generated SQL:', debugUpdateQuery.toQuery());\nconsole.log('Bindings:', debugUpdateQuery.unWrap().bindings);\n\n// For debugging READ queries, use regular QueryBuilder\nconst debugReadQuery = sql.query('orders')\n  .join('users', 'orders.userId', 'users.id')\n  .join('products', 'orders.productId', 'products.id')\n  .where('orders.status', 'pending')\n  .where('users.isActive', true)\n  .select('orders.*', 'users.name', 'products.title');\n\nconsole.log('Read SQL:', debugReadQuery.toQuery());\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-migration-scripts",children:"2. Migration Scripts"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Build write queries for data migration\nconst migrationInsertQuery = sql.dryQuery('new_users')\n  .insert({ name: 'Migrated User', email: 'migrated@example.com' });\n\nconst migrationUpdateQuery = sql.dryQuery('old_users')\n  .where('migrated', false)\n  .update({ migrated: true, migratedAt: new Date() });\n\nconsole.log('Insert SQL:', migrationInsertQuery.toQuery());\nconsole.log('Update SQL:', migrationUpdateQuery.toQuery());\n\n// For reading data during migration, use regular QueryBuilder\nconst migrationReadQuery = sql.query('old_users')\n  .select('id', 'name', 'email', 'created_at')\n  .where('migrated', false);\n\nconsole.log('Read SQL:', migrationReadQuery.toQuery());\n"})}),"\n",(0,i.jsx)(r.h3,{id:"3-write-operation-analysis",children:"3. Write Operation Analysis"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Analyze write operation structure without execution\nconst analysisUpdateQuery = sql.dryQuery('products')\n  .where('category', 'electronics')\n  .where('price', '>', 100)\n  .update({ discount: 0.1, updatedAt: new Date() });\n\nconst queryInfo = analysisUpdateQuery.unWrap();\nconsole.log('Update Query:', queryInfo.sql);\nconsole.log('Bindings:', queryInfo.bindings);\nconsole.log('Table:', queryInfo.table);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"4-dynamic-write-query-building",children:"4. Dynamic Write Query Building"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"function buildUpdateQuery(filters: Record<string, any>, updateData: Record<string, any>) {\n  let query = sql.dryQuery('products');\n\n  if (filters.category) {\n    query = query.where('category', filters.category);\n  }\n\n  if (filters.minPrice) {\n    query = query.where('price', '>=', filters.minPrice);\n  }\n\n  if (filters.maxPrice) {\n    query = query.where('price', '<=', filters.maxPrice);\n  }\n\n  return query.update(updateData);\n}\n\nconst updateQuery = buildUpdateQuery(\n  { category: 'electronics', minPrice: 50 },\n  { discount: 0.1, updatedAt: new Date() }\n);\nconsole.log('Update SQL:', updateQuery.toQuery());\n\n// For dynamic READ queries, use regular QueryBuilder\nfunction buildSearchQuery(filters: Record<string, any>) {\n  let query = sql.query('products');\n\n  if (filters.category) {\n    query = query.where('category', filters.category);\n  }\n\n  if (filters.minPrice) {\n    query = query.where('price', '>=', filters.minPrice);\n  }\n\n  if (filters.maxPrice) {\n    query = query.where('price', '<=', filters.maxPrice);\n  }\n\n  return query.select('*').orderBy('name');\n}\n\nconst searchQuery = buildSearchQuery({ category: 'electronics', minPrice: 50 });\nconsole.log('Search SQL:', searchQuery.toQuery());\n"})}),"\n",(0,i.jsx)(r.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(r.h3,{id:"core-methods",children:"Core Methods"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"toQuery()"})," - Returns the SQL string with bindings"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"unWrap()"})," - Returns the complete query object with SQL and bindings"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"clone()"})," - Creates a copy of the query builder"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"query-building-methods",children:"Query Building Methods"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Note"}),": These methods are available for building WHERE clauses and conditions for write operations:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Filtering"}),": ",(0,i.jsx)(r.code,{children:"where"}),", ",(0,i.jsx)(r.code,{children:"orWhere"}),", ",(0,i.jsx)(r.code,{children:"andWhere"}),", ",(0,i.jsx)(r.code,{children:"whereIn"}),", ",(0,i.jsx)(r.code,{children:"whereNull"}),", ",(0,i.jsx)(r.code,{children:"whereBetween"}),", ",(0,i.jsx)(r.code,{children:"whereLike"}),", ",(0,i.jsx)(r.code,{children:"whereExists"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Joins"}),": ",(0,i.jsx)(r.code,{children:"join"}),", ",(0,i.jsx)(r.code,{children:"leftJoin"}),", ",(0,i.jsx)(r.code,{children:"rightJoin"}),", ",(0,i.jsx)(r.code,{children:"innerJoin"})," (for complex write operations)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Grouping"}),": ",(0,i.jsx)(r.code,{children:"groupBy"}),", ",(0,i.jsx)(r.code,{children:"having"})," (for grouped updates/deletes)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Ordering"}),": ",(0,i.jsx)(r.code,{children:"orderBy"}),", ",(0,i.jsx)(r.code,{children:"orderByRaw"})," (for ordered updates/deletes)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Limiting"}),": ",(0,i.jsx)(r.code,{children:"limit"}),", ",(0,i.jsx)(r.code,{children:"offset"})," (for limited updates/deletes)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"CTEs"}),": ",(0,i.jsx)(r.code,{children:"with"}),", ",(0,i.jsx)(r.code,{children:"withRecursive"}),", ",(0,i.jsx)(r.code,{children:"withMaterialized"})," (for complex write operations)"]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Not Available"}),": ",(0,i.jsx)(r.code,{children:"select"}),", ",(0,i.jsx)(r.code,{children:"selectRaw"}),", ",(0,i.jsx)(r.code,{children:"clearSelect"}),", ",(0,i.jsx)(r.code,{children:"union"}),", ",(0,i.jsx)(r.code,{children:"unionAll"})," (these are for read operations)"]}),"\n",(0,i.jsx)(r.h3,{id:"modification-methods",children:"Modification Methods"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Insert"}),": ",(0,i.jsx)(r.code,{children:"insert"}),", ",(0,i.jsx)(r.code,{children:"insertMany"}),", ",(0,i.jsx)(r.code,{children:"upsert"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Update"}),": ",(0,i.jsx)(r.code,{children:"update"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Delete"}),": ",(0,i.jsx)(r.code,{children:"delete"}),", ",(0,i.jsx)(r.code,{children:"softDelete"})]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Truncate"}),": ",(0,i.jsx)(r.code,{children:"truncate"})]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"No Execution"}),": Queries are never executed against the database"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"No Results"}),": Cannot retrieve actual data"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"No Hooks"}),": Model hooks are not triggered"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"No Validation"}),": Database-level validation is not performed"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"comparison-to-regular-querybuilder",children:"Comparison to Regular QueryBuilder"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Feature"}),(0,i.jsx)(r.th,{children:"DryQueryBuilder"}),(0,i.jsx)(r.th,{children:"QueryBuilder"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Execution"})}),(0,i.jsx)(r.td,{children:"No"}),(0,i.jsx)(r.td,{children:"Yes"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Results"})}),(0,i.jsx)(r.td,{children:"None"}),(0,i.jsx)(r.td,{children:"Data returned"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Use Case"})}),(0,i.jsx)(r.td,{children:"Debugging, Analysis"}),(0,i.jsx)(r.td,{children:"Data retrieval"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Performance"})}),(0,i.jsx)(r.td,{children:"No DB overhead"}),(0,i.jsx)(r.td,{children:"Full DB interaction"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Hooks"})}),(0,i.jsx)(r.td,{children:"Not triggered"}),(0,i.jsx)(r.td,{children:"Triggered"})]})]})]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsxs)(r.p,{children:["Next: ",(0,i.jsx)(r.a,{href:"/hysteria-orm/docs/databases/sql/query-builder/dry-model-query-builder",children:"DryModelQueryBuilder (Type-Safe)"})]})]})}function c(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>d});var s=n(6540);const i={},t=s.createContext(i);function l(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);