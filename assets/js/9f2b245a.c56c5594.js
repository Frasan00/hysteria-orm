"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[3122],{1146:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"databases/sql/query-builder/model-query-builder","title":"ModelQueryBuilder (Type-Safe)","description":"The ModelQueryBuilder is the primary, partially type-safe query API for Hysteria ORM models. All calls to User.query(), Post.query(), etc., return a ModelQueryBuilder instance.","source":"@site/docs/databases/sql/query-builder/model-query-builder.md","sourceDirName":"databases/sql/query-builder","slug":"/databases/sql/query-builder/model-query-builder","permalink":"/hysteria-orm/docs/databases/sql/query-builder/model-query-builder","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/query-builder/model-query-builder.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"ModelQueryBuilder (Type-Safe)","sidebar_position":1}}');var l=r(4848),i=r(8453);const a={title:"ModelQueryBuilder (Type-Safe)",sidebar_position:1},t="ModelQueryBuilder (Type-Safe)",d={},c=[{value:"Key Features",id:"key-features",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Raw right-hand side with rawStatement",id:"raw-right-hand-side-with-rawstatement",level:3},{value:"Selecting Columns",id:"selecting-columns",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Joins",id:"joins",level:2},{value:"Annotations",id:"annotations",level:2},{value:"CTEs (Common Table Expressions)",id:"ctes-common-table-expressions",level:2},{value:"Pluck",id:"pluck",level:2},{value:"Increment / Decrement",id:"increment--decrement",level:2},{value:"Locking",id:"locking",level:2},{value:"clearSelect",id:"clearselect",level:2},{value:"Soft Delete",id:"soft-delete",level:2},{value:"Type Safety Example",id:"type-safety-example",level:2},{value:"Comparison to QueryBuilder",id:"comparison-to-querybuilder",level:2},{value:"Full API Reference",id:"full-api-reference",level:2},{value:"Filtering",id:"filtering-1",level:3},{value:"Subqueries &amp; Nested Conditions",id:"subqueries--nested-conditions",level:3},{value:"Joins",id:"joins-1",level:3},{value:"Group By &amp; Having",id:"group-by--having",level:3},{value:"Unions",id:"unions",level:3},{value:"Aggregates",id:"aggregates",level:3},{value:"Annotations",id:"annotations-1",level:3},{value:"Select &amp; Raw Select",id:"select--raw-select",level:3},{value:"Pluck",id:"pluck-1",level:3},{value:"Pagination",id:"pagination-1",level:3},{value:"Locking",id:"locking-1",level:3},{value:"CTEs (Common Table Expressions)",id:"ctes-common-table-expressions-1",level:3},{value:"Relation Loading (ModelQueryBuilder only)",id:"relation-loading-modelquerybuilder-only",level:3},{value:"Relation Existence Filters (havingRelated / notHavingRelated)",id:"relation-existence-filters-havingrelated--nothavingrelated",level:3},{value:"Copying &amp; Query Output",id:"copying--query-output",level:3},{value:"ModelQueryBuilder Only",id:"modelquerybuilder-only",level:3}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"modelquerybuilder-type-safe",children:"ModelQueryBuilder (Type-Safe)"})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"ModelQueryBuilder"})," is the primary, partially type-safe query API for Hysteria ORM models. All calls to ",(0,l.jsx)(n.code,{children:"User.query()"}),", ",(0,l.jsx)(n.code,{children:"Post.query()"}),", etc., return a ModelQueryBuilder instance.\nThe query builder is partially type safe, triggering intellisense for developer experience but still allowing the developer to write whatever he wants.\nThe ModelQueryBuilder by default returns a ",(0,l.jsx)(n.code,{children:"ModelWithoutRelations<T>"})," type, which is a type that does not have any relations. You can add Relations or Annotations using the ",(0,l.jsx)(n.code,{children:"load"})," and ",(0,l.jsx)(n.code,{children:"annotate"})," methods."]}),"\n",(0,l.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Fully partially type-safe queries and results"}),"\n",(0,l.jsx)(n.li,{children:"Decorator and relation support"}),"\n",(0,l.jsx)(n.li,{children:"Rich API for filtering, selecting, joining, and more"}),"\n",(0,l.jsx)(n.li,{children:"Supports advanced features like CTEs, annotations, pagination, and soft deletes"}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Best Practice:"})," Use ModelQueryBuilder for all application logic and model-based queries."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query().where('status', 'active').many();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query().where('age', '>', 18).andWhere('isActive', true).many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"raw-right-hand-side-with-rawstatement",children:"Raw right-hand side with rawStatement"}),"\n",(0,l.jsxs)(n.p,{children:["When you need to compare a column to another column or an expression without creating a binding, use ",(0,l.jsx)(n.code,{children:"sql.rawStatement"}),". Identifiers inside the raw string are automatically quoted per database dialect."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"import { sql } from 'hysteria-orm';\n\nawait User.query()\n  .where('id', sql.rawStatement('user.id'))\n  .many();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"selecting-columns",children:"Selecting Columns"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const names = await User.query().select('name').many();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const page = await User.query().paginate(1, 10);\nconsole.log(page.data, page.paginationMetadata);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"joins",children:"Joins"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const postsWithUsers = await Post.query()\n  .join('users', 'posts.userId', 'users.id')\n  .select('posts.*', 'users.name')\n  .many();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"annotations",children:"Annotations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const user = await User.query()\n  .annotate('COUNT(*)', 'count')\n  .first();\nconsole.log(user.$annotations.count);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"ctes-common-table-expressions",children:"CTEs (Common Table Expressions)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query()\n  .with('users_cte', (qb) => qb.select('name').where('isActive', true))\n  .many();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"pluck",children:"Pluck"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const names = await User.query().pluck('name'); // string[]\n"})}),"\n",(0,l.jsx)(n.h2,{id:"increment--decrement",children:"Increment / Decrement"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().increment('age', 1);\nawait User.query().decrement('age', 1);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"locking",children:"Locking"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query().lockForUpdate().many();\nconst users = await User.query().forShare().many();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"clearselect",children:"clearSelect"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query().select('name').clearSelect().many();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"soft-delete",children:"Soft Delete"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().softDelete({ column: 'deleted_at' });\n"})}),"\n",(0,l.jsx)(n.h2,{id:"type-safety-example",children:"Type Safety Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// users: ModelWithoutRelations<User>\nconst users = await User.query().where('email', 'like', '%@example.com').many();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"comparison-to-querybuilder",children:"Comparison to QueryBuilder"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Type Safety:"})," ModelQueryBuilder is fully typed, QueryBuilder is not."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Decorator/Relation Support:"})," Only ModelQueryBuilder supports model decorators and relations."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Use Case:"})," Use ModelQueryBuilder for all model logic; use QueryBuilder for raw SQL."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"full-api-reference",children:"Full API Reference"}),"\n",(0,l.jsx)(n.h3,{id:"filtering-1",children:"Filtering"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"where"}),", ",(0,l.jsx)(n.code,{children:"orWhere"}),", ",(0,l.jsx)(n.code,{children:"andWhere"}),", ",(0,l.jsx)(n.code,{children:"whereIn"}),", ",(0,l.jsx)(n.code,{children:"whereNotIn"}),", ",(0,l.jsx)(n.code,{children:"whereNull"}),", ",(0,l.jsx)(n.code,{children:"whereNotNull"}),", ",(0,l.jsx)(n.code,{children:"whereBetween"}),", ",(0,l.jsx)(n.code,{children:"whereNot"}),", ",(0,l.jsx)(n.code,{children:"whereLike"}),", ",(0,l.jsx)(n.code,{children:"whereNotLike"}),", ",(0,l.jsx)(n.code,{children:"andWhereLike"}),", ",(0,l.jsx)(n.code,{children:"andWhereNotLike"}),", ",(0,l.jsx)(n.code,{children:"orWhereLike"}),", ",(0,l.jsx)(n.code,{children:"orWhereNotLike"}),", ",(0,l.jsx)(n.code,{children:"whereExists"}),", ",(0,l.jsx)(n.code,{children:"whereNotExists"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().where('email', 'like', '%@example.com').many();\nawait User.query().whereIn('status', ['active', 'pending']).many();\nawait User.query().whereNull('deletedAt').many();\nawait User.query().whereBetween('age', [18, 30]).many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"subqueries--nested-conditions",children:"Subqueries & Nested Conditions"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"whereSubQuery"}),", ",(0,l.jsx)(n.code,{children:"andWhereSubQuery"}),", ",(0,l.jsx)(n.code,{children:"orWhereSubQuery"}),", ",(0,l.jsx)(n.code,{children:"whereBuilder"}),", ",(0,l.jsx)(n.code,{children:"andWhereBuilder"}),", ",(0,l.jsx)(n.code,{children:"orWhereBuilder"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().whereSubQuery('id', (sub) => sub.select('userId').from('posts').where('published', true)).many();\nawait User.query().whereBuilder((qb) => qb.where('age', '>', 18).orWhere('isActive', true)).many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"joins-1",children:"Joins"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"join"}),", ",(0,l.jsx)(n.code,{children:"leftJoin"}),", ",(0,l.jsx)(n.code,{children:"rightJoin"}),", ",(0,l.jsx)(n.code,{children:"innerJoin"})," (by table name or model)"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await Post.query().join('users', 'posts.userId', 'users.id').many();\nawait Post.query().leftJoin(User, 'id', 'userId').many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"group-by--having",children:"Group By & Having"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"groupBy"}),", ",(0,l.jsx)(n.code,{children:"having"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().groupBy('status').having('COUNT(*)', '>', 1).many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"unions",children:"Unions"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"union"}),", ",(0,l.jsx)(n.code,{children:"unionAll"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().select('name').union((qb) => qb.select('authorName')).many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"aggregates",children:"Aggregates"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"getCount"}),", ",(0,l.jsx)(n.code,{children:"getMax"}),", ",(0,l.jsx)(n.code,{children:"getMin"}),", ",(0,l.jsx)(n.code,{children:"getAvg"}),", ",(0,l.jsx)(n.code,{children:"getSum"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const count = await User.query().getCount();\nconst maxAge = await User.query().getMax('age');\n"})}),"\n",(0,l.jsx)(n.h3,{id:"annotations-1",children:"Annotations"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"annotate"}),", ",(0,l.jsx)(n.code,{children:"removeAnnotations"}),", ",(0,l.jsx)(n.code,{children:"clearRemoveAnnotations"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().annotate('COUNT(*)', 'count').first();\nawait User.query().removeAnnotations().first();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"select--raw-select",children:"Select & Raw Select"}),"\n",(0,l.jsxs)(n.p,{children:["For models, only annotated columns are available and will be added to the ",(0,l.jsx)(n.code,{children:"$annotations"})," property of the model. Everything else will be ignored, if you need a query like ",(0,l.jsx)(n.code,{children:"selectRaw"})," you can use the ",(0,l.jsx)(n.code,{children:"QueryBuilder"})," instead."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"select"}),", ",(0,l.jsx)(n.code,{children:"selectRaw"}),", ",(0,l.jsx)(n.code,{children:"clearSelect"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().select('name', 'email').many();\nawait User.query().selectRaw('count(*) as count').first(); // will be ignored and `$additional` will be empty\nawait User.query().clearSelect().many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"pluck-1",children:"Pluck"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"pluck"})}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const names = await User.query().pluck('name');\n"})}),"\n",(0,l.jsx)(n.h3,{id:"pagination-1",children:"Pagination"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"paginate"}),", ",(0,l.jsx)(n.code,{children:"limit"}),", ",(0,l.jsx)(n.code,{children:"offset"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const page = await User.query().paginate(1, 10);\nawait User.query().limit(5).offset(10).many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"locking-1",children:"Locking"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"lockForUpdate"}),", ",(0,l.jsx)(n.code,{children:"forShare"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().lockForUpdate().many();\nawait User.query().forShare().many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"ctes-common-table-expressions-1",children:"CTEs (Common Table Expressions)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"with"}),", ",(0,l.jsx)(n.code,{children:"withRecursive"}),", ",(0,l.jsx)(n.code,{children:"withMaterialized"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().with('users_cte', (qb) => qb.select('name')).many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"relation-loading-modelquerybuilder-only",children:"Relation Loading (ModelQueryBuilder only)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"load"}),", ",(0,l.jsx)(n.code,{children:"clearRelations"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"await User.query().load('posts').many();\nawait User.query().load('addresses', Address, (qb) => qb.load('users')).many();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"relation-existence-filters-havingrelated--nothavingrelated",children:"Relation Existence Filters (havingRelated / notHavingRelated)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"havingRelated"}),", ",(0,l.jsx)(n.code,{children:"orHavingRelated"}),", ",(0,l.jsx)(n.code,{children:"notHavingRelated"}),", ",(0,l.jsx)(n.code,{children:"orNotHavingRelated"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Check whether a relation exists for the current model rows. You can pass either:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"a callback to add filters on the related query, or"}),"\n",(0,l.jsx)(n.li,{children:"an operator/value pair to add a COUNT-based HAVING on the related rows."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"By default, when no callback/operator/value is provided, the filter only checks that at least one related row exists."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// Base case: users that have at least one post\nawait User.query().havingRelated('posts').many();\n\n// With a callback: users that have at least one published post\nawait User.query().havingRelated('posts', (qb) => {\n  qb.where('published', true);\n}).many();\n\n// With operator/value: users that have more than 5 posts\nawait User.query().havingRelated('posts', '>', 5).many();\n\n// Negative variants\nawait User.query().notHavingRelated('posts').many(); // users with no posts\nawait User.query().orNotHavingRelated('posts', (qb) => qb.where('published', true)).many();\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Supported relation types: ",(0,l.jsx)(n.code,{children:"hasOne"}),", ",(0,l.jsx)(n.code,{children:"belongsTo"}),", ",(0,l.jsx)(n.code,{children:"hasMany"}),", and ",(0,l.jsx)(n.code,{children:"manyToMany"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"copying--query-output",children:"Copying & Query Output"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"copy"}),", ",(0,l.jsx)(n.code,{children:"toQuery"}),", ",(0,l.jsx)(n.code,{children:"unWrap"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const qb = User.query().where('isActive', true);\nconst qbCopy = qb.copy();\nconst sql = qb.toQuery();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"modelquerybuilder-only",children:"ModelQueryBuilder Only"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"removeAnnotations"}),", ",(0,l.jsx)(n.code,{children:"clearRemoveAnnotations"}),", ",(0,l.jsx)(n.code,{children:"load"}),", ",(0,l.jsx)(n.code,{children:"clearRelations"})]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.p,{children:["Next: ",(0,l.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/query-builder/",children:"QueryBuilder (Raw SQL)"})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var s=r(6540);const l={},i=s.createContext(l);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);