"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[3391],{6080:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"databases/sql/query-builder/query-builder","title":"QueryBuilder (Raw SQL)","description":"The QueryBuilder is a low-level, Knex-like API for building raw SQL queries. Access it via sql.query(\'table\').","source":"@site/docs/databases/sql/query-builder/query-builder.md","sourceDirName":"databases/sql/query-builder","slug":"/databases/sql/query-builder/","permalink":"/hysteria-orm/docs/databases/sql/query-builder/","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/query-builder/query-builder.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"QueryBuilder (Raw SQL)","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"ModelQueryBuilder (Type-Safe)","permalink":"/hysteria-orm/docs/databases/sql/query-builder/model-query-builder"},"next":{"title":"Command Line Interface Overview","permalink":"/hysteria-orm/docs/databases/sql/cli/overview"}}');var i=s(4848),a=s(8453);const l={title:"QueryBuilder (Raw SQL)",sidebar_position:2},t="QueryBuilder (Raw SQL)",c={},o=[{value:"Key Features",id:"key-features",level:2},{value:"Basics",id:"basics",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Pagination with Cursor",id:"pagination-with-cursor",level:3},{value:"Joins",id:"joins",level:3},{value:"Advanced Features",id:"advanced-features",level:3},{value:"<code>annotate</code> (Column Aliasing)",id:"annotate-column-aliasing",level:4},{value:"<code>removeAnnotations</code>",id:"removeannotations",level:4},{value:"<code>pluck</code>",id:"pluck",level:4},{value:"<code>increment</code> / <code>decrement</code>",id:"increment--decrement",level:4},{value:"<code>lockForUpdate</code> / <code>forShare</code>",id:"lockforupdate--forshare",level:4},{value:"<code>with</code> (Common Table Expressions, CTE)",id:"with-common-table-expressions-cte",level:4},{value:"Example Usage",id:"example-usage",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Raw right-hand side with rawStatement",id:"raw-right-hand-side-with-rawstatement",level:3},{value:"Selecting Columns",id:"selecting-columns",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Advanced Pagination",id:"advanced-pagination",level:3},{value:"Chunking Large Datasets",id:"chunking-large-datasets",level:4},{value:"When to Use Different Pagination Methods",id:"when-to-use-different-pagination-methods",level:4},{value:"Best Practices",id:"best-practices",level:3},{value:"From",id:"from",level:2},{value:"Joins",id:"joins-1",level:2},{value:"CTEs (Common Table Expressions)",id:"ctes-common-table-expressions",level:2},{value:"Truncate",id:"truncate",level:2},{value:"Soft Delete",id:"soft-delete",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Comparison to ModelQueryBuilder",id:"comparison-to-modelquerybuilder",level:2},{value:"Full API Reference",id:"full-api-reference",level:2},{value:"Filtering",id:"filtering-1",level:3},{value:"Subqueries &amp; Nested Conditions",id:"subqueries--nested-conditions",level:3},{value:"Joins",id:"joins-2",level:3},{value:"Group By &amp; Having",id:"group-by--having",level:3},{value:"Unions",id:"unions",level:3},{value:"Aggregates",id:"aggregates",level:3},{value:"Select &amp; Raw Select",id:"select--raw-select",level:3},{value:"Annotations",id:"annotations",level:3},{value:"Pluck",id:"pluck-1",level:3},{value:"Pagination",id:"pagination-1",level:3},{value:"Streaming (experimental)",id:"streaming-experimental",level:3},{value:"Chunking Large Datasets",id:"chunking-large-datasets-1",level:4},{value:"Locking",id:"locking",level:3},{value:"CTEs (Common Table Expressions)",id:"ctes-common-table-expressions-1",level:3},{value:"Copying &amp; Query Output",id:"copying--query-output",level:3},{value:"QueryBuilder Only",id:"querybuilder-only",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"querybuilder-raw-sql",children:"QueryBuilder (Raw SQL)"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"QueryBuilder"})," is a low-level, Knex-like API for building raw SQL queries. Access it via ",(0,i.jsx)(n.code,{children:"sql.query('table')"}),".\nIt's suitable for performance crucial database queries since there is no serialization and the driver output is directly returned from the query."]}),"\n",(0,i.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Works with any table (even without a model)"}),"\n",(0,i.jsx)(n.li,{children:"Not type-safe (returns plain objects)"}),"\n",(0,i.jsx)(n.li,{children:"Flexible for migrations, admin scripts, or advanced SQL"}),"\n",(0,i.jsx)(n.li,{children:"Supports filtering, selecting, joining, pagination, CTEs, truncate, softDelete, and more"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Best Practice:"})," Use QueryBuilder for raw SQL, migrations, or when want the max performance in a query. For app logic, prefer the ModelQueryBuilder."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"basics",children:"Basics"}),"\n",(0,i.jsxs)(n.p,{children:["For type-safe application queries use the ModelQueryBuilder. This page focuses on raw SQL with ",(0,i.jsx)(n.code,{children:"sql.query(table)"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const users = await sql.query('users').where('status', 'active').many();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pagination-with-cursor",children:"Pagination with Cursor"}),"\n",(0,i.jsxs)(n.p,{children:["Paginate with cursor is a pagination method that allows you to paginate the results with a cursor that does not use the offset clause (more efficient for large datasets).\nDiscriminator is used to identify the unique value to paginate by.\nBy default it generates an order by clause to the query ",(0,i.jsx)(n.code,{children:'orderBy(discriminator, "asc")'})," if not already present."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Get the first page\nconst [users, cursor] = await User.query().paginateWithCursor(1, { discriminator: "age" });\n\n// Get the second page\nconst [users2, cursor2] = await User.query().paginateWithCursor(1, { discriminator: "age" }, cursor);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"joins",children:"Joins"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const postsWithUsers = await Post.query()\n  .join('users', 'posts.userId', 'users.id')\n  .select('posts.*', 'users.name')\n  .many();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsxs)(n.h4,{id:"annotate-column-aliasing",children:[(0,i.jsx)(n.code,{children:"annotate"})," (Column Aliasing)"]}),"\n",(0,i.jsx)(n.p,{children:"Add computed columns or aliases to your result set."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const userCount = await User.query()\n  .annotate('count', 'id', 'total') // with sql method\n  .first();\n\nconst user = await User.query()\n  .annotate('id', 'userId') // only alias\n  .first();\n\nconsole.log(userCount.$annotations.total);\nconsole.log(userCount.$annotations.userId);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"removeannotations",children:(0,i.jsx)(n.code,{children:"removeAnnotations"})}),"\n",(0,i.jsx)(n.p,{children:"Remove all annotations from the result."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const user = await User.query().\n  annotate('count', 'id', 'total')\n  .removeAnnotations()\n  .first();\n\nconsole.log(user.$annotations); // error in ts\n"})}),"\n",(0,i.jsx)(n.h4,{id:"pluck",children:(0,i.jsx)(n.code,{children:"pluck"})}),"\n",(0,i.jsx)(n.p,{children:"Extract a single column as an array."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const names = await User.query().pluck('name'); // string[]\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"increment--decrement",children:[(0,i.jsx)(n.code,{children:"increment"})," / ",(0,i.jsx)(n.code,{children:"decrement"})]}),"\n",(0,i.jsx)(n.p,{children:"Atomically increment or decrement a column."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"await User.query().increment('age', 1);\nawait User.query().decrement('age', 1);\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"lockforupdate--forshare",children:[(0,i.jsx)(n.code,{children:"lockForUpdate"})," / ",(0,i.jsx)(n.code,{children:"forShare"})]}),"\n",(0,i.jsx)(n.p,{children:"Apply row-level locking (Postgres/MySQL only)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query().lockForUpdate().many();\nconst users = await User.query().forShare().many();\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"with-common-table-expressions-cte",children:[(0,i.jsx)(n.code,{children:"with"})," (Common Table Expressions, CTE)"]}),"\n",(0,i.jsx)(n.p,{children:"Use CTEs for advanced queries."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query()\n  .with('users_cte', (qb) => qb.select('name').where('isActive', true))\n  .many();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { sql } from "hysteria-orm";\nconst users = await sql.query("users").where("status", "active").many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const users = await sql.query("users").where("age", ">", 18).many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"raw-right-hand-side-with-rawstatement",children:"Raw right-hand side with rawStatement"}),"\n",(0,i.jsxs)(n.p,{children:["When you need to compare a column to another column or an expression without creating a binding, use ",(0,i.jsx)(n.code,{children:"sql.rawStatement"}),". Identifiers inside the raw string are automatically quoted per database dialect."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { sql } from "hysteria-orm";\n\nawait sql.query("users")\n  .where("id", sql.rawStatement("user.id"))\n  .many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"selecting-columns",children:"Selecting Columns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const names = await sql.query("users").select("name").many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const page = await sql.query("users").paginate(1, 10);\nconsole.log(page.data, page.paginationMetadata);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-pagination",children:"Advanced Pagination"}),"\n",(0,i.jsxs)(n.p,{children:["Hysteria ORM provides several methods for working with large datasets efficiently. See ",(0,i.jsx)(n.code,{children:"chunk"}),", ",(0,i.jsx)(n.code,{children:"paginate"})," and other helpers below."]}),"\n",(0,i.jsx)(n.h4,{id:"chunking-large-datasets",children:"Chunking Large Datasets"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"chunk"})," method is a powerful async generator that helps you process large datasets in manageable pieces without loading everything into memory at once:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { User } from './models/user';\n\n// Process all users in chunks of 250\nasync function processAllUsers() {\n  for await (const users of User.query().chunk(250)) {\n    // Each iteration gets a new batch of up to 250 users\n    await processUserBatch(users);\n    console.log(`Processed ${users.length} users`);\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can also use ",(0,i.jsx)(n.code,{children:"chunk"})," with the raw query builder:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { sql } from 'hysteria-orm';\n\nfor await (const records of sql.query('large_table').chunk(1000)) {\n  await someAsyncProcessingFunction(records);\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"when-to-use-different-pagination-methods",children:"When to Use Different Pagination Methods"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Use Case"}),(0,i.jsx)(n.th,{children:"Return Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"paginate(page, perPage)"})}),(0,i.jsx)(n.td,{children:"API responses with page metadata"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"{ data: T[], paginationMetadata: {...} }"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"limit(n).offset(m)"})}),(0,i.jsx)(n.td,{children:"Simple manual pagination"}),(0,i.jsx)(n.td,{children:"Array of results"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"chunk(size)"})}),(0,i.jsx)(n.td,{children:"Processing large datasets"}),(0,i.jsx)(n.td,{children:"Async iterable of result arrays"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"chunk"})," for background jobs, data migrations, or any large dataset processing"]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"paginate"})," for API responses where you need page numbers and metadata"]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"limit"}),"/",(0,i.jsx)(n.code,{children:"offset"})," when you need manual control over pagination"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"from",children:"From"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const users = await sql\n  .query("users")\n  .from(\n    (qb) => {\n      qb.select("name").from("users", "internal_users").where("internal_users.age", ">", 18);\n    },\n    "external_users"\n  )\n  .many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"joins-1",children:"Joins"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const postsWithUsers = await sql\n  .query("posts")\n  .join("users", "posts.userId", "users.id")\n  .select("posts.*", "users.name")\n  .many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"ctes-common-table-expressions",children:"CTEs (Common Table Expressions)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const users = await sql\n  .query("users")\n  .with("users_cte", (qb) => qb.select("name").where("isActive", true))\n  .many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"truncate",children:"Truncate"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").truncate();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"soft-delete",children:"Soft Delete"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").softDelete({ column: "deleted_at" });\n'})}),"\n",(0,i.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No type safety: results are plain objects"}),"\n",(0,i.jsx)(n.li,{children:"No decorator or relation support"}),"\n",(0,i.jsx)(n.li,{children:"Use with caution in app logic"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"comparison-to-modelquerybuilder",children:"Comparison to ModelQueryBuilder"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety:"})," QueryBuilder is not typed, ModelQueryBuilder is."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Decorator/Relation Support:"})," Only ModelQueryBuilder supports model decorators and relations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Case:"})," Use QueryBuilder for raw SQL, migrations, or admin scripts."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"full-api-reference",children:"Full API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"filtering-1",children:"Filtering"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"where"}),", ",(0,i.jsx)(n.code,{children:"orWhere"}),", ",(0,i.jsx)(n.code,{children:"andWhere"}),", ",(0,i.jsx)(n.code,{children:"whereNot"}),", ",(0,i.jsx)(n.code,{children:"andWhereNot"}),", ",(0,i.jsx)(n.code,{children:"orWhereNot"}),", ",(0,i.jsx)(n.code,{children:"whereIn"}),", ",(0,i.jsx)(n.code,{children:"whereNotIn"}),", ",(0,i.jsx)(n.code,{children:"whereNull"}),", ",(0,i.jsx)(n.code,{children:"whereNotNull"}),", ",(0,i.jsx)(n.code,{children:"whereBetween"}),", ",(0,i.jsx)(n.code,{children:"whereLike"}),", ",(0,i.jsx)(n.code,{children:"whereNotLike"}),", ",(0,i.jsx)(n.code,{children:"andWhereLike"}),", ",(0,i.jsx)(n.code,{children:"andWhereNotLike"}),", ",(0,i.jsx)(n.code,{children:"orWhereLike"}),", ",(0,i.jsx)(n.code,{children:"orWhereNotLike"}),", ",(0,i.jsx)(n.code,{children:"whereExists"}),", ",(0,i.jsx)(n.code,{children:"whereNotExists"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").where("email", "like", "%@example.com").many();\nawait sql.query("users").whereIn("status", ["active", "pending"]).many();\nawait sql.query("users").whereNull("deletedAt").many();\nawait sql.query("users").whereBetween("age", [18, 30]).many();\nawait sql.query("users").whereNot("name", "Alice").many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"subqueries--nested-conditions",children:"Subqueries & Nested Conditions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Overloads on ",(0,i.jsx)(n.code,{children:"where"}),"/",(0,i.jsx)(n.code,{children:"andWhere"}),"/",(0,i.jsx)(n.code,{children:"orWhere"})," and ",(0,i.jsx)(n.code,{children:"whereIn"}),"/",(0,i.jsx)(n.code,{children:"whereNotIn"})," support callbacks and subqueries."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Grouped conditions with a callback, this ignores everything that is not a where clause\nawait sql\n  .query("users")\n  .where((qb) => {\n    qb.where("age", ">", 18).orWhere("isActive", true);\n  })\n  .many();\n\n// Column compared to a subquery (defaults to IN)\nawait sql\n  .query("users")\n  .where("id", (sub) => sub.select("userId").from("posts").where("published", true))\n  .many();\n\n// Column compared to a subquery with explicit operator\nawait sql\n  .query("users")\n  .where("id", "not in", (sub) => sub.select("userId").from("posts"))\n  .many();\n\n// OR with subquery\nawait sql\n  .query("users")\n  .orWhere("id", (sub) => sub.select("ownerId").from("teams"))\n  .many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"joins-2",children:"Joins"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"join"}),", ",(0,i.jsx)(n.code,{children:"leftJoin"}),", ",(0,i.jsx)(n.code,{children:"rightJoin"}),", ",(0,i.jsx)(n.code,{children:"innerJoin"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("posts").join("users", "posts.userId", "users.id").many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"group-by--having",children:"Group By & Having"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"groupBy"}),", ",(0,i.jsx)(n.code,{children:"having"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").groupBy("status").having("COUNT(*)", ">", 1).many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"unions",children:"Unions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"union"}),", ",(0,i.jsx)(n.code,{children:"unionAll"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql\n  .query("users")\n  .select("name")\n  .union("SELECT name FROM users")\n  .many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"aggregates",children:"Aggregates"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getCount"}),", ",(0,i.jsx)(n.code,{children:"getMax"}),", ",(0,i.jsx)(n.code,{children:"getMin"}),", ",(0,i.jsx)(n.code,{children:"getAvg"}),", ",(0,i.jsx)(n.code,{children:"getSum"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const count = await sql.query("users").getCount();\nconst maxAge = await sql.query("users").getMax("age");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"select--raw-select",children:"Select & Raw Select"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"select"}),", ",(0,i.jsx)(n.code,{children:"selectRaw"}),", ",(0,i.jsx)(n.code,{children:"clearSelect"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").select("name", "email").many();\nawait sql.query("users").selectRaw("count(*) as count").first();\nawait sql.query("users").clearSelect().many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"annotations",children:"Annotations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"annotate"}),", ",(0,i.jsx)(n.code,{children:"removeAnnotations"}),", ",(0,i.jsx)(n.code,{children:"clearRemoveAnnotations"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").annotate("COUNT(*)", "count").first();\nawait sql.query("users").removeAnnotations().first();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pluck-1",children:"Pluck"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"pluck"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const names = await sql.query("users").pluck("name");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pagination-1",children:"Pagination"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"paginate"}),", ",(0,i.jsx)(n.code,{children:"limit"}),", ",(0,i.jsx)(n.code,{children:"offset"}),", ",(0,i.jsx)(n.code,{children:"chunk"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const page = await sql.query("users").paginate(1, 10);\nawait sql.query("users").limit(5).offset(10).many();\n\n// Process large datasets in chunks\nfor await (const users of sql.query("users").chunk(100)) {\n  // Process each chunk of 100 users\n  console.log(`Processing ${users.length} users...`);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"streaming-experimental",children:"Streaming (experimental)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Allows you to process the query results as a stream not all at once."}),"\n",(0,i.jsx)(n.li,{children:"It does not run any hooks nor any serialization."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Async generator for one-by-one processing\nfor await (const user of await sql.query(\"users\").stream()) {\n  console.log(`Processing user: ${user.name}`);\n}\n\n// Node.js Readable stream\nconst stream = await sql.query(\"users\").stream();\nstream.on('data', (user) => console.log(user));\nstream.on('end', () => console.log('Finished processing all users'));\nstream.on('error', (error) => console.error('Stream error:', error));\n"})}),"\n",(0,i.jsx)(n.h4,{id:"chunking-large-datasets-1",children:"Chunking Large Datasets"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"chunk"})," method is an async generator that helps you process large datasets without loading everything into memory at once:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { sql } from "hysteria-orm";\n\n// Process large datasets efficiently with controlled memory usage\nasync function processAllUsers() {\n  // Process users in chunks of 500\n  for await (const users of sql.query("users").chunk(500)) {\n    // Each iteration gets a new array of up to 500 users\n    await processUserChunk(users);\n  }\n}\n\n// The chunk method handles pagination automatically\n// and stops when no more records are available\n'})}),"\n",(0,i.jsx)(n.h3,{id:"locking",children:"Locking"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lockForUpdate"}),", ",(0,i.jsx)(n.code,{children:"forShare"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").lockForUpdate().many();\nawait sql.query("users").forShare().many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ctes-common-table-expressions-1",children:"CTEs (Common Table Expressions)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"with"}),", ",(0,i.jsx)(n.code,{children:"withRecursive"}),", ",(0,i.jsx)(n.code,{children:"withMaterialized"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql\n  .query("users")\n  // Normal CTE\n  .with("users_cte", (qb) => qb.select("name"))\n  // Recursive CTE\n  .withRecursive("users_cte", (qb) => qb.select("name"))\n  // Materialized CTE (PostgreSQL/CockroachDB only)\n  .withMaterialized("users_cte", (qb) => qb.select("name"))\n  .many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"copying--query-output",children:"Copying & Query Output"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"copy"}),", ",(0,i.jsx)(n.code,{children:"toQuery"}),", ",(0,i.jsx)(n.code,{children:"unWrap"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const qb = sql.query("users").where("isActive", true);\nconst qbCopy = qb.clone();\nconst sqlString = qb.toQuery();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"querybuilder-only",children:"QueryBuilder Only"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All methods are available on QueryBuilder, but no model/relation helpers."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Next: ",(0,i.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/relations/overview",children:"Relations"})]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>t});var r=s(6540);const i={},a=r.createContext(i);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);