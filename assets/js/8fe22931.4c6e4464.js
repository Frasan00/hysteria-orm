"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[6291],{5071:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"databases/sql/models/views","title":"Database Views","description":"Database views are virtual tables that are based on the result set of a SQL query. They provide a way to encapsulate complex queries and present them as simple tables. Hysteria ORM supports creating and working with database views through the @view decorator.","source":"@site/docs/databases/sql/models/views.md","sourceDirName":"databases/sql/models","slug":"/databases/sql/models/views","permalink":"/hysteria-orm/docs/databases/sql/models/views","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/models/views.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Database Views","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Model Hooks & Lifecycle","permalink":"/hysteria-orm/docs/databases/sql/models/hooks"},"next":{"title":"Standard Model Methods","permalink":"/hysteria-orm/docs/databases/sql/standard-methods/basics"}}');var i=a(4848),n=a(8453);const r={title:"Database Views",sidebar_position:4},o="Database Views",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Creating Views",id:"creating-views",level:2},{value:"Basic View Definition",id:"basic-view-definition",level:3},{value:"View with Complex Queries",id:"view-with-complex-queries",level:3}];function c(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"database-views",children:"Database Views"})}),"\n",(0,i.jsxs)(s.p,{children:["Database views are virtual tables that are based on the result set of a SQL query. They provide a way to encapsulate complex queries and present them as simple tables. Hysteria ORM supports creating and working with database views through the ",(0,i.jsx)(s.code,{children:"@view"})," decorator."]}),"\n",(0,i.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(s.p,{children:"Views in Hysteria ORM allow you to:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Create virtual tables based on complex SQL queries"}),"\n",(0,i.jsx)(s.li,{children:"Encapsulate business logic at the database level"}),"\n",(0,i.jsx)(s.li,{children:"Provide simplified interfaces for complex data relationships"}),"\n",(0,i.jsx)(s.li,{children:"Improve query performance through materialized views (when supported by the database)"}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"creating-views",children:"Creating Views"}),"\n",(0,i.jsx)(s.h3,{id:"basic-view-definition",children:"Basic View Definition"}),"\n",(0,i.jsxs)(s.p,{children:["To create a view, use the ",(0,i.jsx)(s.code,{children:"@view"})," decorator on a model class. The decorator takes a function that receives a query builder and returns the view definition."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"import { Model, column } from '@hysteria/orm';\nimport { view } from '@hysteria/orm/decorators';\n\n@view((query) => {\n  // It is advised to only use selectRaw in views, as it is not type safe and will not be validated by the ORM.\n  query.selectRaw(\"COUNT(*) as total\").from(\"users\");\n})\nexport class UserView extends Model {\n  @column({ primaryKey: true })\n  declare id: number;\n\n  @column()\n  declare total: number;\n}\n"})}),"\n",(0,i.jsx)(s.h3,{id:"view-with-complex-queries",children:"View with Complex Queries"}),"\n",(0,i.jsx)(s.p,{children:"Views can contain complex SQL queries with joins, aggregations, and subqueries:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"@view((query) => {\n  query\n    .selectRaw('users.id as userId')\n    .selectRaw('users.name as userName')\n    .selectRaw('COUNT(posts.id) as postCount')\n    .selectRaw('AVG(posts.rating) as avgRating')\n    .from('users')\n    .leftJoin('posts', 'users.id', 'posts.user_id')\n    .groupBy('users.id', 'users.name')\n    .having('post_count', '>', 0);\n})\nexport class UserStatsView extends Model {\n  @column({ primaryKey: true })\n  declare userId: number;\n\n  @column()\n  declare userName: string;\n\n  @column()\n  declare postCount: number;\n\n  @column()\n  declare avgRating: number;\n}\n"})})]})}function u(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>r,x:()=>o});var t=a(6540);const i={},n=t.createContext(i);function r(e){const s=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(n.Provider,{value:s},e.children)}}}]);