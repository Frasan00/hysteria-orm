"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[6565],{8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>a});var s=n(6540);const t={},r=s.createContext(t);function o(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:i},e.children)}},9777:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"getting-started/philosophy","title":"Philosophy","description":"Hysteria ORM is built on a set of guiding principles designed to empower developers working with both SQL and NoSQL databases in TypeScript and JavaScript environments.","source":"@site/docs/getting-started/philosophy.md","sourceDirName":"getting-started","slug":"/getting-started/philosophy","permalink":"/hysteria-orm/docs/getting-started/philosophy","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/getting-started/philosophy.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Philosophy","sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Prerequisites","permalink":"/hysteria-orm/docs/getting-started/prerequisites"}}');var t=n(4848),r=n(8453);const o={title:"Philosophy",sidebar_position:1},a="Philosophy",l={},d=[{value:"Core Principles",id:"core-principles",level:2},{value:"Why This Approach?",id:"why-this-approach",level:2},{value:"Example: Minimal Model",id:"example-minimal-model",level:2}];function c(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"philosophy",children:"Philosophy"})}),"\n",(0,t.jsx)(i.p,{children:"Hysteria ORM is built on a set of guiding principles designed to empower developers working with both SQL and NoSQL databases in TypeScript and JavaScript environments."}),"\n",(0,t.jsx)(i.h2,{id:"core-principles",children:"Core Principles"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Agnostic by Design:"}),"\nHysteria ORM is not tied to a single database engine or a specific backend framework."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"TypeScript-First, JavaScript-Friendly:"}),"\nWhile Hysteria ORM is written in TypeScript and leverages type safety for a better developer experience, it remains accessible to JavaScript users with minimal configuration."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Partially Type-Safe by Design:"}),'\nThe ORM is intentionally "partially type-safe." This means you get helpful IntelliSense and type hints for model interactions, but you retain the flexibility to bypass strict typing when needed. This balance allows for rapid prototyping and advanced use cases without fighting the type system.']}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Inspired by the Best:"}),"\nThe structure and API design are inspired by leading TypeScript ORMs such as TypeORM, Lucid, and Prisma blending familiar patterns (like static model methods and decorators) with unique improvements."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Minimalist Model Instances:"}),"\nModel classes act as repositories, providing static methods for querying and data manipulation. Model instances, on the other hand, are lightweight and only contain the columns (for SQL) or properties (for NoSQL) you define. This keeps your business logic clean and focused."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Concise and Expressive:"}),"\nInteract with your data using concise, expressive static methods. No unnecessary boilerplate\u2014just clear, direct access to your models and queries."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"why-this-approach",children:"Why This Approach?"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Flexibility:"}),'\nYou can "shoot yourself in the foot" if you want to\u2014Hysteria ORM doesn\'t get in your way. This is ideal for advanced users who need to step outside the guardrails.']}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"Developer Experience:"}),"\nThe API is designed to be intuitive, discoverable, and enjoyable to use, whether you're building a quick prototype or a large-scale application."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"example-minimal-model",children:"Example: Minimal Model"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"import { Model, column } from 'hysteria-orm';\n\nclass User extends Model {\n  @column({ primaryKey: true })\n  id!: number;\n\n  @column()\n  email!: string;\n}\n"})}),"\n",(0,t.jsx)(i.p,{children:"You can then interact with your data using static methods via active pattern:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-typescript",children:"// Fetch all users from the database\nconst users = await User.query().many();\n"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.p,{children:"Hysteria ORM aims to provide the right balance between safety, flexibility, and productivity\u2014so you can focus on building great applications."})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);