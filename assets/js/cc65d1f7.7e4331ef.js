"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[342],{5155:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Philosophy","href":"/hysteria-orm/docs/getting-started/philosophy","docId":"getting-started/philosophy","unlisted":false},{"type":"link","label":"Prerequisites","href":"/hysteria-orm/docs/getting-started/prerequisites","docId":"getting-started/prerequisites","unlisted":false},{"type":"link","label":"Installation","href":"/hysteria-orm/docs/getting-started/installation","docId":"getting-started/installation","unlisted":false},{"type":"link","label":"Setup","href":"/hysteria-orm/docs/getting-started/setup","docId":"getting-started/setup","unlisted":false},{"type":"link","label":"Environment Variables","href":"/hysteria-orm/docs/getting-started/environment","docId":"getting-started/environment","unlisted":false},{"type":"link","label":"TypeScript Usage","href":"/hysteria-orm/docs/getting-started/typescript","docId":"getting-started/typescript","unlisted":false},{"type":"link","label":"JavaScript Usage","href":"/hysteria-orm/docs/getting-started/javascript","docId":"getting-started/javascript","unlisted":false},{"type":"link","label":"Performance","href":"/hysteria-orm/docs/getting-started/performance","docId":"getting-started/performance","unlisted":false},{"type":"link","label":"Logging","href":"/hysteria-orm/docs/getting-started/logging","docId":"getting-started/logging","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"SQL","items":[{"type":"link","label":"SQL ORM Introduction","href":"/hysteria-orm/docs/databases/sql/introduction","docId":"databases/sql/introduction","unlisted":false},{"type":"category","label":"Models","items":[{"type":"link","label":"Defining SQL Models","href":"/hysteria-orm/docs/databases/sql/models/basics","docId":"databases/sql/models/basics","unlisted":false},{"type":"link","label":"Model Hooks & Lifecycle","href":"/hysteria-orm/docs/databases/sql/models/hooks","docId":"databases/sql/models/hooks","unlisted":false},{"type":"link","label":"Standard Model Methods","href":"/hysteria-orm/docs/databases/sql/standard-methods/basics","docId":"databases/sql/standard-methods/basics","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Query Builder Basics","href":"/hysteria-orm/docs/databases/sql/query-builder/basics","docId":"databases/sql/query-builder/basics","unlisted":false},{"type":"link","label":"Migrations","href":"/hysteria-orm/docs/databases/sql/migrations/basics","docId":"databases/sql/migrations/basics","unlisted":false},{"type":"link","label":"Relations Overview","href":"/hysteria-orm/docs/databases/sql/relations/overview","docId":"databases/sql/relations/overview","unlisted":false},{"type":"category","label":"Advanced","items":[{"type":"link","label":"Advanced SQL Features: CTE, JSON, Transactions","href":"/hysteria-orm/docs/databases/sql/advanced/cte","docId":"databases/sql/advanced/cte","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"MongoDB","items":[{"type":"link","label":"MongoDB Introduction","href":"/hysteria-orm/docs/databases/nosql/mongodb/introduction","docId":"databases/nosql/mongodb/introduction","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Redis","items":[{"type":"link","label":"Redis Introduction","href":"/hysteria-orm/docs/databases/nosql/redis/introduction","docId":"databases/nosql/redis/introduction","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"databases/nosql/mongodb/collections":{"id":"databases/nosql/mongodb/collections","title":"Defining MongoDB Collections","description":"Collections represent MongoDB collections. Define them by extending the Collection class and using the @property decorator for fields."},"databases/nosql/mongodb/introduction":{"id":"databases/nosql/mongodb/introduction","title":"MongoDB Introduction","description":"Hysteria ORM provides experimental support for MongoDB, allowing you to define collections, perform CRUD operations, and use a fluent query builder with a similar API to SQL models.","sidebar":"tutorialSidebar"},"databases/nosql/mongodb/methods":{"id":"databases/nosql/mongodb/methods","title":"Collection Methods","description":"MongoDB collections provide static methods for CRUD operations, similar to SQL models."},"databases/nosql/mongodb/query-builder":{"id":"databases/nosql/mongodb/query-builder","title":"MongoDB Query Builder","description":"The query builder provides a fluent API for building complex MongoDB queries."},"databases/nosql/mongodb/sessions":{"id":"databases/nosql/mongodb/sessions","title":"MongoDB Sessions & Transactions","description":"MongoDB supports transactions using sessions (requires a replica set)."},"databases/nosql/redis/introduction":{"id":"databases/nosql/redis/introduction","title":"Redis Introduction","description":"Hysteria ORM provides a simple, type-safe interface for Redis, supporting both singleton and instance-based connections.","sidebar":"tutorialSidebar"},"databases/nosql/redis/methods":{"id":"databases/nosql/redis/methods","title":"Redis Methods","description":"Hysteria ORM provides both static (singleton) and instance methods for Redis operations."},"databases/sql/advanced/cte":{"id":"databases/sql/advanced/cte","title":"Advanced SQL Features: CTE, JSON, Transactions","description":"Common Table Expressions (CTE)","sidebar":"tutorialSidebar"},"databases/sql/introduction":{"id":"databases/sql/introduction","title":"SQL ORM Introduction","description":"Hysteria ORM provides a powerful, partially type-safe ORM for SQL databases, supporting:","sidebar":"tutorialSidebar"},"databases/sql/migrations/basics":{"id":"databases/sql/migrations/basics","title":"Migrations","description":"Migrations allow you to version and evolve your database schema safely.","sidebar":"tutorialSidebar"},"databases/sql/models/annotations":{"id":"databases/sql/models/annotations","title":"Model Annotations","description":"In Hysteria ORM, every Model instance can have an $annotations field. This field contains any columns returned from a query that are not part of the main Model definition. This is useful for including computed columns, joined fields, or any extra data selected in your queries."},"databases/sql/models/basics":{"id":"databases/sql/models/basics","title":"Defining SQL Models","description":"Models represent tables in your database. Define them by extending the Model class and using decorators for columns and relations.","sidebar":"tutorialSidebar"},"databases/sql/models/hooks":{"id":"databases/sql/models/hooks","title":"Model Hooks & Lifecycle","description":"Hooks allow you to run logic before or after certain model actions. They are static methods on your model.","sidebar":"tutorialSidebar"},"databases/sql/query-builder/basics":{"id":"databases/sql/query-builder/basics","title":"Query Builder Basics","description":"Hysteria ORM provides two main query APIs:","sidebar":"tutorialSidebar"},"databases/sql/query-builder/model-query-builder":{"id":"databases/sql/query-builder/model-query-builder","title":"ModelQueryBuilder (Type-Safe)","description":"The ModelQueryBuilder is the primary, partially type-safe query API for Hysteria ORM models. All calls to User.query(), Post.query(), etc., return a ModelQueryBuilder instance."},"databases/sql/query-builder/query-builder":{"id":"databases/sql/query-builder/query-builder","title":"QueryBuilder (Raw SQL)","description":"The QueryBuilder is a low-level, Knex-like API for building raw SQL queries. Access it via sql.query(\'table\')."},"databases/sql/relations/overview":{"id":"databases/sql/relations/overview","title":"Relations Overview","description":"Hysteria ORM supports rich relation types between models:","sidebar":"tutorialSidebar"},"databases/sql/standard-methods/basics":{"id":"databases/sql/standard-methods/basics","title":"Standard Model Methods","description":"Hysteria ORM models provide a rich set of static methods for interacting with your database. These methods are fully type-safe and support advanced options.","sidebar":"tutorialSidebar"},"getting-started/environment":{"id":"getting-started/environment","title":"Environment Variables","description":"Hysteria ORM supports configuration via environment variables. Here are the most common variables:","sidebar":"tutorialSidebar"},"getting-started/installation":{"id":"getting-started/installation","title":"Installation","description":"Install Hysteria ORM using your preferred package manager:","sidebar":"tutorialSidebar"},"getting-started/javascript":{"id":"getting-started/javascript","title":"JavaScript Usage","description":"Hysteria ORM is written and designed for TypeScript, but it can still be used in JavaScript with some configurations:","sidebar":"tutorialSidebar"},"getting-started/logging":{"id":"getting-started/logging","title":"Logging","description":"Hysteria ORM provides built-in logging for queries and errors.","sidebar":"tutorialSidebar"},"getting-started/performance":{"id":"getting-started/performance","title":"Performance","description":"Hysteria ORM is designed for high performance. Here are some tips:","sidebar":"tutorialSidebar"},"getting-started/philosophy":{"id":"getting-started/philosophy","title":"Philosophy","description":"Hysteria ORM is built on a set of guiding principles designed to empower developers working with both SQL and NoSQL databases in TypeScript and JavaScript environments.","sidebar":"tutorialSidebar"},"getting-started/prerequisites":{"id":"getting-started/prerequisites","title":"Prerequisites","description":"Welcome to Hysteria ORM! Before you get started, ensure your environment meets the following requirements:","sidebar":"tutorialSidebar"},"getting-started/setup":{"id":"getting-started/setup","title":"Setup","description":"Environment Variables","sidebar":"tutorialSidebar"},"getting-started/typescript":{"id":"getting-started/typescript","title":"TypeScript Usage","description":"Hysteria ORM is built with TypeScript in mind, providing full type safety for models, queries, and migrations.","sidebar":"tutorialSidebar"},"utils/api":{"id":"utils/api","title":"API Reference","description":"A summary of all main exports from Hysteria ORM:"},"utils/overview":{"id":"utils/overview","title":"Advanced Utilities Overview","description":"Hysteria ORM provides several advanced utilities to enhance your development experience:"}}}}')}}]);