"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[4027],{8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(6540);const a={},t=r.createContext(a);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},8732:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"databases/sql/query-builder/advanced-pagination","title":"Advanced Pagination","description":"Hysteria ORM provides several methods for working with large datasets efficiently. This page details the advanced pagination features available in both QueryBuilder and ModelQueryBuilder.","source":"@site/docs/databases/sql/query-builder/advanced-pagination.md","sourceDirName":"databases/sql/query-builder","slug":"/databases/sql/query-builder/advanced-pagination","permalink":"/hysteria-orm/docs/databases/sql/query-builder/advanced-pagination","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/query-builder/advanced-pagination.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Advanced Pagination","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"QueryBuilder (Raw SQL)","permalink":"/hysteria-orm/docs/databases/sql/query-builder/"},"next":{"title":"Command Line Interface Overview","permalink":"/hysteria-orm/docs/databases/sql/cli/overview"}}');var a=s(4848),t=s(8453);const i={title:"Advanced Pagination",sidebar_position:5},o="Advanced Pagination",d={},c=[{value:"Chunking Large Datasets",id:"chunking-large-datasets",level:2},{value:"How Chunk Works",id:"how-chunk-works",level:3},{value:"Benefits of Chunking",id:"benefits-of-chunking",level:3},{value:"Raw SQL Example",id:"raw-sql-example",level:3},{value:"Combining with Filters",id:"combining-with-filters",level:3},{value:"When to Use Different Pagination Methods",id:"when-to-use-different-pagination-methods",level:2},{value:"Best Practices",id:"best-practices",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"advanced-pagination",children:"Advanced Pagination"})}),"\n",(0,a.jsx)(n.p,{children:"Hysteria ORM provides several methods for working with large datasets efficiently. This page details the advanced pagination features available in both QueryBuilder and ModelQueryBuilder."}),"\n",(0,a.jsx)(n.h2,{id:"chunking-large-datasets",children:"Chunking Large Datasets"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"chunk"})," method is a powerful async generator that helps you process large datasets in manageable pieces without loading everything into memory at once:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { User } from './models/user';\n\n// Process all users in chunks of 250\nasync function processAllUsers() {\n  for await (const users of User.query().chunk(250)) {\n    // Each iteration gets a new batch of up to 250 users\n    await processUserBatch(users);\n\n    // The loop continues until no more users are found\n    console.log(`Processed ${users.length} users`);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"how-chunk-works",children:"How Chunk Works"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"chunk"})," method:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Accepts a ",(0,a.jsx)(n.code,{children:"chunkSize"})," parameter (number) that determines how many records to fetch per query"]}),"\n",(0,a.jsxs)(n.li,{children:["Uses ",(0,a.jsx)(n.code,{children:"limit"})," and ",(0,a.jsx)(n.code,{children:"offset"})," internally to paginate through the dataset"]}),"\n",(0,a.jsx)(n.li,{children:"Automatically stops iteration when no more records are found"}),"\n",(0,a.jsx)(n.li,{children:"Returns each chunk as an array of model instances or raw objects"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"benefits-of-chunking",children:"Benefits of Chunking"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Memory Efficient"}),": Only loads a small portion of data at a time"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Prevents Timeouts"}),": Useful for processing datasets that would otherwise cause script timeouts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consistent Performance"}),": Keeps memory usage stable even with millions of records"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Simple API"}),": Uses modern JavaScript async iterators for clean, readable code"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"raw-sql-example",children:"Raw SQL Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { sql } from 'hysteria-orm';\n\nasync function processAllRecords() {\n  // Works with the raw SQL query builder too\n  for await (const records of sql.query('large_table').chunk(1000)) {\n    // Process each batch of records\n    await someAsyncProcessingFunction(records);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"combining-with-filters",children:"Combining with Filters"}),"\n",(0,a.jsxs)(n.p,{children:["You can combine ",(0,a.jsx)(n.code,{children:"chunk"})," with other query builder methods:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Only chunk active users ordered by creation date\nfor await (const users of User.query()\n  .where('status', 'active')\n  .orderBy('created_at')\n  .chunk(100)) {\n\n  // Process filtered chunks\n  await processActiveUsers(users);\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"when-to-use-different-pagination-methods",children:"When to Use Different Pagination Methods"}),"\n",(0,a.jsx)(n.p,{children:"Hysteria ORM offers several pagination approaches:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Use Case"}),(0,a.jsx)(n.th,{children:"Return Value"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"paginate(page, perPage)"})}),(0,a.jsx)(n.td,{children:"API responses with page metadata"}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"{ data: T[], paginationMetadata: {...} }"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"limit(n).offset(m)"})}),(0,a.jsx)(n.td,{children:"Simple manual pagination"}),(0,a.jsx)(n.td,{children:"Array of results"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"chunk(size)"})}),(0,a.jsx)(n.td,{children:"Processing large datasets"}),(0,a.jsx)(n.td,{children:"Async iterable of result arrays"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"chunk"})," for background jobs, data migrations, or any large dataset processing"]}),"\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"paginate"})," for API responses where you need page numbers and metadata"]}),"\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"limit"}),"/",(0,a.jsx)(n.code,{children:"offset"})," when you need manual control over pagination"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["Next: ",(0,a.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/advanced/cte",children:"Common Table Expressions"})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);