"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[3391],{6080:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"databases/sql/query-builder/query-builder","title":"QueryBuilder (Raw SQL)","description":"The QueryBuilder is a low-level, Knex-like API for building raw SQL queries. Access it via sql.query(\'table\').","source":"@site/docs/databases/sql/query-builder/query-builder.md","sourceDirName":"databases/sql/query-builder","slug":"/databases/sql/query-builder/","permalink":"/hysteria-orm/docs/databases/sql/query-builder/","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/query-builder/query-builder.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"QueryBuilder (Raw SQL)","sidebar_position":2}}');var i=s(4848),l=s(8453);const a={title:"QueryBuilder (Raw SQL)",sidebar_position:2},t="QueryBuilder (Raw SQL)",c={},d=[{value:"Key Features",id:"key-features",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Raw right-hand side with rawStatement",id:"raw-right-hand-side-with-rawstatement",level:3},{value:"Selecting Columns",id:"selecting-columns",level:2},{value:"Pagination",id:"pagination",level:2},{value:"From",id:"from",level:2},{value:"Joins",id:"joins",level:2},{value:"CTEs (Common Table Expressions)",id:"ctes-common-table-expressions",level:2},{value:"Truncate",id:"truncate",level:2},{value:"Soft Delete",id:"soft-delete",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Comparison to ModelQueryBuilder",id:"comparison-to-modelquerybuilder",level:2},{value:"Full API Reference",id:"full-api-reference",level:2},{value:"Filtering",id:"filtering-1",level:3},{value:"Subqueries &amp; Nested Conditions",id:"subqueries--nested-conditions",level:3},{value:"Joins",id:"joins-1",level:3},{value:"Group By &amp; Having",id:"group-by--having",level:3},{value:"Unions",id:"unions",level:3},{value:"Aggregates",id:"aggregates",level:3},{value:"Select &amp; Raw Select",id:"select--raw-select",level:3},{value:"Annotations",id:"annotations",level:3},{value:"Pluck",id:"pluck",level:3},{value:"Pagination",id:"pagination-1",level:3},{value:"Locking",id:"locking",level:3},{value:"CTEs (Common Table Expressions)",id:"ctes-common-table-expressions-1",level:3},{value:"Copying &amp; Query Output",id:"copying--query-output",level:3},{value:"QueryBuilder Only",id:"querybuilder-only",level:3}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"querybuilder-raw-sql",children:"QueryBuilder (Raw SQL)"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"QueryBuilder"})," is a low-level, Knex-like API for building raw SQL queries. Access it via ",(0,i.jsx)(n.code,{children:"sql.query('table')"}),".\nIt's suitable for performance crucial database queries since there is no serialization and the driver output is directly returned from the query."]}),"\n",(0,i.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Works with any table (even without a model)"}),"\n",(0,i.jsx)(n.li,{children:"Not type-safe (returns plain objects)"}),"\n",(0,i.jsx)(n.li,{children:"Flexible for migrations, admin scripts, or advanced SQL"}),"\n",(0,i.jsx)(n.li,{children:"Supports filtering, selecting, joining, pagination, CTEs, truncate, softDelete, and more"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Best Practice:"})," Use QueryBuilder for raw SQL, migrations, or when want the max performance in a query. For app logic, prefer the ModelQueryBuilder."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { sql } from "hysteria-orm";\nconst users = await sql.query("users").where("status", "active").many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const users = await sql.query("users").where("age", ">", 18).many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"raw-right-hand-side-with-rawstatement",children:"Raw right-hand side with rawStatement"}),"\n",(0,i.jsxs)(n.p,{children:["When you need to compare a column to another column or an expression without creating a binding, use ",(0,i.jsx)(n.code,{children:"sql.rawStatement"}),". Identifiers inside the raw string are automatically quoted per database dialect."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { sql } from "hysteria-orm";\n\nawait sql.query("users")\n  .where("id", sql.rawStatement("user.id"))\n  .many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"selecting-columns",children:"Selecting Columns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const names = await sql.query("users").select("name").many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const page = await sql.query("users").paginate(1, 10);\nconsole.log(page.data, page.paginationMetadata);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"from",children:"From"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const users = await sql\n  .query("users")\n  .from(\n    (qb) => {\n      qb.select("name").from("users", "internal_users").where("internal_users.age", ">", 18);\n    },\n    "external_users"\n  )\n  .many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"joins",children:"Joins"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const postsWithUsers = await sql\n  .query("posts")\n  .join("users", "posts.userId", "users.id")\n  .select("posts.*", "users.name")\n  .many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"ctes-common-table-expressions",children:"CTEs (Common Table Expressions)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const users = await sql\n  .query("users")\n  .with("users_cte", (qb) => qb.select("name").where("isActive", true))\n  .many();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"truncate",children:"Truncate"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").truncate();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"soft-delete",children:"Soft Delete"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").softDelete({ column: "deleted_at" });\n'})}),"\n",(0,i.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No type safety: results are plain objects"}),"\n",(0,i.jsx)(n.li,{children:"No decorator or relation support"}),"\n",(0,i.jsx)(n.li,{children:"Use with caution in app logic"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"comparison-to-modelquerybuilder",children:"Comparison to ModelQueryBuilder"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety:"})," QueryBuilder is not typed, ModelQueryBuilder is."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Decorator/Relation Support:"})," Only ModelQueryBuilder supports model decorators and relations."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Case:"})," Use QueryBuilder for raw SQL, migrations, or admin scripts."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"full-api-reference",children:"Full API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"filtering-1",children:"Filtering"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"where"}),", ",(0,i.jsx)(n.code,{children:"orWhere"}),", ",(0,i.jsx)(n.code,{children:"andWhere"}),", ",(0,i.jsx)(n.code,{children:"whereIn"}),", ",(0,i.jsx)(n.code,{children:"whereNotIn"}),", ",(0,i.jsx)(n.code,{children:"whereNull"}),", ",(0,i.jsx)(n.code,{children:"whereNotNull"}),", ",(0,i.jsx)(n.code,{children:"whereBetween"}),", ",(0,i.jsx)(n.code,{children:"whereNot"}),", ",(0,i.jsx)(n.code,{children:"whereLike"}),", ",(0,i.jsx)(n.code,{children:"whereNotLike"}),", ",(0,i.jsx)(n.code,{children:"andWhereLike"}),", ",(0,i.jsx)(n.code,{children:"andWhereNotLike"}),", ",(0,i.jsx)(n.code,{children:"orWhereLike"}),", ",(0,i.jsx)(n.code,{children:"orWhereNotLike"}),", ",(0,i.jsx)(n.code,{children:"whereExists"}),", ",(0,i.jsx)(n.code,{children:"whereNotExists"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").where("email", "like", "%@example.com").many();\nawait sql.query("users").whereIn("status", ["active", "pending"]).many();\nawait sql.query("users").whereNull("deletedAt").many();\nawait sql.query("users").whereBetween("age", [18, 30]).many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"subqueries--nested-conditions",children:"Subqueries & Nested Conditions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"whereSubQuery"}),", ",(0,i.jsx)(n.code,{children:"andWhereSubQuery"}),", ",(0,i.jsx)(n.code,{children:"orWhereSubQuery"}),", ",(0,i.jsx)(n.code,{children:"whereBuilder"}),", ",(0,i.jsx)(n.code,{children:"andWhereBuilder"}),", ",(0,i.jsx)(n.code,{children:"orWhereBuilder"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql\n  .query("users")\n  .whereSubQuery("id", (sub) =>\n    sub.select("userId").from("posts").where("published", true)\n  )\n  .many();\nawait sql\n  .query("users")\n  .whereBuilder((qb) => qb.where("age", ">", 18).orWhere("isActive", true))\n  .many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"joins-1",children:"Joins"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"join"}),", ",(0,i.jsx)(n.code,{children:"leftJoin"}),", ",(0,i.jsx)(n.code,{children:"rightJoin"}),", ",(0,i.jsx)(n.code,{children:"innerJoin"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("posts").join("users", "posts.userId", "users.id").many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"group-by--having",children:"Group By & Having"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"groupBy"}),", ",(0,i.jsx)(n.code,{children:"having"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").groupBy("status").having("COUNT(*)", ">", 1).many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"unions",children:"Unions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"union"}),", ",(0,i.jsx)(n.code,{children:"unionAll"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql\n  .query("users")\n  .select("name")\n  .union("SELECT name FROM users")\n  .many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"aggregates",children:"Aggregates"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getCount"}),", ",(0,i.jsx)(n.code,{children:"getMax"}),", ",(0,i.jsx)(n.code,{children:"getMin"}),", ",(0,i.jsx)(n.code,{children:"getAvg"}),", ",(0,i.jsx)(n.code,{children:"getSum"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const count = await sql.query("users").getCount();\nconst maxAge = await sql.query("users").getMax("age");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"select--raw-select",children:"Select & Raw Select"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"select"}),", ",(0,i.jsx)(n.code,{children:"selectRaw"}),", ",(0,i.jsx)(n.code,{children:"clearSelect"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").select("name", "email").many();\nawait sql.query("users").selectRaw("count(*) as count").first();\nawait sql.query("users").clearSelect().many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"annotations",children:"Annotations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"annotate"}),", ",(0,i.jsx)(n.code,{children:"removeAnnotations"}),", ",(0,i.jsx)(n.code,{children:"clearRemoveAnnotations"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").annotate("COUNT(*)", "count").first();\nawait sql.query("users").removeAnnotations().first();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pluck",children:"Pluck"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"pluck"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const names = await sql.query("users").pluck("name");\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pagination-1",children:"Pagination"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"paginate"}),", ",(0,i.jsx)(n.code,{children:"limit"}),", ",(0,i.jsx)(n.code,{children:"offset"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const page = await sql.query("users").paginate(1, 10);\nawait sql.query("users").limit(5).offset(10).many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"locking",children:"Locking"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lockForUpdate"}),", ",(0,i.jsx)(n.code,{children:"forShare"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql.query("users").lockForUpdate().many();\nawait sql.query("users").forShare().many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ctes-common-table-expressions-1",children:"CTEs (Common Table Expressions)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"with"}),", ",(0,i.jsx)(n.code,{children:"withRecursive"}),", ",(0,i.jsx)(n.code,{children:"withMaterialized"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'await sql\n  .query("users")\n  // Normal CTE\n  .with("users_cte", (qb) => qb.select("name"))\n  // Recursive CTE\n  .withRecursive("users_cte", (qb) => qb.select("name"))\n  // Materialized CTE (PostgreSQL/CockroachDB only)\n  .withMaterialized("users_cte", (qb) => qb.select("name"))\n  .many();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"copying--query-output",children:"Copying & Query Output"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"copy"}),", ",(0,i.jsx)(n.code,{children:"toQuery"}),", ",(0,i.jsx)(n.code,{children:"unWrap"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const qb = sql.query("users").where("isActive", true);\nconst qbCopy = qb.copy();\nconst sqlString = qb.toQuery();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"querybuilder-only",children:"QueryBuilder Only"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All methods are available on QueryBuilder, but no model/relation helpers."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Next: ",(0,i.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/relations/overview",children:"Relations"})]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var r=s(6540);const i={},l=r.createContext(i);function a(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);