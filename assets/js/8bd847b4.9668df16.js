"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[1168],{1524:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"databases/sql/patterns","title":"ORM Patterns","description":"Hysteria ORM supports two distinct patterns for working with your database models:","source":"@site/docs/databases/sql/patterns.md","sourceDirName":"databases/sql","slug":"/databases/sql/patterns","permalink":"/hysteria-orm/docs/databases/sql/patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/patterns.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"ORM Patterns","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"SQL ORM Introduction","permalink":"/hysteria-orm/docs/databases/sql/introduction"},"next":{"title":"Defining SQL Models","permalink":"/hysteria-orm/docs/databases/sql/models/basics"}}');var t=s(4848),i=s(8453);const d={title:"ORM Patterns",sidebar_position:2},c="ORM Patterns",l={},o=[{value:"Active Record Pattern",id:"active-record-pattern",level:2},{value:"How it Works",id:"how-it-works",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Available Static Methods",id:"available-static-methods",level:3},{value:"Benefits",id:"benefits",level:3},{value:"Model Embedding with Active Record",id:"model-embedding-with-active-record",level:3},{value:"Benefits of Model Embedding",id:"benefits-of-model-embedding",level:4},{value:"When to Use Model Embedding",id:"when-to-use-model-embedding",level:4},{value:"Repository Pattern (getModelManager)",id:"repository-pattern-getmodelmanager",level:2},{value:"How it Works",id:"how-it-works-1",level:3},{value:"Example Usage",id:"example-usage-1",level:3},{value:"When to Use Repository Pattern",id:"when-to-use-repository-pattern",level:3},{value:"Example with Dependency Injection",id:"example-with-dependency-injection",level:3},{value:"Example with Custom Connection",id:"example-with-custom-connection",level:3},{value:"Pattern Comparison",id:"pattern-comparison",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Use Active Record When:",id:"use-active-record-when",level:3},{value:"Use Active Record + Model Embedding When:",id:"use-active-record--model-embedding-when",level:3},{value:"Use Repository Pattern When:",id:"use-repository-pattern-when",level:3},{value:"Migration Between Patterns",id:"migration-between-patterns",level:2},{value:"Recommended Progression",id:"recommended-progression",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"orm-patterns",children:"ORM Patterns"})}),"\n",(0,t.jsx)(n.p,{children:"Hysteria ORM supports two distinct patterns for working with your database models:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Active Record Pattern"})," - Static methods on model classes (recommended)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Repository Pattern"})," - Using ",(0,t.jsx)(n.code,{children:"getModelManager()"})," for dependency injection"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"active-record-pattern",children:"Active Record Pattern"}),"\n",(0,t.jsxs)(n.p,{children:["The Active Record pattern is the ",(0,t.jsx)(n.strong,{children:"recommended approach"})," for most applications. It provides a clean, intuitive API where you call static methods directly on your model classes."]}),"\n",(0,t.jsx)(n.h3,{id:"how-it-works",children:"How it Works"}),"\n",(0,t.jsxs)(n.p,{children:["In the Active Record pattern, your model classes have static methods that handle database operations. These methods internally use a ",(0,t.jsx)(n.code,{children:"ModelManager"})," instance but abstract away the complexity."]}),"\n",(0,t.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Model, column } from 'hysteria-orm';\n\nclass User extends Model {\n  @column.integer({ primaryKey: true })\n  declare id: number;\n\n  @column()\n  declare name: string;\n\n  @column()\n  declare email: string;\n}\n\n// Active Record Pattern - Static methods on the model\nconst user = await User.insert({ name: 'John', email: 'john@example.com' });\nconst users = await User.find({ where: { isActive: true } });\nconst userById = await User.findOneByPrimaryKey(1);\nconst query = User.query().where('name', 'like', '%John%').many();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"available-static-methods",children:"Available Static Methods"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.insert(data)"})}),(0,t.jsx)(n.td,{children:"Insert a new record"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.insert({ name: 'John' })"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.insertMany(data[])"})}),(0,t.jsx)(n.td,{children:"Insert multiple records"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.insertMany([{ name: 'John' }, { name: 'Jane' }])"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.find(options)"})}),(0,t.jsx)(n.td,{children:"Find multiple records"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.find({ where: { isActive: true } })"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.findOne(options)"})}),(0,t.jsx)(n.td,{children:"Find a single record"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.findOne({ where: { email: 'john@example.com' } })"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.findBy(column, value)"})}),(0,t.jsx)(n.td,{children:"Find by specific column"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.findBy('email', 'john@example.com')"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.findOneBy(column, value)"})}),(0,t.jsx)(n.td,{children:"Find one by specific column"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.findOneBy('email', 'john@example.com')"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.findOneByPrimaryKey(id)"})}),(0,t.jsx)(n.td,{children:"Find by primary key"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.findOneByPrimaryKey(1)"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.update(data, options)"})}),(0,t.jsx)(n.td,{children:"Update records"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.update({ name: 'Johnny' }, { where: { id: 1 } })"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.delete(options)"})}),(0,t.jsx)(n.td,{children:"Delete records"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.delete({ where: { isActive: false } })"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.query()"})}),(0,t.jsx)(n.td,{children:"Get query builder"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.query().where('age', '>', 18).many()"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.all()"})}),(0,t.jsx)(n.td,{children:"Get all records"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.all()"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.count(options)"})}),(0,t.jsx)(n.td,{children:"Count records"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.count({ where: { isActive: true } })"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.exists(options)"})}),(0,t.jsx)(n.td,{children:"Check if records exist"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"User.exists({ where: { email: 'john@example.com' } })"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"benefits",children:"Benefits"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clean API"}),": Simple, intuitive method calls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"}),": Full TypeScript support with proper typing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Model Awareness"}),": Automatic handling of decorators, relations, and hooks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Less Boilerplate"}),": No need to manage ModelManager instances"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Familiar"}),": Similar to other popular ORMs like TypeORM"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Model Embedding Support"}),": Can be used with embedded models for even cleaner syntax"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"model-embedding-with-active-record",children:"Model Embedding with Active Record"}),"\n",(0,t.jsx)(n.p,{children:"Model embedding allows you to attach models directly to a SQL data source instance, providing an even cleaner API that combines the benefits of both patterns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { sql } from 'hysteria-orm';\nimport { User } from './models/User';\nimport { Post } from './models/Post';\n\n// Connect with embedded models\nconst sqlInstance = await sql.connect({\n  models: {\n    user: User,\n    post: Post,\n  },\n});\n\n// Access models directly through the data source (Active Record + Embedding)\nconst user = await sqlInstance.user.insert({ name: 'John', email: 'john@example.com' });\nconst users = await sqlInstance.user.find({ where: { isActive: true } });\nconst posts = await sqlInstance.post.query().where('published', true).many();\n"})}),"\n",(0,t.jsx)(n.h4,{id:"benefits-of-model-embedding",children:"Benefits of Model Embedding"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cleaner Syntax"}),": Access models as properties on the data source"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"}),": Full TypeScript support with ",(0,t.jsx)(n.code,{children:"AugmentedSqlDataSource<T>"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection Context"}),": Models are tied to specific connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prisma-like Experience"}),": Similar to Prisma's client model access"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"All Active Record Benefits"}),": Still get all the benefits of the Active Record pattern"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-model-embedding",children:"When to Use Model Embedding"}),"\n",(0,t.jsx)(n.p,{children:"Model embedding is perfect when you want:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cleaner API"}),": ",(0,t.jsx)(n.code,{children:"sqlInstance.user.insert()"})," vs ",(0,t.jsx)(n.code,{children:"User.insert()"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connection-specific Models"}),": Different models for different connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service Architecture"}),": Pass the data source instance to services"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing"}),": Easy to mock the entire data source with embedded models"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Service that accepts embedded models\nclass UserService {\n  constructor(private sql: AugmentedSqlDataSource<{ user: typeof User }>) {}\n\n  async createUser(userData: Partial<User>) {\n    return await this.sql.user.insert(userData);\n  }\n\n  async findActiveUsers() {\n    return await this.sql.user.find({ where: { isActive: true } });\n  }\n}\n\n// Usage\nconst sqlInstance = await sql.connect({ models: { user: User } });\nconst userService = new UserService(sqlInstance);\nconst users = await userService.findActiveUsers();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"repository-pattern-getmodelmanager",children:"Repository Pattern (getModelManager)"}),"\n",(0,t.jsx)(n.p,{children:"The Repository pattern provides more control and is useful for dependency injection, testing, or when you need explicit control over the data source connection."}),"\n",(0,t.jsx)(n.h3,{id:"how-it-works-1",children:"How it Works"}),"\n",(0,t.jsxs)(n.p,{children:["Instead of using static methods, you get a ",(0,t.jsx)(n.code,{children:"ModelManager"})," instance from the data source and use its methods directly."]}),"\n",(0,t.jsx)(n.h3,{id:"example-usage-1",children:"Example Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { sql, Model, column } from 'hysteria-orm';\n\nclass User extends Model {\n  @column.integer({ primaryKey: true })\n  declare id: number;\n\n  @column()\n  declare name: string;\n\n  @column()\n  declare email: string;\n}\n\n// Repository Pattern - Using getModelManager\nconst userManager = sql.getModelManager(User);\n\nconst user = await userManager.insert({ name: 'John', email: 'john@example.com' });\nconst users = await userManager.find({ where: { isActive: true } });\nconst userById = await userManager.findOneByPrimaryKey(1);\nconst query = userManager.query().where('name', 'like', '%John%').many();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"when-to-use-repository-pattern",children:"When to Use Repository Pattern"}),"\n",(0,t.jsx)(n.p,{children:"The Repository pattern is useful when you need:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dependency Injection"}),": Pass the manager to services or controllers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing"}),": Mock the manager for unit tests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multiple Connections"}),": Use different data sources for the same model"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Explicit Control"}),": Want to manage the data source connection explicitly"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-with-dependency-injection",children:"Example with Dependency Injection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Service class that accepts a ModelManager\nclass UserService {\n  constructor(private userManager: ModelManager<User>) {}\n\n  async createUser(userData: Partial<User>) {\n    return await this.userManager.insert(userData);\n  }\n\n  async findActiveUsers() {\n    return await this.userManager.find({\n      where: { isActive: true }\n    });\n  }\n}\n\n// Usage\nconst userManager = sql.getModelManager(User);\nconst userService = new UserService(userManager);\nconst users = await userService.findActiveUsers();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-with-custom-connection",children:"Example with Custom Connection"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Using a secondary connection\nconst secondarySql = await sql.connectToSecondarySource({\n  type: 'postgres',\n  host: 'read-replica.example.com',\n  // ... other config\n});\n\nconst readOnlyUserManager = secondarySql.getModelManager(User);\nconst users = await readOnlyUserManager.find({ where: { isActive: true } });\n"})}),"\n",(0,t.jsx)(n.h2,{id:"pattern-comparison",children:"Pattern Comparison"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"Active Record"}),(0,t.jsx)(n.th,{children:"Active Record + Embedding"}),(0,t.jsx)(n.th,{children:"Repository Pattern"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"API Simplicity"})}),(0,t.jsx)(n.td,{children:"\u2705 Very simple"}),(0,t.jsx)(n.td,{children:"\u2705 Cleanest syntax"}),(0,t.jsx)(n.td,{children:"\u26a0\ufe0f More verbose"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Type Safety"})}),(0,t.jsx)(n.td,{children:"\u2705 Full support"}),(0,t.jsx)(n.td,{children:"\u2705 Full support"}),(0,t.jsx)(n.td,{children:"\u2705 Full support"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Dependency Injection"})}),(0,t.jsx)(n.td,{children:"\u274c Not suitable"}),(0,t.jsx)(n.td,{children:"\u2705 Perfect for services"}),(0,t.jsx)(n.td,{children:"\u2705 Perfect"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Testing"})}),(0,t.jsx)(n.td,{children:"\u26a0\ufe0f Harder to mock"}),(0,t.jsx)(n.td,{children:"\u2705 Easy to mock"}),(0,t.jsx)(n.td,{children:"\u2705 Easy to mock"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Multiple Connections"})}),(0,t.jsx)(n.td,{children:"\u26a0\ufe0f Limited"}),(0,t.jsx)(n.td,{children:"\u2705 Full control"}),(0,t.jsx)(n.td,{children:"\u2705 Full control"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Model Awareness"})}),(0,t.jsx)(n.td,{children:"\u2705 Automatic"}),(0,t.jsx)(n.td,{children:"\u2705 Automatic"}),(0,t.jsx)(n.td,{children:"\u2705 Automatic"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Hooks & Relations"})}),(0,t.jsx)(n.td,{children:"\u2705 Full support"}),(0,t.jsx)(n.td,{children:"\u2705 Full support"}),(0,t.jsx)(n.td,{children:"\u2705 Full support"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Learning Curve"})}),(0,t.jsx)(n.td,{children:"\u2705 Easy"}),(0,t.jsx)(n.td,{children:"\u2705 Easy"}),(0,t.jsx)(n.td,{children:"\u26a0\ufe0f Moderate"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Connection Context"})}),(0,t.jsx)(n.td,{children:"\u274c Global only"}),(0,t.jsx)(n.td,{children:"\u2705 Per-connection"}),(0,t.jsx)(n.td,{children:"\u2705 Per-connection"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"use-active-record-when",children:"Use Active Record When:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Building typical web applications"}),"\n",(0,t.jsx)(n.li,{children:"You want the simplest API"}),"\n",(0,t.jsx)(n.li,{children:"You're using the default database connection"}),"\n",(0,t.jsx)(n.li,{children:"You don't need complex dependency injection"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"use-active-record--model-embedding-when",children:"Use Active Record + Model Embedding When:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Building service-oriented applications"}),"\n",(0,t.jsxs)(n.li,{children:["You want the cleanest possible API (",(0,t.jsx)(n.code,{children:"sqlInstance.user.insert()"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"You need connection-specific models"}),"\n",(0,t.jsx)(n.li,{children:"You want dependency injection with clean syntax"}),"\n",(0,t.jsx)(n.li,{children:"You're building microservices or modular applications"}),"\n",(0,t.jsx)(n.li,{children:"You need easy testing with mockable data sources"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"use-repository-pattern-when",children:"Use Repository Pattern When:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Building enterprise applications with complex architecture"}),"\n",(0,t.jsx)(n.li,{children:"You need fine-grained control over ModelManager instances"}),"\n",(0,t.jsx)(n.li,{children:"You're working with multiple database connections"}),"\n",(0,t.jsx)(n.li,{children:"You want explicit control over data source management"}),"\n",(0,t.jsx)(n.li,{children:"You need to pass individual managers to different services"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"migration-between-patterns",children:"Migration Between Patterns"}),"\n",(0,t.jsx)(n.p,{children:"You can easily switch between patterns as your application grows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Start with Active Record\nconst user = await User.insert({ name: 'John' });\n\n// Upgrade to Active Record + Model Embedding for cleaner services\nconst sqlInstance = await sql.connect({ models: { user: User } });\nclass UserService {\n  constructor(private sql: AugmentedSqlDataSource<{ user: typeof User }>) {}\n\n  async createUser(data: Partial<User>) {\n    return await this.sql.user.insert(data);\n  }\n}\n\n// Or use Repository Pattern for fine-grained control\nclass UserService {\n  constructor(private userManager: ModelManager<User>) {}\n\n  async createUser(data: Partial<User>) {\n    return await this.userManager.insert(data);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["All patterns use the same underlying ",(0,t.jsx)(n.code,{children:"ModelManager"})," class, so the functionality is identical. The choice is primarily about API design and architectural preferences."]}),"\n",(0,t.jsx)(n.h3,{id:"recommended-progression",children:"Recommended Progression"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Start with Active Record"})," for simple applications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Upgrade to Active Record + Model Embedding"})," when you need services and dependency injection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use Repository Pattern"})," only when you need fine-grained control over individual managers"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Next: ",(0,t.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/models/basics",children:"Defining Models"})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var r=s(6540);const t={},i=r.createContext(t);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);