"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[5676],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var s=i(6540);const a={},r=s.createContext(a);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},9900:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"databases/sql/cli/migrations/basics","title":"Migrations","description":"Migrations allow you to version and evolve your database schema safely.","source":"@site/docs/databases/sql/cli/migrations/basics.md","sourceDirName":"databases/sql/cli/migrations","slug":"/databases/sql/cli/migrations/basics","permalink":"/hysteria-orm/docs/databases/sql/cli/migrations/basics","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/cli/migrations/basics.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Migrations","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Command Line Interface Overview","permalink":"/hysteria-orm/docs/databases/sql/cli/overview"},"next":{"title":"Programmatic Migrations","permalink":"/hysteria-orm/docs/databases/sql/cli/migrations/programmatic"}}');var a=i(4848),r=i(8453);const l={title:"Migrations",sidebar_position:1},t="Migrations",c={},d=[{value:"Creating a Migration",id:"creating-a-migration",level:2},{value:"Running Migrations",id:"running-migrations",level:2},{value:"Rolling Back",id:"rolling-back",level:2},{value:"Schema Builder API",id:"schema-builder-api",level:2},{value:"API Reference",id:"api-reference",level:3},{value:"createTable",id:"createtable",level:4},{value:"alterTable",id:"altertable",level:4},{value:"dropTable",id:"droptable",level:4},{value:"renameTable",id:"renametable",level:4},{value:"truncateTable",id:"truncatetable",level:4},{value:"unique",id:"unique",level:4},{value:"Best Practices",id:"best-practices",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"migrations",children:"Migrations"})}),"\n",(0,a.jsx)(n.p,{children:"Migrations allow you to version and evolve your database schema safely."}),"\n",(0,a.jsx)(n.h2,{id:"creating-a-migration",children:"Creating a Migration"}),"\n",(0,a.jsx)(n.p,{children:"Create a migration file in your migrations directory:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"import { Migration } from 'hysteria-orm';\n\nexport default class extends Migration {\n  async up() {\n    this.schema.createTable('users', (table) => {\n      table.bigSerial('id').primary();\n      table.string('name');\n      table.string('email').unique();\n      table.integer('age');\n      table.boolean('is_active');\n      table.timestamp('created_at');\n      table.timestamp('updated_at');\n    });\n  }\n\n  async down() {\n    this.schema.dropTable('users');\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"running-migrations",children:"Running Migrations"}),"\n",(0,a.jsx)(n.p,{children:"Run migrations using the CLI or programmatically:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx hysteria run:migrations\nyarn hysteria run:migrations\n"})}),"\n",(0,a.jsx)(n.h2,{id:"rolling-back",children:"Rolling Back"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npx hysteria rollback:migrations\nyarn hysteria rollback:migrations\n"})}),"\n",(0,a.jsx)(n.h2,{id:"schema-builder-api",children:"Schema Builder API"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"createTable"}),", ",(0,a.jsx)(n.code,{children:"alterTable"}),", ",(0,a.jsx)(n.code,{children:"dropTable"}),", ",(0,a.jsx)(n.code,{children:"renameTable"}),", ",(0,a.jsx)(n.code,{children:"truncateTable"})]}),"\n",(0,a.jsxs)(n.li,{children:["Column types: ",(0,a.jsx)(n.code,{children:"string"}),", ",(0,a.jsx)(n.code,{children:"integer"}),", ",(0,a.jsx)(n.code,{children:"bigSerial"}),", ",(0,a.jsx)(n.code,{children:"boolean"}),", ",(0,a.jsx)(n.code,{children:"date"}),", ",(0,a.jsx)(n.code,{children:"jsonb"}),", ",(0,a.jsx)(n.code,{children:"enum"}),", etc."]}),"\n",(0,a.jsxs)(n.li,{children:["Constraints: ",(0,a.jsx)(n.code,{children:"primary"}),", ",(0,a.jsx)(n.code,{children:"unique"}),", ",(0,a.jsx)(n.code,{children:"references"}),", ",(0,a.jsx)(n.code,{children:"notNullable"}),", ",(0,a.jsx)(n.code,{children:"default"}),", etc."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"api-reference",children:"API Reference"}),"\n",(0,a.jsx)(n.h4,{id:"createtable",children:"createTable"}),"\n",(0,a.jsx)(n.p,{children:"Create a new table with columns and constraints."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"schema.createTable('users', (table) => {\n  table.bigSerial('id').primary();\n  table.string('email').unique();\n});\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"table"})," (string): Table name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"cb"})," (function): Callback to define columns"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"options.ifNotExists"})," (boolean, optional): Only create if not exists"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"altertable",children:"alterTable"}),"\n",(0,a.jsx)(n.p,{children:"Alter an existing table (add/drop/modify columns)."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"schema.alterTable('users', (table) => {\n  table.addColumn('age', 'integer', {\n    notNullable: true,\n    // other options\n  });\n});\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"table"})," (string): Table name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"cb"})," (function): Callback to define alterations"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"droptable",children:"dropTable"}),"\n",(0,a.jsx)(n.p,{children:"Drop a table."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"schema.dropTable('users');\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"table"})," (string): Table name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ifExists"})," (boolean, optional): Only drop if exists"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"renametable",children:"renameTable"}),"\n",(0,a.jsx)(n.p,{children:"Rename a table."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"schema.renameTable('old_users', 'users');\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"oldtable"})," (string): Current table name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"newtable"})," (string): New table name"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"truncatetable",children:"truncateTable"}),"\n",(0,a.jsx)(n.p,{children:"Remove all rows from a table."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"schema.truncateTable('users');\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"table"})," (string): Table name"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"unique",children:"unique"}),"\n",(0,a.jsx)(n.p,{children:"Add a unique constraint to columns."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"schema.unique('users', ['email']);\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"table"})," (string): Table name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"columns"})," (string[]): Column names"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"constraintName"})," (string, optional): Custom constraint name"]}),"\n"]}),"\n",(0,a.jsx)(n.h1,{id:"issues",children:"Issues"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If using commonjs, you need to specify the ",(0,a.jsx)(n.code,{children:"-c"})," flag when running the migrations, this only works with javascript migrations. TypeScript migrations that are defined in a ",(0,a.jsx)(n.code,{children:"commonjs"})," project will not work."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use one migration per schema change."}),"\n",(0,a.jsxs)(n.li,{children:["Always provide a ",(0,a.jsx)(n.code,{children:"down"})," method."]}),"\n",(0,a.jsx)(n.li,{children:"Test migrations in CI."}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["Next: ",(0,a.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/cli/migrations/programmatic",children:"Programmatic Migrations"})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);