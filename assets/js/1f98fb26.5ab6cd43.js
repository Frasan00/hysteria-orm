"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[973],{6412:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"databases/nosql/mongodb/methods","title":"Collection Methods","description":"MongoDB collections provide static methods for CRUD operations, similar to SQL models.","source":"@site/docs/databases/nosql/mongodb/methods.md","sourceDirName":"databases/nosql/mongodb","slug":"/databases/nosql/mongodb/methods","permalink":"/hysteria-orm/docs/databases/nosql/mongodb/methods","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/nosql/mongodb/methods.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Collection Methods","sidebar_position":3}}');var t=s(4848),o=s(8453);const r={title:"Collection Methods",sidebar_position:3},i="Collection Methods",c={},l=[{value:"CRUD Methods",id:"crud-methods",level:2},{value:"<code>find</code>",id:"find",level:3},{value:"<code>findOne</code>",id:"findone",level:3},{value:"<code>findOneOrFail</code>",id:"findoneorfail",level:3},{value:"<code>insert</code>",id:"insert",level:3},{value:"<code>insertMany</code>",id:"insertmany",level:3},{value:"<code>updateRecord</code>",id:"updaterecord",level:3},{value:"<code>deleteRecord</code>",id:"deleterecord",level:3},{value:"Best Practices",id:"best-practices",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"collection-methods",children:"Collection Methods"})}),"\n",(0,t.jsx)(n.p,{children:"MongoDB collections provide static methods for CRUD operations, similar to SQL models."}),"\n",(0,t.jsx)(n.h2,{id:"crud-methods",children:"CRUD Methods"}),"\n",(0,t.jsx)(n.h3,{id:"find",children:(0,t.jsx)(n.code,{children:"find"})}),"\n",(0,t.jsx)(n.p,{children:"Fetch multiple documents."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const users = await User.find({ where: { email: 'test@example.com' } });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"findone",children:(0,t.jsx)(n.code,{children:"findOne"})}),"\n",(0,t.jsx)(n.p,{children:"Fetch a single document."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const user = await User.findOne({ where: { email: 'test@example.com' } });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"findoneorfail",children:(0,t.jsx)(n.code,{children:"findOneOrFail"})}),"\n",(0,t.jsx)(n.p,{children:"Fetch a single document or throw if not found."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const user = await User.findOneOrFail({ where: { email: 'test@example.com' } });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"insert",children:(0,t.jsx)(n.code,{children:"insert"})}),"\n",(0,t.jsx)(n.p,{children:"Insert a new document."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const user = await User.insert({ name: 'Test', email: 'test@example.com' });\n"})}),"\n",(0,t.jsx)(n.h3,{id:"insertmany",children:(0,t.jsx)(n.code,{children:"insertMany"})}),"\n",(0,t.jsx)(n.p,{children:"Insert multiple documents."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const users = await User.insertMany([\n  { name: 'Test 1', email: 'test1@example.com' },\n  { name: 'Test 2', email: 'test2@example.com' },\n]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"updaterecord",children:(0,t.jsx)(n.code,{children:"updateRecord"})}),"\n",(0,t.jsx)(n.p,{children:"Update a document by id."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"user.name = 'Updated';\nconst updated = await User.updateRecord(user);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deleterecord",children:(0,t.jsx)(n.code,{children:"deleteRecord"})}),"\n",(0,t.jsx)(n.p,{children:"Delete a document by id."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"await User.deleteRecord(user);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always use the static methods for database operations."}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"findOneOrFail"})," for required lookups."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Next: ",(0,t.jsx)(n.a,{href:"/hysteria-orm/docs/databases/nosql/mongodb/query-builder",children:"MongoDB Query Builder"})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var d=s(6540);const t={},o=d.createContext(t);function r(e){const n=d.useContext(o);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),d.createElement(o.Provider,{value:n},e.children)}}}]);