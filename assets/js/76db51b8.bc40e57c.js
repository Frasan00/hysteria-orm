"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[5178],{6375:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"databases/sql/models/mixins","title":"Model Mixins","description":"Hysteria ORM provides simple mixins that let you easily add common functionality to your models. Mixins are pre-built model classes that you can extend to inherit useful columns, behaviors, and patterns without writing repetitive code.","source":"@site/docs/databases/sql/models/mixins.md","sourceDirName":"databases/sql/models","slug":"/databases/sql/models/mixins","permalink":"/hysteria-orm/docs/databases/sql/models/mixins","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/models/mixins.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Model Mixins","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Defining SQL Models","permalink":"/hysteria-orm/docs/databases/sql/models/basics"},"next":{"title":"Model Hooks & Lifecycle","permalink":"/hysteria-orm/docs/databases/sql/models/hooks"}}');var t=i(4848),r=i(8453);const d={title:"Model Mixins",sidebar_position:4},l="Model Mixins",a={},o=[{value:"What are Mixins?",id:"what-are-mixins",level:2},{value:"Available Mixins",id:"available-mixins",level:2},{value:"TimestampedModel",id:"timestampedmodel",level:3},{value:"UuidModel",id:"uuidmodel",level:3},{value:"AutogeneratedModel",id:"autogeneratedmodel",level:3},{value:"User (Base User Model)",id:"user-base-user-model",level:3},{value:"Combining Mixins",id:"combining-mixins",level:2},{value:"Creating Custom Mixins",id:"creating-custom-mixins",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Simple Blog Post with Timestamps",id:"simple-blog-post-with-timestamps",level:3},{value:"E-commerce Product with UUID",id:"e-commerce-product-with-uuid",level:3},{value:"User Management System",id:"user-management-system",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Choose the Right Mixin",id:"1-choose-the-right-mixin",level:3},{value:"2. Combine Wisely",id:"2-combine-wisely",level:3},{value:"3. Override When Necessary",id:"3-override-when-necessary",level:3},{value:"4. Document Your Custom Mixins",id:"4-document-your-custom-mixins",level:3},{value:"OpenAPI Integration",id:"openapi-integration",level:2},{value:"Migration Considerations",id:"migration-considerations",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"model-mixins",children:"Model Mixins"})}),"\n",(0,t.jsx)(n.p,{children:"Hysteria ORM provides simple mixins that let you easily add common functionality to your models. Mixins are pre-built model classes that you can extend to inherit useful columns, behaviors, and patterns without writing repetitive code."}),"\n",(0,t.jsx)(n.h2,{id:"what-are-mixins",children:"What are Mixins?"}),"\n",(0,t.jsxs)(n.p,{children:["Mixins are reusable model classes that contain common sets of columns and behaviors. Instead of manually adding the same columns (like ",(0,t.jsx)(n.code,{children:"createdAt"}),", ",(0,t.jsx)(n.code,{children:"updatedAt"}),", ",(0,t.jsx)(n.code,{children:"id"}),") to every model, you can extend a mixin to get all that functionality automatically."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"DRY (Don't Repeat Yourself)"}),": Avoid duplicating common column definitions across models"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistency"}),": Ensure all models follow the same patterns for timestamps, IDs, etc."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintainability"}),": Update common functionality in one place"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"}),": Full TypeScript support with proper typing"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"available-mixins",children:"Available Mixins"}),"\n",(0,t.jsx)(n.h3,{id:"timestampedmodel",children:"TimestampedModel"}),"\n",(0,t.jsxs)(n.p,{children:["Adds automatic timestamp tracking with ",(0,t.jsx)(n.code,{children:"createdAt"}),", ",(0,t.jsx)(n.code,{children:"updatedAt"}),", and ",(0,t.jsx)(n.code,{children:"deletedAt"})," columns."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { TimestampedModel, column } from 'hysteria-orm';\n\nexport class User extends TimestampedModel {\n  @column()\n  declare name: string;\n\n  @column()\n  declare email: string;\n\n  // createdAt, updatedAt, and deletedAt are inherited from TimestampedModel\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Inherited Columns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"createdAt: Date"})," - Automatically set when record is created (",(0,t.jsx)(n.code,{children:"autoCreate: true"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"updatedAt: Date"})," - Automatically updated when record is modified (",(0,t.jsx)(n.code,{children:"autoCreate: true, autoUpdate: true"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"deletedAt: Date | null"})," - Used for soft delete functionality"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"uuidmodel",children:"UuidModel"}),"\n",(0,t.jsx)(n.p,{children:"Provides a UUID primary key column that's automatically generated."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { UuidModel, column } from 'hysteria-orm';\n\nexport class Product extends UuidModel {\n  @column()\n  declare name: string;\n\n  @column.float()\n  declare price: number;\n\n  // id: string (UUID) is inherited from UuidModel\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Inherited Columns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id: string"})," - UUID primary key with automatic generation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"autogeneratedmodel",children:"AutogeneratedModel"}),"\n",(0,t.jsx)(n.p,{children:"Provides an auto-incrementing integer primary key."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { AutogeneratedModel, column } from 'hysteria-orm';\n\nexport class Category extends AutogeneratedModel {\n  @column()\n  declare name: string;\n\n  @column()\n  declare description: string;\n\n  // id: BigInt (auto-incrementing) is inherited from AutogeneratedModel\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Inherited Columns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id: BigInt"})," - Auto-incrementing integer primary key"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"user-base-user-model",children:"User (Base User Model)"}),"\n",(0,t.jsx)(n.p,{children:"A comprehensive user model with common authentication fields."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { User as BaseUser, column } from 'hysteria-orm';\n\nexport class User extends BaseUser {\n  @column()\n  declare name: string;\n\n  @column({ hidden: true })\n  declare password: string;\n\n  // id, email, createdAt, updatedAt, deletedAt are inherited from BaseUser\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Inherited Columns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id: BigInt"})," - Auto-incrementing primary key"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"email: string"})," - User email address"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"createdAt: Date"})," - Account creation timestamp"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"updatedAt: Date"})," - Last modification timestamp"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"deletedAt: Date | null"})," - Soft delete timestamp"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"combining-mixins",children:"Combining Mixins"}),"\n",(0,t.jsx)(n.p,{children:"You can create your own mixins by combining existing ones or extending them with additional functionality:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { TimestampedModel, column } from 'hysteria-orm';\n\n// Create a custom mixin that extends TimestampedModel\nexport class AuditableModel extends TimestampedModel {\n  @column({ hidden: true })\n  declare createdBy: string | null;\n\n  @column({ hidden: true })\n  declare updatedBy: string | null;\n\n  @column({ hidden: true })\n  declare deletedBy: string | null;\n}\n\n// Use your custom mixin\nexport class Order extends AuditableModel {\n  @column.uuid({ primaryKey: true })\n  declare id: string;\n\n  @column.float()\n  declare total: number;\n\n  @column()\n  declare status: string;\n\n  // Inherits: createdAt, updatedAt, deletedAt, createdBy, updatedBy, deletedBy\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-custom-mixins",children:"Creating Custom Mixins"}),"\n",(0,t.jsx)(n.p,{children:"You can create your own mixins for domain-specific patterns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Model, column } from 'hysteria-orm';\n\n// Mixin for soft-deletable models\nexport class SoftDeleteModel extends Model {\n  @column.date()\n  declare deletedAt: Date | null;\n\n  static softDeleteColumn = \"deletedAt\";\n  static softDeleteValue = new Date().toISOString();\n}\n\n// Mixin for versioned models (optimistic locking)\nexport class VersionedModel extends Model {\n  @column.integer({ default: 1 })\n  declare version: number;\n\n  static async beforeUpdate(data: any): Promise<void> {\n    data.version = (data.version || 1) + 1;\n  }\n}\n\n// Mixin for models with slug support\nexport class SlugModel extends Model {\n  @column()\n  declare slug: string;\n\n  static async beforeInsert(data: any): Promise<void> {\n    if (!data.slug && data.name) {\n      data.slug = data.name\n        .toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/(^-|-$)/g, '');\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"simple-blog-post-with-timestamps",children:"Simple Blog Post with Timestamps"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { TimestampedModel, column, belongsTo } from 'hysteria-orm';\nimport { User } from './User';\n\nexport class Post extends TimestampedModel {\n  @column.uuid({ primaryKey: true })\n  declare id: string;\n\n  @column()\n  declare title: string;\n\n  @column()\n  declare content: string;\n\n  @column()\n  declare userId: string;\n\n  @belongsTo(() => User, 'userId')\n  declare user: User;\n\n  // createdAt, updatedAt, deletedAt inherited from TimestampedModel\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"e-commerce-product-with-uuid",children:"E-commerce Product with UUID"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { UuidModel, column, hasMany } from 'hysteria-orm';\nimport { OrderItem } from './OrderItem';\n\nexport class Product extends UuidModel {\n  @column()\n  declare name: string;\n\n  @column()\n  declare description: string;\n\n  @column.float()\n  declare price: number;\n\n  @column.integer()\n  declare stock: number;\n\n  @column.date({ autoCreate: true })\n  declare createdAt: Date;\n\n  @hasMany(() => OrderItem, 'productId')\n  declare orderItems: OrderItem[];\n\n  // id: string (UUID) inherited from UuidModel\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"user-management-system",children:"User Management System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { User as BaseUser, column, hasMany } from 'hysteria-orm';\nimport { Post } from './Post';\n\nexport class User extends BaseUser {\n  @column()\n  declare name: string;\n\n  @column({ hidden: true })\n  declare password: string;\n\n  @column()\n  declare role: 'admin' | 'user' | 'moderator';\n\n  @column.boolean()\n  declare isActive: boolean;\n\n  @hasMany(() => Post, 'userId')\n  declare posts: Post[];\n\n  // id, email, createdAt, updatedAt, deletedAt inherited from BaseUser\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-choose-the-right-mixin",children:"1. Choose the Right Mixin"}),"\n",(0,t.jsx)(n.p,{children:"Select mixins based on your model's primary key and functionality needs:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"UuidModel"})," for distributed systems or when you need globally unique IDs"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"AutogeneratedModel"})," for traditional auto-incrementing integer IDs"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"TimestampedModel"})," when you only need timestamps (no primary key)"]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"User"})," mixin for authentication-related models"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-combine-wisely",children:"2. Combine Wisely"}),"\n",(0,t.jsx)(n.p,{children:"When creating custom mixins, think about composition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Good: Specific, focused mixin\nexport class TimestampedUuidModel extends UuidModel {\n  @column.date({ autoCreate: true })\n  declare createdAt: Date;\n\n  @column.date({ autoCreate: true, autoUpdate: true })\n  declare updatedAt: Date;\n}\n\n// Better: Use existing mixins\nexport class MyModel extends TimestampedModel {\n  @column.uuid({ primaryKey: true })\n  declare id: string;\n  // Override the inherited deletedAt if you don't need soft deletes\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-override-when-necessary",children:"3. Override When Necessary"}),"\n",(0,t.jsx)(n.p,{children:"You can override inherited columns if needed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'export class SpecialUser extends User {\n  // Override the inherited id to use UUID instead of BigInt\n  @column.uuid({ primaryKey: true })\n  declare id: string;\n\n  // Override email to add validation\n  @column({\n    type: "varchar",\n    length: 320, // RFC 5321 max email length\n    openApi: { type: "string", format: "email", required: true },\n  })\n  declare email: string;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-document-your-custom-mixins",children:"4. Document Your Custom Mixins"}),"\n",(0,t.jsx)(n.p,{children:"When creating reusable mixins, document them well:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"/**\n * @description Mixin for multi-tenant applications\n * Adds tenantId column and automatic tenant filtering\n */\nexport class TenantModel extends Model {\n  @column()\n  declare tenantId: string;\n\n  static beforeFetch(queryBuilder: ModelQueryBuilder<any>): void {\n    // Add tenant filtering logic here\n    // queryBuilder.where('tenantId', getCurrentTenantId());\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"openapi-integration",children:"OpenAPI Integration"}),"\n",(0,t.jsx)(n.p,{children:"All built-in mixins include proper OpenAPI schemas for automatic API documentation generation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// The mixins automatically include OpenAPI metadata\nexport class Product extends UuidModel {\n  @column({\n    openApi: { type: "string", maxLength: 100, required: true }\n  })\n  declare name: string;\n\n  // id already has OpenAPI metadata from UuidModel\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"migration-considerations",children:"Migration Considerations"}),"\n",(0,t.jsx)(n.p,{children:"When using mixins, ensure your database migrations include the inherited columns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// In your migration file\nexport async function up(queryBuilder: QueryBuilder): Promise<void> {\n  await queryBuilder.schema.createTable('products', (table) => {\n    table.uuid('id').primary(); // From UuidModel\n    table.string('name').notNullable();\n    table.float('price').notNullable();\n    table.timestamp('created_at').defaultTo(queryBuilder.fn.now()); // From TimestampedModel\n    table.timestamp('updated_at').defaultTo(queryBuilder.fn.now()); // From TimestampedModel\n    table.timestamp('deleted_at').nullable(); // From TimestampedModel\n  });\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/models/basics",children:"Model Basics"})," - Learn about basic model definition and decorators"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/models/hooks",children:"Model Hooks"})," - Understand lifecycle hooks and custom behaviors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/models/views",children:"Model Views"})," - Working with database views"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/standard-methods/basics",children:"Standard Methods"})," - Learn about CRUD operations on models"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Next: ",(0,t.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/models/hooks",children:"Model Hooks & Lifecycle"})]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);