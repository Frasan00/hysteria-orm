"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[7240],{7931:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"databases/sql/query-builder/dry-model-query-builder","title":"DryModelQueryBuilder (Type-Safe)","description":"The DryModelQueryBuilder is a specialized, type-safe query builder designed specifically for debugging write operations (INSERT, UPDATE, DELETE, TRUNCATE) on models without executing them. Access it via User.dryQuery() or Model.dryQuery().","source":"@site/docs/databases/sql/query-builder/dry-model-query-builder.md","sourceDirName":"databases/sql/query-builder","slug":"/databases/sql/query-builder/dry-model-query-builder","permalink":"/hysteria-orm/docs/databases/sql/query-builder/dry-model-query-builder","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/query-builder/dry-model-query-builder.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"DryModelQueryBuilder (Type-Safe)","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"DryQueryBuilder (Raw SQL)","permalink":"/hysteria-orm/docs/databases/sql/query-builder/dry-query-builder"},"next":{"title":"Command Line Interface Overview","permalink":"/hysteria-orm/docs/databases/sql/cli/overview"}}');var t=n(4848),i=n(8453);const o={title:"DryModelQueryBuilder (Type-Safe)",sidebar_position:5},l="DryModelQueryBuilder (Type-Safe)",d={},a=[{value:"Key Features",id:"key-features",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Getting the Query String for Write Operations",id:"getting-the-query-string-for-write-operations",level:3},{value:"Debugging Read Queries (Use Regular ModelQueryBuilder)",id:"debugging-read-queries-use-regular-modelquerybuilder",level:3},{value:"Complex Model Write Operations",id:"complex-model-write-operations",level:3},{value:"Available Methods",id:"available-methods",level:2},{value:"Write Operations Only",id:"write-operations-only",level:3},{value:"Insert Operations",id:"insert-operations",level:3},{value:"Update Operations",id:"update-operations",level:3},{value:"Delete Operations",id:"delete-operations",level:3},{value:"Truncate Operations",id:"truncate-operations",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Model Relations with Write Operations",id:"model-relations-with-write-operations",level:3},{value:"Annotations with Write Operations",id:"annotations-with-write-operations",level:3},{value:"Common Table Expressions (CTEs) with Write Operations",id:"common-table-expressions-ctes-with-write-operations",level:3},{value:"Subqueries with Write Operations",id:"subqueries-with-write-operations",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"1. Write Operation Debugging",id:"1-write-operation-debugging",level:3},{value:"2. Migration Scripts",id:"2-migration-scripts",level:3},{value:"3. Write Operation Analysis",id:"3-write-operation-analysis",level:3},{value:"4. Dynamic Write Query Building",id:"4-dynamic-write-query-building",level:3},{value:"5. Hook Testing",id:"5-hook-testing",level:3},{value:"Model-Specific Features",id:"model-specific-features",level:2},{value:"Type Safety",id:"type-safety",level:3},{value:"Model Hooks",id:"model-hooks",level:3},{value:"Decorator Support",id:"decorator-support",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Core Methods",id:"core-methods",level:3},{value:"Query Building Methods",id:"query-building-methods",level:3},{value:"Modification Methods",id:"modification-methods",level:3},{value:"Limitations",id:"limitations",level:2},{value:"Comparison to Regular ModelQueryBuilder",id:"comparison-to-regular-modelquerybuilder",level:2},{value:"Comparison to DryQueryBuilder",id:"comparison-to-dryquerybuilder",level:2}];function c(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"drymodelquerybuilder-type-safe",children:"DryModelQueryBuilder (Type-Safe)"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"DryModelQueryBuilder"})," is a specialized, type-safe query builder designed specifically for debugging ",(0,t.jsx)(r.strong,{children:"write operations"})," (INSERT, UPDATE, DELETE, TRUNCATE) on models without executing them. Access it via ",(0,t.jsx)(r.code,{children:"User.dryQuery()"})," or ",(0,t.jsx)(r.code,{children:"Model.dryQuery()"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Write Operations Only"}),": Specifically designed for debugging model write operations"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Type Safety"}),": Full TypeScript support with model type inference"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"No Execution"}),": Builds query statements without running them against the database"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Model Integration"}),": Supports model decorators, hooks, and relations"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Query Inspection"}),": Get the raw SQL string using ",(0,t.jsx)(r.code,{children:"toQuery()"})," or ",(0,t.jsx)(r.code,{children:"unWrap()"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Write Operation Debugging"}),": Perfect for debugging complex model write operations before execution"]}),"\n"]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Important:"})," Use DryModelQueryBuilder only for debugging ",(0,t.jsx)(r.strong,{children:"write operations"})," on models. For debugging ",(0,t.jsx)(r.strong,{children:"read queries"})," (SELECT), use the regular ModelQueryBuilder with ",(0,t.jsx)(r.code,{children:"toQuery()"})," and ",(0,t.jsx)(r.code,{children:"unWrap()"})," methods."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(r.h3,{id:"getting-the-query-string-for-write-operations",children:"Getting the Query String for Write Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import { User } from './models/user';\n\n// Build a model write operation without executing it\nconst insertQuery = User.dryQuery()\n  .insert({ name: 'John Doe', email: 'john@example.com', age: 30 });\n\n// Get the SQL string\nconst sqlString = insertQuery.toQuery();\nconsole.log(sqlString); // INSERT INTO `users` (`name`, `email`, `age`) VALUES (?, ?, ?)\n\n// Get unwrapped query (alternative method)\nconst unwrappedQuery = insertQuery.unWrap();\nconsole.log(unwrappedQuery);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"debugging-read-queries-use-regular-modelquerybuilder",children:"Debugging Read Queries (Use Regular ModelQueryBuilder)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// For debugging READ queries, use the regular ModelQueryBuilder\nconst readQuery = User.query()\n  .where('status', 'active')\n  .select('id', 'name', 'email');\n\n// Debug the read query\nconst readSqlString = readQuery.toQuery();\nconsole.log(readSqlString); // SELECT `id`, `name`, `email` FROM `users` WHERE `status` = ?\n\n// Or get the unwrapped query\nconst readUnwrappedQuery = readQuery.unWrap();\nconsole.log(readUnwrappedQuery);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"complex-model-write-operations",children:"Complex Model Write Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Build a complex write operation with joins\nconst complexUpdateQuery = Post.dryQuery()\n  .join(User, 'userId', 'id')\n  .where('posts.published', true)\n  .where('users.isActive', true)\n  .update({ status: 'archived', archivedAt: new Date() });\n\nconst sqlString = complexUpdateQuery.toQuery();\nconsole.log(sqlString);\n"})}),"\n",(0,t.jsx)(r.h2,{id:"available-methods",children:"Available Methods"}),"\n",(0,t.jsx)(r.h3,{id:"write-operations-only",children:"Write Operations Only"}),"\n",(0,t.jsx)(r.p,{children:"DryModelQueryBuilder is designed specifically for write operations. For read queries, use the regular ModelQueryBuilder:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// \u2705 CORRECT: Use DryModelQueryBuilder for write operations\nconst writeQuery = User.dryQuery()\n  .where('id', 1)\n  .update({ name: 'Updated Name', email: 'updated@example.com' });\n\nconst writeSql = writeQuery.toQuery();\nconsole.log(writeSql); // UPDATE `users` SET `name` = ?, `email` = ? WHERE `id` = ?\n\n// \u274c WRONG: Don't use DryModelQueryBuilder for read operations\n// const readQuery = User.dryQuery().select('*'); // This won't work as expected\n\n// \u2705 CORRECT: Use regular ModelQueryBuilder for read operations\nconst readQuery = User.query()\n  .select('id', 'name', 'email')\n  .where('age', '>', 18)\n  .whereIn('status', ['active', 'pending'])\n  .join('profiles', 'users.id', 'profiles.userId')\n  .groupBy('status')\n  .having('COUNT(*)', '>', 1)\n  .orderBy('createdAt', 'desc')\n  .limit(10)\n  .offset(20);\n\nconst readSql = readQuery.toQuery();\nconsole.log(readSql); // SELECT `id`, `name`, `email` FROM `users` WHERE `age` > ? AND `status` IN (?, ?) ...\n"})}),"\n",(0,t.jsx)(r.h3,{id:"insert-operations",children:"Insert Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Single insert with model data\nconst insertQuery = User.dryQuery()\n  .insert({\n    name: 'John Doe',\n    email: 'john@example.com',\n    age: 30\n  });\n\nconst insertSql = insertQuery.toQuery();\nconsole.log(insertSql); // INSERT INTO `users` (`name`, `email`, `age`) VALUES (?, ?, ?)\n\n// Multiple inserts\nconst insertManyQuery = User.dryQuery()\n  .insertMany([\n    { name: 'John Doe', email: 'john@example.com', age: 30 },\n    { name: 'Jane Smith', email: 'jane@example.com', age: 25 }\n  ]);\n\nconst insertManySql = insertManyQuery.toQuery();\n"})}),"\n",(0,t.jsx)(r.h3,{id:"update-operations",children:"Update Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"const updateQuery = User.dryQuery()\n  .where('id', 1)\n  .update({\n    name: 'Updated Name',\n    email: 'updated@example.com'\n  });\n\nconst updateSql = updateQuery.toQuery();\nconsole.log(updateSql); // UPDATE `users` SET `name` = ?, `email` = ? WHERE `id` = ?\n"})}),"\n",(0,t.jsx)(r.h3,{id:"delete-operations",children:"Delete Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Hard delete\nconst deleteQuery = User.dryQuery()\n  .where('status', 'inactive')\n  .delete();\n\nconst deleteSql = deleteQuery.toQuery();\nconsole.log(deleteSql); // DELETE FROM `users` WHERE `status` = ?\n\n// Soft delete\nconst softDeleteQuery = User.dryQuery()\n  .where('id', 1)\n  .softDelete({ column: 'deletedAt' });\n\nconst softDeleteSql = softDeleteQuery.toQuery();\nconsole.log(softDeleteSql); // UPDATE `users` SET `deletedAt` = ? WHERE `id` = ?\n"})}),"\n",(0,t.jsx)(r.h3,{id:"truncate-operations",children:"Truncate Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"const truncateQuery = User.dryQuery().truncate();\nconst truncateSql = truncateQuery.toQuery();\nconsole.log(truncateSql); // TRUNCATE TABLE `users`\n"})}),"\n",(0,t.jsx)(r.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(r.h3,{id:"model-relations-with-write-operations",children:"Model Relations with Write Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Build write operations with model relations\nconst relationUpdateQuery = Post.dryQuery()\n  .join(User, 'userId', 'id')\n  .where('posts.published', true)\n  .where('users.isActive', true)\n  .update({ status: 'archived', archivedAt: new Date() });\n\nconst relationUpdateSql = relationUpdateQuery.toQuery();\nconsole.log(relationUpdateSql);\n\n// For SELECT with relations, use regular ModelQueryBuilder\nconst relationSelectQuery = Post.query()\n  .join(User, 'userId', 'id')\n  .where('posts.published', true)\n  .select('posts.*', 'users.name as authorName');\n\nconst relationSelectSql = relationSelectQuery.toQuery();\nconsole.log(relationSelectSql);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"annotations-with-write-operations",children:"Annotations with Write Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Annotations are typically used with SELECT operations\n// For debugging SELECT with annotations, use regular ModelQueryBuilder\nconst annotationSelectQuery = User.query()\n  .annotate('COUNT(*)', 'total')\n  .annotate('AVG(age)', 'averageAge')\n  .groupBy('status');\n\nconst annotationSelectSql = annotationSelectQuery.toQuery();\nconsole.log(annotationSelectSql);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"common-table-expressions-ctes-with-write-operations",children:"Common Table Expressions (CTEs) with Write Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// CTEs with model write operations\nconst cteUpdateQuery = User.dryQuery()\n  .with('active_users', (qb) =>\n    qb.select('id').from('users').where('isActive', true)\n  )\n  .where('id', (sub) => sub.select('id').from('active_users'))\n  .update({ lastLoginAt: new Date() });\n\nconst cteUpdateSql = cteUpdateQuery.toQuery();\nconsole.log(cteUpdateSql);\n\n// For CTEs with SELECT operations, use regular ModelQueryBuilder\nconst cteSelectQuery = User.query()\n  .with('active_users', (qb) =>\n    qb.select('id', 'name').where('isActive', true)\n  )\n  .select('*')\n  .from('active_users');\n\nconst cteSelectSql = cteSelectQuery.toQuery();\nconsole.log(cteSelectSql);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"subqueries-with-write-operations",children:"Subqueries with Write Operations"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Subqueries with model write operations\nconst subqueryDeleteQuery = Post.dryQuery()\n  .where('userId', (sub) =>\n    sub.select('id').from('users').where('isActive', false)\n  )\n  .delete();\n\nconst subqueryDeleteSql = subqueryDeleteQuery.toQuery();\nconsole.log(subqueryDeleteSql);\n\n// For subqueries with SELECT operations, use regular ModelQueryBuilder\nconst subquerySelectQuery = Post.query()\n  .where('userId', (sub) =>\n    sub.select('id').from('users').where('isActive', true)\n  );\n\nconst subquerySelectSql = subquerySelectQuery.toQuery();\nconsole.log(subquerySelectSql);\n"})}),"\n",(0,t.jsx)(r.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsx)(r.h3,{id:"1-write-operation-debugging",children:"1. Write Operation Debugging"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Debug complex model write operations before execution\nconst debugUpdateQuery = Order.dryQuery()\n  .join(User, 'userId', 'id')\n  .where('orders.status', 'pending')\n  .where('users.isActive', true)\n  .update({ status: 'processed', processedAt: new Date() });\n\nconsole.log('Generated SQL:', debugUpdateQuery.toQuery());\nconsole.log('Bindings:', debugUpdateQuery.unWrap().bindings);\n\n// For debugging READ queries, use regular ModelQueryBuilder\nconst debugReadQuery = Order.query()\n  .join(User, 'userId', 'id')\n  .join(Product, 'productId', 'id')\n  .where('orders.status', 'pending')\n  .where('users.isActive', true)\n  .select('orders.*', 'users.name', 'products.title');\n\nconsole.log('Read SQL:', debugReadQuery.toQuery());\n"})}),"\n",(0,t.jsx)(r.h3,{id:"2-migration-scripts",children:"2. Migration Scripts"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Build write queries for data migration with model structure\nconst migrationInsertQuery = User.dryQuery()\n  .insert({ name: 'Migrated User', email: 'migrated@example.com' });\n\nconst migrationUpdateQuery = User.dryQuery()\n  .where('migrated', false)\n  .update({ migrated: true, migratedAt: new Date() });\n\nconsole.log('Insert SQL:', migrationInsertQuery.toQuery());\nconsole.log('Update SQL:', migrationUpdateQuery.toQuery());\n\n// For reading data during migration, use regular ModelQueryBuilder\nconst migrationReadQuery = User.query()\n  .select('id', 'name', 'email', 'createdAt')\n  .where('migrated', false);\n\nconsole.log('Read SQL:', migrationReadQuery.toQuery());\n"})}),"\n",(0,t.jsx)(r.h3,{id:"3-write-operation-analysis",children:"3. Write Operation Analysis"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Analyze write operation structure without execution\nconst analysisUpdateQuery = Product.dryQuery()\n  .where('category', 'electronics')\n  .where('price', '>', 100)\n  .update({ discount: 0.1, updatedAt: new Date() });\n\nconst queryInfo = analysisUpdateQuery.unWrap();\nconsole.log('Update Query:', queryInfo.sql);\nconsole.log('Bindings:', queryInfo.bindings);\nconsole.log('Table:', queryInfo.table);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"4-dynamic-write-query-building",children:"4. Dynamic Write Query Building"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"function buildUserUpdateQuery(filters: Record<string, any>, updateData: Record<string, any>) {\n  let query = User.dryQuery();\n\n  if (filters.status) {\n    query = query.where('status', filters.status);\n  }\n\n  if (filters.minAge) {\n    query = query.where('age', '>=', filters.minAge);\n  }\n\n  if (filters.maxAge) {\n    query = query.where('age', '<=', filters.maxAge);\n  }\n\n  return query.update(updateData);\n}\n\nconst updateQuery = buildUserUpdateQuery(\n  { status: 'active', minAge: 18 },\n  { lastLoginAt: new Date(), loginCount: 1 }\n);\nconsole.log('Update SQL:', updateQuery.toQuery());\n\n// For dynamic READ queries, use regular ModelQueryBuilder\nfunction buildUserSearchQuery(filters: Record<string, any>) {\n  let query = User.query();\n\n  if (filters.status) {\n    query = query.where('status', filters.status);\n  }\n\n  if (filters.minAge) {\n    query = query.where('age', '>=', filters.minAge);\n  }\n\n  if (filters.maxAge) {\n    query = query.where('age', '<=', filters.maxAge);\n  }\n\n  return query.select('*').orderBy('name');\n}\n\nconst searchQuery = buildUserSearchQuery({ status: 'active', minAge: 18 });\nconsole.log('Search SQL:', searchQuery.toQuery());\n"})}),"\n",(0,t.jsx)(r.h3,{id:"5-hook-testing",children:"5. Hook Testing"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Test model hooks without database execution\nconst hookTestQuery = User.dryQuery()\n  .where('id', 1)\n  .update({ name: 'New Name' });\n\n// This will trigger beforeUpdate hook but not execute the query\nconst hookTestSql = hookTestQuery.toQuery();\nconsole.log('Hook test SQL:', hookTestSql);\n"})}),"\n",(0,t.jsx)(r.h2,{id:"model-specific-features",children:"Model-Specific Features"}),"\n",(0,t.jsx)(r.h3,{id:"type-safety",children:"Type Safety"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Full type safety with model properties\nconst typedQuery = User.dryQuery()\n  .select('id', 'name', 'email') // Only model properties allowed\n  .where('age', '>', 18) // Type-safe where conditions\n  .orderBy('createdAt', 'desc'); // Type-safe ordering\n\nconst typedSql = typedQuery.toQuery();\n"})}),"\n",(0,t.jsx)(r.h3,{id:"model-hooks",children:"Model Hooks"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Model hooks are triggered even in dry mode\nconst hookQuery = User.dryQuery()\n  .where('id', 1)\n  .update({ name: 'Updated Name' });\n\n// beforeUpdate hook will be called\nconst hookSql = hookQuery.toQuery();\n"})}),"\n",(0,t.jsx)(r.h3,{id:"decorator-support",children:"Decorator Support"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Model decorators are respected\nconst decoratorQuery = User.dryQuery()\n  .where('isActive', true)\n  .select('id', 'name', 'email');\n\nconst decoratorSql = decoratorQuery.toQuery();\n"})}),"\n",(0,t.jsx)(r.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(r.h3,{id:"core-methods",children:"Core Methods"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"toQuery()"})," - Returns the SQL string with bindings"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"unWrap()"})," - Returns the complete query object with SQL and bindings"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"clone()"})," - Creates a copy of the query builder"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"query-building-methods",children:"Query Building Methods"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Note"}),": These methods are available for building WHERE clauses and conditions for write operations:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Filtering"}),": ",(0,t.jsx)(r.code,{children:"where"}),", ",(0,t.jsx)(r.code,{children:"orWhere"}),", ",(0,t.jsx)(r.code,{children:"andWhere"}),", ",(0,t.jsx)(r.code,{children:"whereIn"}),", ",(0,t.jsx)(r.code,{children:"whereNull"}),", ",(0,t.jsx)(r.code,{children:"whereBetween"}),", ",(0,t.jsx)(r.code,{children:"whereLike"}),", ",(0,t.jsx)(r.code,{children:"whereExists"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Joins"}),": ",(0,t.jsx)(r.code,{children:"join"}),", ",(0,t.jsx)(r.code,{children:"leftJoin"}),", ",(0,t.jsx)(r.code,{children:"rightJoin"}),", ",(0,t.jsx)(r.code,{children:"innerJoin"})," (for complex write operations)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Grouping"}),": ",(0,t.jsx)(r.code,{children:"groupBy"}),", ",(0,t.jsx)(r.code,{children:"having"})," (for grouped updates/deletes)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Ordering"}),": ",(0,t.jsx)(r.code,{children:"orderBy"}),", ",(0,t.jsx)(r.code,{children:"orderByRaw"})," (for ordered updates/deletes)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Limiting"}),": ",(0,t.jsx)(r.code,{children:"limit"}),", ",(0,t.jsx)(r.code,{children:"offset"})," (for limited updates/deletes)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"CTEs"}),": ",(0,t.jsx)(r.code,{children:"with"}),", ",(0,t.jsx)(r.code,{children:"withRecursive"}),", ",(0,t.jsx)(r.code,{children:"withMaterialized"})," (for complex write operations)"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Not Available"}),": ",(0,t.jsx)(r.code,{children:"select"}),", ",(0,t.jsx)(r.code,{children:"selectRaw"}),", ",(0,t.jsx)(r.code,{children:"clearSelect"}),", ",(0,t.jsx)(r.code,{children:"load"}),", ",(0,t.jsx)(r.code,{children:"clearRelations"}),", ",(0,t.jsx)(r.code,{children:"havingRelated"}),", ",(0,t.jsx)(r.code,{children:"notHavingRelated"}),", ",(0,t.jsx)(r.code,{children:"union"}),", ",(0,t.jsx)(r.code,{children:"unionAll"}),", ",(0,t.jsx)(r.code,{children:"annotate"}),", ",(0,t.jsx)(r.code,{children:"removeAnnotations"}),", ",(0,t.jsx)(r.code,{children:"clearRemoveAnnotations"})," (these are for read operations)"]}),"\n",(0,t.jsx)(r.h3,{id:"modification-methods",children:"Modification Methods"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Insert"}),": ",(0,t.jsx)(r.code,{children:"insert"}),", ",(0,t.jsx)(r.code,{children:"insertMany"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Update"}),": ",(0,t.jsx)(r.code,{children:"update"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Delete"}),": ",(0,t.jsx)(r.code,{children:"delete"}),", ",(0,t.jsx)(r.code,{children:"softDelete"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Truncate"}),": ",(0,t.jsx)(r.code,{children:"truncate"})]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"limitations",children:"Limitations"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"No Execution"}),": Queries are never executed against the database"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"No Results"}),": Cannot retrieve actual data"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"No Database Validation"}),": Database-level constraints are not validated"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Hook Limitations"}),": Some hooks may not behave exactly as in execution mode"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"comparison-to-regular-modelquerybuilder",children:"Comparison to Regular ModelQueryBuilder"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Feature"}),(0,t.jsx)(r.th,{children:"DryModelQueryBuilder"}),(0,t.jsx)(r.th,{children:"ModelQueryBuilder"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Execution"})}),(0,t.jsx)(r.td,{children:"No"}),(0,t.jsx)(r.td,{children:"Yes"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Results"})}),(0,t.jsx)(r.td,{children:"None"}),(0,t.jsx)(r.td,{children:"Model instances"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Type Safety"})}),(0,t.jsx)(r.td,{children:"Full"}),(0,t.jsx)(r.td,{children:"Full"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Hooks"})}),(0,t.jsx)(r.td,{children:"Triggered"}),(0,t.jsx)(r.td,{children:"Triggered"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Use Case"})}),(0,t.jsx)(r.td,{children:"Debugging, Analysis"}),(0,t.jsx)(r.td,{children:"Data retrieval"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Performance"})}),(0,t.jsx)(r.td,{children:"No DB overhead"}),(0,t.jsx)(r.td,{children:"Full DB interaction"})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"comparison-to-dryquerybuilder",children:"Comparison to DryQueryBuilder"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Feature"}),(0,t.jsx)(r.th,{children:"DryModelQueryBuilder"}),(0,t.jsx)(r.th,{children:"DryQueryBuilder"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Type Safety"})}),(0,t.jsx)(r.td,{children:"Full model typing"}),(0,t.jsx)(r.td,{children:"No typing"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Model Support"})}),(0,t.jsx)(r.td,{children:"Full model features"}),(0,t.jsx)(r.td,{children:"Basic SQL only"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Relations"})}),(0,t.jsx)(r.td,{children:"Supported"}),(0,t.jsx)(r.td,{children:"Not supported"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Hooks"})}),(0,t.jsx)(r.td,{children:"Model hooks triggered"}),(0,t.jsx)(r.td,{children:"No hooks"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"Use Case"})}),(0,t.jsx)(r.td,{children:"Model debugging"}),(0,t.jsx)(r.td,{children:"Raw SQL debugging"})]})]})]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsxs)(r.p,{children:["Next: ",(0,t.jsx)(r.a,{href:"/hysteria-orm/docs/databases/sql/relations/overview",children:"Relations"})]})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var s=n(6540);const t={},i=s.createContext(t);function o(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);