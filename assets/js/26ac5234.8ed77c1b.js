"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[5223],{18:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"databases/openapi","title":"OpenAPI Generation (Experimental)","description":"OpenAPI generation is currently an experimental feature and may undergo breaking changes in future releases. Use with caution in production environments.","source":"@site/docs/databases/openapi.md","sourceDirName":"databases","slug":"/databases/openapi","permalink":"/hysteria-orm/docs/databases/openapi","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/openapi.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"OpenAPI Generation (Experimental)","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Redis Introduction","permalink":"/hysteria-orm/docs/databases/nosql/redis/introduction"}}');var t=i(4848),r=i(8453);const a={title:"OpenAPI Generation (Experimental)",sidebar_position:1},o="OpenAPI Generation",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Generating Schema for a Single Model",id:"generating-schema-for-a-single-model",level:3},{value:"Generating Schemas for Multiple Models",id:"generating-schemas-for-multiple-models",level:3},{value:"Generating Schemas with Model Names",id:"generating-schemas-with-model-names",level:3},{value:"Type Detection",id:"type-detection",level:2},{value:"Date/Time Fields",id:"datetime-fields",level:3},{value:"Boolean Fields",id:"boolean-fields",level:3},{value:"Numeric Fields",id:"numeric-fields",level:3},{value:"JSON Fields",id:"json-fields",level:3},{value:"UUID Fields",id:"uuid-fields",level:3},{value:"ULID Fields",id:"ulid-fields",level:3},{value:"OpenAPI Metadata",id:"openapi-metadata",level:2},{value:"Example Output",id:"example-output",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"openapi-generation",children:"OpenAPI Generation"})}),"\n",(0,t.jsx)(n.admonition,{title:"Experimental Feature",type:"warning",children:(0,t.jsxs)(n.p,{children:["OpenAPI generation is currently an ",(0,t.jsx)(n.strong,{children:"experimental feature"})," and may undergo breaking changes in future releases. Use with caution in production environments."]})}),"\n",(0,t.jsx)(n.p,{children:"Hysteria ORM provides experimental support for automatically generating OpenAPI schemas from your model definitions. This feature allows you to create API documentation and client SDKs directly from your database models."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The OpenAPI generation feature analyzes your model decorators, TypeScript types, and serialization functions to automatically generate OpenAPI 3.0 compatible schemas. This includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Property types"})," based on column decorators and serialization functions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Required fields"})," detection from primary keys and non-optional properties"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Format specifications"})," for dates, UUIDs, and other special types"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Property descriptions"})," from OpenAPI metadata"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.h3,{id:"generating-schema-for-a-single-model",children:"Generating Schema for a Single Model"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { generateOpenApiModelSchema } from 'hysteria-orm';\nimport { User } from './models/User';\n\nconst userSchema = generateOpenApiModelSchema(User);\nconsole.log(JSON.stringify(userSchema, null, 2));\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generating-schemas-for-multiple-models",children:"Generating Schemas for Multiple Models"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { generateOpenApiModel } from 'hysteria-orm';\nimport { User, Post, Comment } from './models';\n\nconst schemas = generateOpenApiModel([User, Post, Comment]);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"generating-schemas-with-model-names",children:"Generating Schemas with Model Names"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { generateOpenApiModelWithMetadata, sql } from 'hysteria-orm';\nimport { User, Post } from './models';\n\nconst schemasWithNames = generateOpenApiModelWithMetadata([User, Post]);\n// Returns array with { modelName: string, ...schema }\n\n// From sql data source\nconst sql = await sql.connect({\n  models: {\n    user: User,\n    post: Post,\n  },\n});\n\nconst schemasWithNames = sql.getModelOpenApiSchema();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"type-detection",children:"Type Detection"}),"\n",(0,t.jsx)(n.p,{children:"The OpenAPI generator automatically detects types based on your model configuration:"}),"\n",(0,t.jsx)(n.h3,{id:"datetime-fields",children:"Date/Time Fields"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@column.date()\ncreatedAt: Date;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Generates: ",(0,t.jsx)(n.code,{children:'{ type: "string", format: "date-time" }'})]}),"\n",(0,t.jsx)(n.h3,{id:"boolean-fields",children:"Boolean Fields"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@column.boolean()\nisActive: boolean;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Generates: ",(0,t.jsx)(n.code,{children:'{ type: "boolean" }'})]}),"\n",(0,t.jsx)(n.h3,{id:"numeric-fields",children:"Numeric Fields"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@column.integer()\nage: number;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Generates: ",(0,t.jsx)(n.code,{children:'{ type: "number" }'})]}),"\n",(0,t.jsx)(n.h3,{id:"json-fields",children:"JSON Fields"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@column.json()\nmetadata: object;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Generates: ",(0,t.jsx)(n.code,{children:'{ type: "object" }'})]}),"\n",(0,t.jsx)(n.h3,{id:"uuid-fields",children:"UUID Fields"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@column.uuid()\nid: string;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Generates: ",(0,t.jsx)(n.code,{children:'{ type: "string", format: "uuid" }'})]}),"\n",(0,t.jsx)(n.h3,{id:"ulid-fields",children:"ULID Fields"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@column.ulid()\nid: string;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Generates: ",(0,t.jsx)(n.code,{children:'{ type: "string", format: "ulid" }'})]}),"\n",(0,t.jsx)(n.h2,{id:"openapi-metadata",children:"OpenAPI Metadata"}),"\n",(0,t.jsx)(n.p,{children:"You can provide additional OpenAPI metadata in your column decorators:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'@column({\n  openApi: {\n    type: "string",\n    description: "User\'s email address",\n    required: true,\n  },\n})\nemail: string;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"example-output",children:"Example Output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "id": {\n      "type": "string",\n      "description": "Property: id"\n    },\n    "email": {\n      "type": "string",\n      "description": "User\'s email address"\n    },\n    "age": {\n      "type": "number",\n      "description": "Property: age"\n    },\n    "isActive": {\n      "type": "boolean",\n      "description": "Property: isActive"\n    },\n    "createdAt": {\n      "type": "string",\n      "format": "date-time",\n      "description": "Property: createdAt"\n    }\n  },\n  "required": ["id", "email", "age"]\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);