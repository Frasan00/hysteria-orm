"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[7538],{2479:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"databases/sql/relations/overview","title":"Relations Overview","description":"Hysteria ORM supports rich relation types between models:","source":"@site/docs/databases/sql/relations/overview.md","sourceDirName":"databases/sql/relations","slug":"/databases/sql/relations/overview","permalink":"/hysteria-orm/docs/databases/sql/relations/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/relations/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Relations Overview","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Create Migration Command","permalink":"/hysteria-orm/docs/databases/sql/cli/create-migration"},"next":{"title":"Advanced SQL Features: CTE","permalink":"/hysteria-orm/docs/databases/sql/advanced/cte"}}');var i=n(4848),t=n(8453);const a={title:"Relations Overview",sidebar_position:1},l="Relations Overview",o={},d=[{value:"Example Models",id:"example-models",level:2},{value:"Querying Relations",id:"querying-relations",level:2},{value:"Eager Loading",id:"eager-loading",level:3},{value:"Nested Relations",id:"nested-relations",level:3},{value:"Filtering on Relations",id:"filtering-on-relations",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"relations-overview",children:"Relations Overview"})}),"\n",(0,i.jsx)(s.p,{children:"Hysteria ORM supports rich relation types between models:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"belongsTo"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"hasOne"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"hasMany"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.code,{children:"manyToMany"})}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Relations are retrieved using batch loading, so one query is made for each relation only if ",(0,i.jsx)(s.code,{children:"withRelation"})," is called.\nBe carefull, too many relation retrieve could slow down you overall query"]}),"\n",(0,i.jsx)(s.h2,{id:"example-models",children:"Example Models"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"class User extends Model {\n  @hasMany(() => Post, 'userId')\n  declare posts: Post[];\n\n  @manyToMany(() => Address, () => UserAddress, {\n    leftForeignKey: 'userId',\n    rightForeignKey: 'addressId',\n  })\n  declare addresses: Address[];\n}\n\nclass Post extends Model {\n  @belongsTo(() => User, 'userId')\n  declare user: User;\n}\n\nclass Address extends Model {\n  @manyToMany(() => User, () => UserAddress, {\n    leftForeignKey: 'addressId',\n    rightForeignKey: 'userId',\n  })\n  declare users: User[];\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"querying-relations",children:"Querying Relations"}),"\n",(0,i.jsx)(s.h3,{id:"eager-loading",children:"Eager Loading"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const users = await User.query().withRelation('posts').many();\n"})}),"\n",(0,i.jsx)(s.h3,{id:"nested-relations",children:"Nested Relations"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const users = await User.query().withRelation('posts', Post, (qb) =>\n  qb.withRelation('user')\n).many();\n"})}),"\n",(0,i.jsx)(s.h3,{id:"filtering-on-relations",children:"Filtering on Relations"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"const users = await User.query().withRelation('posts', Post, (qb) =>\n  qb.where('title', 'Hello World')\n).many();\n"})}),"\n",(0,i.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Use ",(0,i.jsx)(s.code,{children:"withRelation"})," for batch relation loading."]}),"\n",(0,i.jsx)(s.li,{children:"Use callbacks for nested and filtered relations."}),"\n",(0,i.jsx)(s.li,{children:"Always define foreign keys explicitly for clarity."}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.p,{children:["Next: ",(0,i.jsx)(s.a,{href:"/hysteria-orm/docs/databases/sql/advanced/cte",children:"Advanced SQL Features"})]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var r=n(6540);const i={},t=r.createContext(i);function a(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);