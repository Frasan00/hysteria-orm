"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[3122],{1146:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"databases/sql/query-builder/model-query-builder","title":"ModelQueryBuilder (Type-Safe)","description":"The ModelQueryBuilder is the primary, partially type-safe query API for Hysteria ORM models. All calls to User.query(), Post.query(), etc., return a ModelQueryBuilder instance.","source":"@site/docs/databases/sql/query-builder/model-query-builder.md","sourceDirName":"databases/sql/query-builder","slug":"/databases/sql/query-builder/model-query-builder","permalink":"/hysteria-orm/docs/databases/sql/query-builder/model-query-builder","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/query-builder/model-query-builder.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"ModelQueryBuilder (Type-Safe)","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Query Builder Basics","permalink":"/hysteria-orm/docs/databases/sql/query-builder/basics"},"next":{"title":"QueryBuilder (Raw SQL)","permalink":"/hysteria-orm/docs/databases/sql/query-builder/"}}');var r=s(4848),i=s(8453);const t={title:"ModelQueryBuilder (Type-Safe)",sidebar_position:1},a="ModelQueryBuilder (Type-Safe)",o={},d=[{value:"Key Features",id:"key-features",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Raw right-hand side with rawStatement",id:"raw-right-hand-side-with-rawstatement",level:3},{value:"Selecting Columns",id:"selecting-columns",level:2},{value:"Annotations",id:"annotations",level:2},{value:"Annotate rules and edge cases",id:"annotate-rules-and-edge-cases",level:3},{value:"Pagination",id:"pagination",level:2},{value:"Joins",id:"joins",level:2},{value:"CTEs (Common Table Expressions)",id:"ctes-common-table-expressions",level:2},{value:"Pluck",id:"pluck",level:2},{value:"Increment / Decrement",id:"increment--decrement",level:2},{value:"Locking",id:"locking",level:2},{value:"clearSelect",id:"clearselect",level:2},{value:"Soft Delete",id:"soft-delete",level:2},{value:"Type Safety Example",id:"type-safety-example",level:2},{value:"Comparison to QueryBuilder",id:"comparison-to-querybuilder",level:2},{value:"Selected API Highlights",id:"selected-api-highlights",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"modelquerybuilder-type-safe",children:"ModelQueryBuilder (Type-Safe)"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ModelQueryBuilder"})," is the primary, partially type-safe query API for Hysteria ORM models. All calls to ",(0,r.jsx)(n.code,{children:"User.query()"}),", ",(0,r.jsx)(n.code,{children:"Post.query()"}),", etc., return a ModelQueryBuilder instance.\nThe query builder is partially type safe, triggering intellisense for developer experience but still allowing the developer to write whatever he wants.\nThe ModelQueryBuilder by default returns a ",(0,r.jsx)(n.code,{children:"ModelWithoutRelations<T>"})," type, which is a type that does not have any relations. You can add Relations or Annotations using the ",(0,r.jsx)(n.code,{children:"load"})," and ",(0,r.jsx)(n.code,{children:"annotate"})," methods."]}),"\n",(0,r.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fully partially type-safe queries and results"}),"\n",(0,r.jsx)(n.li,{children:"Decorator and relation support"}),"\n",(0,r.jsx)(n.li,{children:"Rich API for filtering, selecting, joining, and more"}),"\n",(0,r.jsx)(n.li,{children:"Supports advanced features like CTEs, annotations, pagination, and soft deletes"}),"\n",(0,r.jsxs)(n.li,{children:["Model columns are parsed to database columns based on the case convention of the model, this applies both on column names like ",(0,r.jsx)(n.code,{children:"isActive"})," and on table.column scenarios like ",(0,r.jsx)(n.code,{children:"users.isActive"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query().where('status', 'active').many();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Here if model has snake case convention, the columns will be parsed to snake case\nconst users = await User.query().where('age', '>', 18).andWhere('isActive', true).andWhere('users.isActive', true).many();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"raw-right-hand-side-with-rawstatement",children:"Raw right-hand side with rawStatement"}),"\n",(0,r.jsxs)(n.p,{children:["When you need to compare a column to another column or an expression without creating a binding, use ",(0,r.jsx)(n.code,{children:"sql.rawStatement"}),". Identifiers inside the raw string are automatically quoted per database dialect."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { sql } from 'hysteria-orm';\n\nawait User.query()\n  .where('id', sql.rawStatement('user.id'))\n  .many();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"selecting-columns",children:"Selecting Columns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In ",(0,r.jsx)(n.code,{children:"ModelQueryBuilder"}),", ",(0,r.jsx)(n.code,{children:"select"}),' now only accepts model keys or "*". Non-model or computed columns must be added using ',(0,r.jsx)(n.code,{children:"annotate"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"select"})," can be stacked; the resulting TypeScript type reflects only the selected model columns. If no ",(0,r.jsx)(n.code,{children:"select"})," is used, the full model type (without relations) is returned as before."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// OK: model columns\nconst user = await User.query().select('id', 'name').first();\n\n// OK: all model columns\nconst userAll = await User.query().select('*').first();\n\n// For non-model columns use annotate (see below)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"annotations",children:"Annotations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const user = await User.query()\n  .annotate('count', '*', 'count') // count(*) as count\n  .first();\nconsole.log(user.$annotations.count);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"annotate-rules-and-edge-cases",children:"Annotate rules and edge cases"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"annotate"})," to project non-model columns or SQL functions. Annotated values are exposed under ",(0,r.jsx)(n.code,{children:"$annotations"})," on model results."]}),"\n",(0,r.jsxs)(n.li,{children:["When the builder has no explicit ",(0,r.jsx)(n.code,{children:"select"})," (default ",(0,r.jsx)(n.code,{children:"select *"}),"), using ",(0,r.jsx)(n.code,{children:"annotate"})," alone will not mix annotation fields into the model shape. Hysteria will keep model fields empty and only include ",(0,r.jsx)(n.code,{children:"$annotations"})," for that query response; add ",(0,r.jsx)(n.code,{children:"select('*')"})," if you also want model columns."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Only annotation, no explicit select \u2192 model fields omitted, only $annotations present\nconst r1 = await User.query().annotate('count', '*', 'total').first(); // { $annotations: { total: number } }\nconsole.log(r1.$annotations.total);\n\n// Include full model by selecting '*'\nconst r2 = await User.query().select('*').annotate('count', '*', 'total').first();\nconsole.log(r2.id, r2.$annotations.total);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const page = await User.query().paginate(1, 10);\nconsole.log(page.data, page.paginationMetadata);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"joins",children:"Joins"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Joins do not use the joined table hooks, only the caller model hooks are used"}),"\n",(0,r.jsx)(n.li,{children:"Joined model columns are cased based on the case convention of the model"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const postsWithUsers = await Post.query()\n  .select('posts.*', 'users.name')\n  .join('users', 'posts.userId', 'users.id')\n  .many();\n\nconst postsWithUsersFromModel = await Post.query()\n  .select('posts.*', 'users.name')\n  .join(User, 'userId', 'id')\n  .many();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"ctes-common-table-expressions",children:"CTEs (Common Table Expressions)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query()\n  .with('users_cte', (qb) => qb.select('name').where('isActive', true))\n  .many();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"pluck",children:"Pluck"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const names = await User.query().pluck('name'); // string[]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"increment--decrement",children:"Increment / Decrement"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await User.query().increment('age', 1);\nawait User.query().decrement('age', 1);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"locking",children:"Locking"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query().lockForUpdate().many();\nconst users = await User.query().forShare().many();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"clearselect",children:"clearSelect"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const users = await User.query().select('name').clearSelect().many();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"soft-delete",children:"Soft Delete"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"await User.query().softDelete({ column: 'deleted_at' });\n"})}),"\n",(0,r.jsx)(n.h2,{id:"type-safety-example",children:"Type Safety Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// users: ModelWithoutRelations<User>\nconst users = await User.query().where('email', 'like', '%@example.com').many();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"comparison-to-querybuilder",children:"Comparison to QueryBuilder"}),"\n",(0,r.jsxs)(n.p,{children:["For raw SQL reference (filtering, joins, pagination, streaming, chunking), see: ",(0,r.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/query-builder/",children:"QueryBuilder (Raw SQL)"})]}),"\n",(0,r.jsx)(n.h2,{id:"selected-api-highlights",children:"Selected API Highlights"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Filtering: ",(0,r.jsx)(n.code,{children:"where"}),", ",(0,r.jsx)(n.code,{children:"orWhere"}),", ",(0,r.jsx)(n.code,{children:"andWhere"}),", ",(0,r.jsx)(n.code,{children:"whereIn"}),", ",(0,r.jsx)(n.code,{children:"whereNull"}),", ",(0,r.jsx)(n.code,{children:"whereBetween"}),", ",(0,r.jsx)(n.code,{children:"whereLike"}),", ",(0,r.jsx)(n.code,{children:"whereExists"})]}),"\n",(0,r.jsxs)(n.li,{children:["Joins: ",(0,r.jsx)(n.code,{children:"join"}),", ",(0,r.jsx)(n.code,{children:"leftJoin"}),", ",(0,r.jsx)(n.code,{children:"rightJoin"}),", ",(0,r.jsx)(n.code,{children:"innerJoin"})]}),"\n",(0,r.jsxs)(n.li,{children:["Aggregates: ",(0,r.jsx)(n.code,{children:"getCount"}),", ",(0,r.jsx)(n.code,{children:"getMax"}),", ",(0,r.jsx)(n.code,{children:"getMin"}),", ",(0,r.jsx)(n.code,{children:"getAvg"}),", ",(0,r.jsx)(n.code,{children:"getSum"})]}),"\n",(0,r.jsxs)(n.li,{children:["Pagination: ",(0,r.jsx)(n.code,{children:"paginate"}),", ",(0,r.jsx)(n.code,{children:"paginateWithCursor"}),", ",(0,r.jsx)(n.code,{children:"limit"}),", ",(0,r.jsx)(n.code,{children:"offset"}),", ",(0,r.jsx)(n.code,{children:"chunk"})]}),"\n",(0,r.jsxs)(n.li,{children:["Annotations: ",(0,r.jsx)(n.code,{children:"annotate"}),", ",(0,r.jsx)(n.code,{children:"removeAnnotations"}),", ",(0,r.jsx)(n.code,{children:"clearRemoveAnnotations"})]}),"\n",(0,r.jsxs)(n.li,{children:["Relations: ",(0,r.jsx)(n.code,{children:"load"}),", ",(0,r.jsx)(n.code,{children:"clearRelations"}),", ",(0,r.jsx)(n.code,{children:"havingRelated"}),", ",(0,r.jsx)(n.code,{children:"notHavingRelated"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Refer to the tests under ",(0,r.jsx)(n.code,{children:"test/sql"})," for comprehensive examples aligned with the implementation."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["Next: ",(0,r.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/query-builder/",children:"QueryBuilder (Raw SQL)"})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var l=s(6540);const r={},i=l.createContext(r);function t(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);