"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[1623],{8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},8653:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"databases/sql/cli/migrations/experimental-generate-migrations","title":"Experimental \u2014 Generate migrations from models","description":"Inspect DB schema and models, generate a migration with SQL statements to reconcile differences.","source":"@site/docs/databases/sql/cli/migrations/experimental-generate-migrations.md","sourceDirName":"databases/sql/cli/migrations","slug":"/databases/sql/cli/migrations/experimental-generate-migrations","permalink":"/hysteria-orm/docs/databases/sql/cli/migrations/experimental-generate-migrations","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/cli/migrations/experimental-generate-migrations.md","tags":[],"version":"current","frontMatter":{"id":"experimental-generate-migrations","title":"Experimental \u2014 Generate migrations from models","sidebar_label":"Generate (experimental)","description":"Inspect DB schema and models, generate a migration with SQL statements to reconcile differences."},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Migration Patterns","permalink":"/hysteria-orm/docs/databases/sql/cli/migrations/advanced"},"next":{"title":"Run SQL Command","permalink":"/hysteria-orm/docs/databases/sql/cli/run-sql"}}');var i=n(4848),s=n(8453);const r={id:"experimental-generate-migrations",title:"Experimental \u2014 Generate migrations from models",sidebar_label:"Generate (experimental)",description:"Inspect DB schema and models, generate a migration with SQL statements to reconcile differences."},o=void 0,d={},l=[{value:"Usage",id:"usage",level:2},{value:"Options",id:"options",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Caveats",id:"caveats",level:2},{value:"Using @column for Schema Metadata",id:"using-column-for-schema-metadata",level:2}];function c(e){const t={blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Warning: This feature is experimental. Review and test generated SQL before using in production.\nWarning: This feature is not supported for sqlite."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"generate:migrations"})," command inspects your live database schema and your registered models, computes a diff, and writes a migration file containing SQL statements to reconcile them."]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npx hysteria generate:migrations \\\n  --datasource ./database/index.ts \\\n  --tsconfig ./tsconfig.json \\\n  --migration-path ./database/migrations \\\n  --name add_user_fields \\\n  --dry\n"})}),"\n",(0,i.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-d, --datasource [path]"})," \u2014 Path to a file exporting a default ",(0,i.jsx)(t.code,{children:"SqlDataSource"})," instance. Required."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-c, --tsconfig [tsconfigPath]"})," \u2014 Path to tsconfig.json to load TypeScript files. Defaults to ",(0,i.jsx)(t.code,{children:"./tsconfig.json"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-m, --migration-path [path]"})," \u2014 Output directory for migration files. Defaults to ",(0,i.jsx)(t.code,{children:"./database/migrations"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-n, --name [name]"})," \u2014 Base name for the migration. A millisecond timestamp is prefixed automatically."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-j, --javascript"})," \u2014 Generate a JavaScript migration file instead of TypeScript."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"-f, --dry"})," \u2014 Does not create a migration file but only outputs sql statements."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"behavior",children:"Behavior"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If no differences are detected, the command logs: ",(0,i.jsx)(t.code,{children:"No new changes detected between database schema and models metadata"})," and exits with code 0."]}),"\n",(0,i.jsxs)(t.li,{children:["On differences, a file named like ",(0,i.jsx)(t.code,{children:"<timestamp>(_auto_generated_migration|{name}).(ts|js)"})," is created with ",(0,i.jsx)(t.code,{children:"this.schema.rawQuery(...)"})," statements for the detected changes."]}),"\n",(0,i.jsx)(t.li,{children:"The output directory is created if it does not exist."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"caveats",children:"Caveats"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Always review generated SQL. Some databases/drivers normalize types (e.g., floating precision, text families), which may affect diffs."}),"\n",(0,i.jsx)(t.li,{children:"Run the generated migration in a safe environment first. Back up your database and test rollbacks as needed."}),"\n",(0,i.jsxs)(t.li,{children:["Ensure the ",(0,i.jsx)(t.code,{children:"SqlDataSource"})," passed via ",(0,i.jsx)(t.code,{children:"--datasource"})," is fully configured for the target environment and registers your models."]}),"\n",(0,i.jsx)(t.li,{children:"SQLite has some limitations due to its limited alter table capabilities and it's not recommended to use this feature with sqlite"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"using-column-for-schema-metadata",children:"Using @column for Schema Metadata"}),"\n",(0,i.jsxs)(t.p,{children:["To make your model's intended database schema explicit and help the migration generator produce accurate diffs, use the ",(0,i.jsx)(t.code,{children:"@column"})," decorator on your model properties. This decorator lets you specify database metadata such as ",(0,i.jsx)(t.code,{children:"default"})," values and ",(0,i.jsx)(t.code,{children:"nullable"})," status directly on your model fields."]}),"\n",(0,i.jsxs)(t.p,{children:["!! Columns without the ",(0,i.jsx)(t.code,{children:"type"})," option will be ignored for auto-generated migrations !!"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Example:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:'@column({ type: "varchar", default: "active", nullable: false })\ndeclare status: string;\n\n@column({ type: "text", nullable: true })\ndeclare description: string | null;\n'})}),"\n",(0,i.jsx)(t.p,{children:"This metadata is used by the migration generator to compare your model definitions with the live database schema and generate the correct SQL statements for changes."})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);