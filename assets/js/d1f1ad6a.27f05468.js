"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[1737],{2924:(a,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"databases/sql/advanced/transactions","title":"Advanced SQL Features: Transactions","description":"Hysteria ORM provides robust transaction support for SQL databases, allowing you to group multiple operations into a single atomic unit. Transactions ensure data consistency and integrity, supporting features like rollback, isolation levels, nested, concurrent, and global transactions.","source":"@site/docs/databases/sql/advanced/transactions.md","sourceDirName":"databases/sql/advanced","slug":"/databases/sql/advanced/transactions","permalink":"/hysteria-orm/docs/databases/sql/advanced/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/advanced/transactions.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Advanced SQL Features: Transactions","sidebar_position":4}}');var e=t(4848),r=t(8453);const o={title:"Advanced SQL Features: Transactions",sidebar_position:4},i="Transactions",c={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Custom Isolation Level",id:"custom-isolation-level",level:2},{value:"Manual Transaction Control",id:"manual-transaction-control",level:2},{value:"Nested Transactions",id:"nested-transactions",level:2},{value:"Concurrent Transactions",id:"concurrent-transactions",level:2},{value:"Global Transactions",id:"global-transactions",level:2},{value:"Error Handling and Transaction State",id:"error-handling-and-transaction-state",level:2},{value:"Notes",id:"notes",level:2}];function d(a){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...a.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.header,{children:(0,e.jsx)(n.h1,{id:"transactions",children:"Transactions"})}),"\n",(0,e.jsx)(n.p,{children:"Hysteria ORM provides robust transaction support for SQL databases, allowing you to group multiple operations into a single atomic unit. Transactions ensure data consistency and integrity, supporting features like rollback, isolation levels, nested, concurrent, and global transactions."}),"\n",(0,e.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,e.jsxs)(n.p,{children:["Use ",(0,e.jsx)(n.code,{children:"sql.useTransaction"})," to run operations within a transaction. If an error is thrown, the transaction is rolled back automatically."]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:'import { sql } from "hysteria-orm";\n\nawait sql.useTransaction(async (trx) => {\n  await User.insert({ ...UserFactory.getCommonUserData() }, { trx });\n});\n'})}),"\n",(0,e.jsx)(n.p,{children:"If an error occurs, changes are not committed:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:'import { sql } from "hysteria-orm";\n\nawait sql.useTransaction(async (trx) => {\n  await User.insert({ ...UserFactory.getCommonUserData() }, { trx });\n  throw new Error("Test error"); // Transaction is rolled back automatically\n});\n\n// Raw transaction without models\nawait sql.useTransaction(async (trx) => {\n  await trx.sql.query("users");\n});\n'})}),"\n",(0,e.jsx)(n.h2,{id:"custom-isolation-level",children:"Custom Isolation Level"}),"\n",(0,e.jsx)(n.p,{children:"You can specify a transaction isolation level:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:'await sql.useTransaction(\n  async (trx) => {\n    await User.insert({ ...UserFactory.getCommonUserData() }, { trx });\n  },\n  { isolationLevel: "SERIALIZABLE" },\n);\n'})}),"\n",(0,e.jsx)(n.h2,{id:"manual-transaction-control",children:"Manual Transaction Control"}),"\n",(0,e.jsx)(n.p,{children:"Start, commit, and rollback transactions manually:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:"const trx = await sql.startTransaction();\nawait User.insert({ ...UserFactory.getCommonUserData() }, { trx });\nawait trx.commit();\n"})}),"\n",(0,e.jsx)(n.p,{children:"Rollback on error:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:'const trx = await sql.startTransaction();\ntry {\n  await User.insert({ ...UserFactory.getCommonUserData() }, { trx });\n  throw new Error("fail");\n  await trx.commit();\n} catch {\n  await trx.rollback();\n}\n'})}),"\n",(0,e.jsx)(n.h2,{id:"nested-transactions",children:"Nested Transactions"}),"\n",(0,e.jsx)(n.p,{children:"Some databases (e.g., PostgreSQL, MySQL) support nested transactions. SQLite does not."}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:"const outerTrx = await sql.startTransaction();\nawait User.insert({ ...UserFactory.getCommonUserData() }, { trx: outerTrx });\n\nconst innerTrx = await sql.startTransaction();\nawait User.insert({ ...UserFactory.getCommonUserData() }, { trx: innerTrx });\nawait innerTrx.rollback(); // Only inner changes are rolled back\nawait outerTrx.commit();   // Outer changes are committed\n"})}),"\n",(0,e.jsx)(n.h2,{id:"concurrent-transactions",children:"Concurrent Transactions"}),"\n",(0,e.jsx)(n.p,{children:"You can run multiple transactions in parallel (except in SQLite):"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:"const trx1 = await sql.startTransaction();\nconst trx2 = await sql.startTransaction();\nawait User.insert({ ...UserFactory.getCommonUserData() }, { trx: trx1 });\nawait User.insert({ ...UserFactory.getCommonUserData() }, { trx: trx2 });\nawait trx1.commit();\nawait trx2.commit();\n"})}),"\n",(0,e.jsx)(n.h2,{id:"global-transactions",children:"Global Transactions"}),"\n",(0,e.jsx)(n.p,{children:"For integration tests or batch operations, you can use global transactions:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:"await sql.startGlobalTransaction();\n// Automatically uses the transaction from the sql global transaction\nawait User.insert({ ...UserFactory.getCommonUserData() });\nawait sql.commitGlobalTransaction();\n"})}),"\n",(0,e.jsx)(n.p,{children:"Rollback global transaction:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:"await SqlDataSource.startGlobalTransaction();\nawait User.insert({ ...UserFactory.getCommonUserData() });\nawait sql.rollbackGlobalTransaction();\n"})}),"\n",(0,e.jsx)(n.h2,{id:"error-handling-and-transaction-state",children:"Error Handling and Transaction State"}),"\n",(0,e.jsx)(n.p,{children:"You can enforce error throwing if a transaction is inactive:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:"const trx = await sql.startTransaction();\nawait trx.rollback();\nawait trx.rollback({ throwErrorOnInactiveTransaction: true }); // Throws HysteriaError\n"})}),"\n",(0,e.jsx)(n.p,{children:"Or suppress errors:"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-typescript",children:"const trx = await sql.startTransaction();\nawait trx.rollback();\nawait trx.rollback({ throwErrorOnInactiveTransaction: false }); // No error\n"})}),"\n",(0,e.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"SQLite does not support nested or concurrent transactions."}),"\n",(0,e.jsxs)(n.li,{children:["Always pass the ",(0,e.jsx)(n.code,{children:"trx"})," object to model methods to ensure operations are part of the transaction."]}),"\n",(0,e.jsx)(n.li,{children:"Use isolation levels for advanced consistency requirements."}),"\n"]}),"\n",(0,e.jsx)(n.hr,{}),"\n",(0,e.jsx)(n.p,{children:"See also:"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/advanced/cte",children:"CTE"})}),"\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/advanced/json",children:"JSON Columns"})}),"\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/advanced/sqlite-json-limitations",children:"SQLite JSON Limitations"})}),"\n"]})]})}function u(a={}){const{wrapper:n}={...(0,r.R)(),...a.components};return n?(0,e.jsx)(n,{...a,children:(0,e.jsx)(d,{...a})}):d(a)}},8453:(a,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(6540);const e={},r=s.createContext(e);function o(a){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof a?a(n):{...n,...a}}),[n,a])}function i(a){let n;return n=a.disableParentContext?"function"==typeof a.components?a.components(e):a.components||e:o(a.components),s.createElement(r.Provider,{value:n},a.children)}}}]);