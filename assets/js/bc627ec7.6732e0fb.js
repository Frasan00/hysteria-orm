"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[2072],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>i});var r=s(6540);const d={},t=r.createContext(d);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),r.createElement(t.Provider,{value:n},e.children)}},9149:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"databases/sql/models/basics","title":"Defining SQL Models","description":"Models represent tables in your database. Define them by extending the Model class and using decorators for columns and relations.","source":"@site/docs/databases/sql/models/basics.md","sourceDirName":"databases/sql/models","slug":"/databases/sql/models/basics","permalink":"/hysteria-orm/docs/databases/sql/models/basics","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/models/basics.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Defining SQL Models","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"SQL ORM Introduction","permalink":"/hysteria-orm/docs/databases/sql/introduction"},"next":{"title":"Model Hooks & Lifecycle","permalink":"/hysteria-orm/docs/databases/sql/models/hooks"}}');var d=s(4848),t=s(8453);const l={title:"Defining SQL Models",sidebar_position:1},i="Defining SQL Models",o={},c=[{value:"Decorators &amp; Column Types",id:"decorators--column-types",level:2},{value:"Column Decorators",id:"column-decorators",level:3},{value:"Column Options",id:"column-options",level:4},{value:"Example Usage",id:"example-usage",level:5},{value:"Examples",id:"examples",level:4},{value:"Relation Decorators",id:"relation-decorators",level:3},{value:"Model Static Properties",id:"model-static-properties",level:2},{value:"Details",id:"details",level:3},{value:"Example: User Model",id:"example-user-model",level:2},{value:"Decorators",id:"decorators",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"defining-sql-models",children:"Defining SQL Models"})}),"\n",(0,d.jsxs)(n.p,{children:["Models represent tables in your database. Define them by extending the ",(0,d.jsx)(n.code,{children:"Model"})," class and using decorators for columns and relations."]}),"\n",(0,d.jsx)(n.h2,{id:"decorators--column-types",children:"Decorators & Column Types"}),"\n",(0,d.jsx)(n.p,{children:"Hysteria ORM uses TypeScript decorators to define model fields and relationships. Decorators are special annotations that add metadata or behavior to class properties."}),"\n",(0,d.jsx)(n.h3,{id:"column-decorators",children:"Column Decorators"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Decorator"}),(0,d.jsx)(n.th,{children:"Description"}),(0,d.jsx)(n.th,{children:"Example Usage"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column()"})}),(0,d.jsxs)(n.td,{children:["Standard column. Accepts options like ",(0,d.jsx)(n.code,{children:"primaryKey"}),", ",(0,d.jsx)(n.code,{children:"hidden"}),", etc."]}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column() name: string;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.integer()"})}),(0,d.jsx)(n.td,{children:"Ensures value is stored as integer. Useful for PKs and numeric fields."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.integer({ primaryKey: true }) id: number;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.float()"})}),(0,d.jsx)(n.td,{children:"Ensures value is stored as float. Useful for numeric fields."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.float() salary: number;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.boolean()"})}),(0,d.jsx)(n.td,{children:"Stores value as boolean, handles DB-specific formats."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.boolean() isActive: boolean;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.json()"})}),(0,d.jsx)(n.td,{children:"Serializes/deserializes JSON objects automatically."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.json() json: Record<string, any>;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.date()"})}),(0,d.jsx)(n.td,{children:"Handles date fields, with options for auto-creation and auto-update."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.date({ autoCreate: true }) createdAt: Date;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.uuid()"})}),(0,d.jsx)(n.td,{children:"Auto-generates a UUID if not provided."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.uuid({ primaryKey: true }) uuid: string;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.ulid()"})}),(0,d.jsx)(n.td,{children:"Auto-generates a ULID if not provided."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.ulid({ primaryKey: true }) ulid: string;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.encryption.symmetric()"})}),(0,d.jsx)(n.td,{children:"Encrypts/decrypts value using a symmetric key."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.encryption.symmetric({ key }) secret: string;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.encryption.asymmetric()"})}),(0,d.jsx)(n.td,{children:"Encrypts/decrypts value using asymmetric keys."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@column.encryption.asymmetric({ publicKey, privateKey }) secret: string;"})})]})]})]}),"\n",(0,d.jsx)(n.h4,{id:"column-options",children:"Column Options"}),"\n",(0,d.jsxs)(n.p,{children:["You can pass options to ",(0,d.jsx)(n.code,{children:"@column()"})," and its variants to control column behavior:"]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Option"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Default"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"primaryKey"})}),(0,d.jsx)(n.td,{children:"boolean"}),(0,d.jsx)(n.td,{children:"false"}),(0,d.jsx)(n.td,{children:"Marks this column as the primary key. Only one primary key is allowed per model."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"serialize"})}),(0,d.jsx)(n.td,{children:"function"}),(0,d.jsx)(n.td,{children:"undefined"}),(0,d.jsx)(n.td,{children:"Function to transform the value after reading from the database (e.g., parse, convert type)."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"prepare"})}),(0,d.jsx)(n.td,{children:"function"}),(0,d.jsx)(n.td,{children:"undefined"}),(0,d.jsx)(n.td,{children:"Function to transform the value before writing to the database (e.g., format, encrypt)."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"hidden"})}),(0,d.jsx)(n.td,{children:"boolean"}),(0,d.jsx)(n.td,{children:"false"}),(0,d.jsx)(n.td,{children:"If true, this column will not appear in serialized output (e.g., API responses)."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"autoUpdate"})}),(0,d.jsx)(n.td,{children:"boolean"}),(0,d.jsx)(n.td,{children:"false"}),(0,d.jsxs)(n.td,{children:["If true, ",(0,d.jsx)(n.code,{children:"prepare"})," will always be called on update, even if the value is not in the payload."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"databaseName"})}),(0,d.jsx)(n.td,{children:"string"}),(0,d.jsx)(n.td,{children:"property name (case-converted)"}),(0,d.jsx)(n.td,{children:"Custom name for the column in the database."})]})]})]}),"\n",(0,d.jsx)(n.h5,{id:"example-usage",children:"Example Usage"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"@column({ primaryKey: true, hidden: true, databaseName: 'user_id' })\ndeclare id: number;\n\n@column({\n  prepare: (value) => value.trim(),\n  serialize: (value) => value.toUpperCase(),\n})\ndeclare name: string;\n"})}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"primaryKey"}),": Composite primary keys are not supported. Defining more than one will throw an error."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"hidden"}),": Useful for sensitive fields like passwords."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"prepare"}),"/",(0,d.jsx)(n.code,{children:"serialize"}),": Use for custom transformations, e.g., encryption, formatting, or type conversion."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"databaseName"}),": Use if your DB column name differs from your property name or case convention."]}),"\n"]}),"\n",(0,d.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"@column()\ndeclare name: string;\n\n@column.integer({ primaryKey: true })\ndeclare id: number;\n\n@column.float()\ndeclare salary: number;\n\n@column.boolean()\ndeclare isActive: boolean;\n\n@column.json()\ndeclare json: Record<string, any> | null;\n\n@column.date({ autoCreate: true })\ndeclare createdAt: Date;\n\n@column.uuid({ primaryKey: true })\ndeclare uuid: string;\n\n@column.ulid({ primaryKey: true })\ndeclare ulid: string;\n\n@column.encryption.symmetric({ key: 'my-secret-key' })\ndeclare secret: string;\n"})}),"\n",(0,d.jsx)(n.h3,{id:"relation-decorators",children:"Relation Decorators"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Decorator"}),(0,d.jsx)(n.th,{children:"Description"}),(0,d.jsx)(n.th,{children:"Example Usage"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@hasOne"})}),(0,d.jsx)(n.td,{children:"One-to-one relationship"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@hasOne(() => Profile, 'userId') profile: Profile;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@hasMany"})}),(0,d.jsx)(n.td,{children:"One-to-many relationship"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@hasMany(() => Post, 'userId') posts: Post[];"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@belongsTo"})}),(0,d.jsx)(n.td,{children:"Inverse of hasOne/hasMany"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@belongsTo(() => User, 'userId') user: User;"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@manyToMany"})}),(0,d.jsx)(n.td,{children:"Many-to-many via a join table"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"@manyToMany(() => Role, () => UserRole, { leftForeignKey: 'userId', rightForeignKey: 'roleId' }) roles: Role[];"})})]})]})]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"model-static-properties",children:"Model Static Properties"}),"\n",(0,d.jsx)(n.p,{children:"You can customize model behavior by setting static properties on your model class:"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Property"}),(0,d.jsx)(n.th,{children:"Description"}),(0,d.jsx)(n.th,{children:"Default"}),(0,d.jsx)(n.th,{children:"Example Usage"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"static table"})}),(0,d.jsx)(n.td,{children:"Custom table name for the model."}),(0,d.jsx)(n.td,{children:"Pluralized snake_case"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'static table = "users";'})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"static modelCaseConvention"})}),(0,d.jsx)(n.td,{children:"Case convention for model property names (e.g., camel, snake, pascal, none)."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'"camel"'})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'static modelCaseConvention = "camel";'})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"static databaseCaseConvention"})}),(0,d.jsx)(n.td,{children:"Case convention for database column names."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'"snake"'})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'static databaseCaseConvention = "snake";'})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"static softDeleteColumn"})}),(0,d.jsx)(n.td,{children:"Column name used for soft deletes."}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'"deletedAt"'})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'static softDeleteColumn = "deletedAt";'})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"static softDeleteValue"})}),(0,d.jsx)(n.td,{children:"Value set when soft deleting (usually a timestamp)."}),(0,d.jsx)(n.td,{children:"Current UTC datetime"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"YYYY-MM-DD HH:mm:ss"})})]})]})]}),"\n",(0,d.jsx)(n.h3,{id:"details",children:"Details"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsxs)(n.strong,{children:["Custom Table Name (",(0,d.jsx)(n.code,{children:"table"}),")"]}),":\nBy default, the table name is the pluralized, snake_case version of your model class. Override this by setting ",(0,d.jsx)(n.code,{children:"static table"}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Case Conventions"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"modelCaseConvention"}),": Controls how property names are interpreted in your code (default: camelCase)."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"databaseCaseConvention"}),": Controls how column names are mapped in the database (default: snake_case).\nThis is useful for aligning with your database's naming style."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Soft Delete Support"}),":"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"softDeleteColumn"}),": The column used to mark a record as deleted (default: ",(0,d.jsx)(n.code,{children:"deletedAt"}),")."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"softDeleteValue"}),": The value written to the soft delete column (default: current UTC datetime in ",(0,d.jsx)(n.code,{children:'"YYYY-MM-DD HH:mm:ss"'})," format).\nWhen you soft delete a record, this value is set instead of actually removing the row."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h2,{id:"example-user-model",children:"Example: User Model"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-typescript",children:"import { Model, column, hasMany, hasOne, manyToMany } from 'hysteria-orm';\nimport { Post } from './Post';\nimport { Address } from './Address';\n\nexport class User extends Model {\n  // Custom table name for this model\n  static table = \"users\";\n\n  // Optional: override case conventions if needed\n  // static modelCaseConvention = \"camel\";\n  // static databaseCaseConvention = \"snake\";\n\n  // Optional: customize soft delete behavior\n  // static softDeleteColumn = \"deletedAt\";\n  // static softDeleteValue = new Date().toISOString();\n\n  @column.integer({ primaryKey: true })\n  declare id: number;\n\n  @column()\n  declare name: string;\n\n  @column()\n  declare email: string;\n\n  @column({ hidden: true })\n  declare password: string;\n\n  @column()\n  declare status: 'active' | 'inactive';\n\n  @column.boolean()\n  declare isActive: boolean;\n\n  @column.json()\n  declare json: Record<string, any> | null;\n\n  @column.date({ autoCreate: true })\n  declare createdAt: Date;\n\n  @column.date({ autoCreate: true, autoUpdate: true })\n  declare updatedAt: Date;\n\n  @hasOne(() => Post, 'userId')\n  declare post: Post;\n\n  @hasMany(() => Post, 'userId')\n  declare posts: Post[];\n\n  @manyToMany(() => Address, () => UserAddress, {\n    leftForeignKey: 'userId',\n    rightForeignKey: 'addressId',\n  })\n  declare addresses: Address[];\n}\n"})}),"\n",(0,d.jsx)(n.h2,{id:"decorators",children:"Decorators"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"@column()"})," for fields"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"@column.integer()"}),", ",(0,d.jsx)(n.code,{children:"@column.boolean()"}),", ",(0,d.jsx)(n.code,{children:"@column.json()"}),", ",(0,d.jsx)(n.code,{children:"@column.date()"}),", ",(0,d.jsx)(n.code,{children:"@column.float()"})," for typed fields"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"@hasOne"}),", ",(0,d.jsx)(n.code,{children:"@hasMany"}),", ",(0,d.jsx)(n.code,{children:"@belongsTo"}),", ",(0,d.jsx)(n.code,{children:"@manyToMany"})," for relations"]}),"\n"]}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsxs)(n.p,{children:["Next: ",(0,d.jsx)(n.a,{href:"/hysteria-orm/docs/databases/sql/models/hooks",children:"Model Hooks"})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}}}]);