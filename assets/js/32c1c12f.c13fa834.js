"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[5008],{1458:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"databases/sql/models/hooks","title":"Model Hooks & Lifecycle","description":"Hooks allow you to run logic before or after certain model actions. They are static methods on your model.","source":"@site/docs/databases/sql/models/hooks.md","sourceDirName":"databases/sql/models","slug":"/databases/sql/models/hooks","permalink":"/hysteria-orm/docs/databases/sql/models/hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/models/hooks.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Model Hooks & Lifecycle","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Model Mixins","permalink":"/hysteria-orm/docs/databases/sql/models/mixins"},"next":{"title":"Database Views","permalink":"/hysteria-orm/docs/databases/sql/models/views"}}');var n=t(4848),o=t(8453);const d={title:"Model Hooks & Lifecycle",sidebar_position:3},i="Model Hooks & Lifecycle",l={},a=[{value:"Example: Soft Delete Filtering",id:"example-soft-delete-filtering",level:2},{value:"Available Hooks",id:"available-hooks",level:2}];function c(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"model-hooks--lifecycle",children:"Model Hooks & Lifecycle"})}),"\n",(0,n.jsx)(s.p,{children:"Hooks allow you to run logic before or after certain model actions. They are static methods on your model.\nNote: Hooks do not apply to joined models in queries from other models.\nexample:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:'// This won\'t apply the hook on from the Post model (if exists)\nconst users = await User.query().join("posts", "posts.userId", "users.id").all();\n\n// Same applies to Model Joins\nconst users = await User.query().join(Post, "userId", "id").all();\n'})}),"\n",(0,n.jsx)(s.h2,{id:"example-soft-delete-filtering",children:"Example: Soft Delete Filtering"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"import { Model, column } from 'hysteria-orm';\nimport { ModelQueryBuilder } from 'hysteria-orm';\n\nexport class User extends Model {\n  @column.integer({ primaryKey: true })\n  declare id: number;\n\n  @column()\n  declare name: string;\n\n  @column.date()\n  declare deletedAt: Date | null;\n\n  static beforeUpdate(queryBuilder: ModelQueryBuilder<User>): void {\n    queryBuilder.where('users.is_admin', false);\n  }\n\n  static beforeDelete(queryBuilder: ModelQueryBuilder<User>): void {\n    queryBuilder.where('users.is_admin', false);\n  }\n\n  static beforeFetch(queryBuilder: ModelQueryBuilder<User>): void {\n    queryBuilder.whereNull('users.deleted_at');\n  }\n\n  static beforeInsert(data: User): void {\n    data.isAdmin = false;\n  }\n\n  static beforeInsertMany(data: User[]): void {\n    for (const item of data) {\n      item.isAdmin = false;\n    }\n  }\n\n  static afterFetch(data: User[]): User[] {\n    return data.filter((user) => user.deletedAt === null);\n  }\n}\n"})}),"\n",(0,n.jsx)(s.h2,{id:"available-hooks",children:"Available Hooks"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Hook"}),(0,n.jsx)(s.th,{children:"Signature"}),(0,n.jsx)(s.th,{children:"Description"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"beforeFetch"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"static beforeFetch(queryBuilder: ModelQueryBuilder<T>)"})}),(0,n.jsx)(s.td,{children:"Runs before fetching data. Modify query here."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"afterFetch"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"static async afterFetch(data: T[]): Promise<T[]>"})}),(0,n.jsx)(s.td,{children:"Runs after fetching data. Can transform results."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"beforeInsert"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"static async beforeInsert(data: any): Promise<void>"})}),(0,n.jsx)(s.td,{children:"Runs before inserting data. Can modify input."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"beforeInsertMany"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"static async beforeInsertMany(data: any[]): Promise<void>"})}),(0,n.jsx)(s.td,{children:"Runs before inserting multiple records. Modify input."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"beforeUpdate"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"static beforeUpdate(queryBuilder: ModelQueryBuilder<T>)"})}),(0,n.jsx)(s.td,{children:"Runs before updating data. Modify query here."})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"beforeDelete"}),(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"static beforeDelete(queryBuilder: ModelQueryBuilder<T>)"})}),(0,n.jsx)(s.td,{children:"Runs before deleting data. Modify query here."})]})]})]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"`"}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>d,x:()=>i});var r=t(6540);const n={},o=r.createContext(n);function d(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);