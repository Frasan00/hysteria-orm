"use strict";(self.webpackChunkhysteria_orm_docs=self.webpackChunkhysteria_orm_docs||[]).push([[8452],{2316:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"databases/sql/standard-methods/basics","title":"Standard Model Methods","description":"Hysteria ORM models provide a rich set of static methods for interacting with your database. These methods are fully type-safe and support advanced options.","source":"@site/docs/databases/sql/standard-methods/basics.md","sourceDirName":"databases/sql/standard-methods","slug":"/databases/sql/standard-methods/basics","permalink":"/hysteria-orm/docs/databases/sql/standard-methods/basics","draft":false,"unlisted":false,"editUrl":"https://github.com/Frasan00/hysteria-orm/tree/main/website/docs/databases/sql/standard-methods/basics.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Standard Model Methods","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Model Hooks & Lifecycle","permalink":"/hysteria-orm/docs/databases/sql/models/hooks"},"next":{"title":"Query Builder Basics","permalink":"/hysteria-orm/docs/databases/sql/query-builder/basics"}}');var d=n(4848),a=n(8453);const t={title:"Standard Model Methods",sidebar_position:1},i="Standard Model Methods",c={},o=[{value:"CRUD Methods",id:"crud-methods",level:2},{value:"<code>find</code>",id:"find",level:3},{value:"<code>findOne</code>",id:"findone",level:3},{value:"<code>findOneOrFail</code>",id:"findoneorfail",level:3},{value:"<code>insert</code>",id:"insert",level:3},{value:"<code>insertMany</code>",id:"insertmany",level:3},{value:"<code>updateRecord</code>",id:"updaterecord",level:3},{value:"<code>deleteRecord</code>",id:"deleterecord",level:3},{value:"<code>firstOrCreate</code>",id:"firstorcreate",level:3},{value:"<code>upsert</code>",id:"upsert",level:3},{value:"<code>upsertMany</code>",id:"upsertmany",level:3},{value:"Best Practices",id:"best-practices",level:2}];function l(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(s.header,{children:(0,d.jsx)(s.h1,{id:"standard-model-methods",children:"Standard Model Methods"})}),"\n",(0,d.jsx)(s.p,{children:"Hysteria ORM models provide a rich set of static methods for interacting with your database. These methods are fully type-safe and support advanced options."}),"\n",(0,d.jsx)(s.h2,{id:"crud-methods",children:"CRUD Methods"}),"\n",(0,d.jsx)(s.h3,{id:"find",children:(0,d.jsx)(s.code,{children:"find"})}),"\n",(0,d.jsx)(s.p,{children:"Fetch multiple records matching criteria."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"const users = await User.find({ where: { status: 'active' } });\n"})}),"\n",(0,d.jsx)(s.h3,{id:"findone",children:(0,d.jsx)(s.code,{children:"findOne"})}),"\n",(0,d.jsx)(s.p,{children:"Fetch a single record matching criteria."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"const user = await User.findOne({ where: { email: 'john@example.com' } });\n"})}),"\n",(0,d.jsx)(s.h3,{id:"findoneorfail",children:(0,d.jsx)(s.code,{children:"findOneOrFail"})}),"\n",(0,d.jsx)(s.p,{children:"Fetch a single record or throw if not found."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"const user = await User.findOneOrFail({ where: { email: 'john@example.com' } });\n"})}),"\n",(0,d.jsx)(s.h3,{id:"insert",children:(0,d.jsx)(s.code,{children:"insert"})}),"\n",(0,d.jsx)(s.p,{children:"Insert a new record."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"const user = await User.insert({ name: 'John', email: 'john@example.com' });\n"})}),"\n",(0,d.jsx)(s.h3,{id:"insertmany",children:(0,d.jsx)(s.code,{children:"insertMany"})}),"\n",(0,d.jsx)(s.p,{children:"Insert multiple records."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"const users = await User.insertMany([\n  { name: 'John', email: 'john@example.com' },\n  { name: 'Jane', email: 'jane@example.com' },\n]);\n"})}),"\n",(0,d.jsx)(s.h3,{id:"updaterecord",children:(0,d.jsx)(s.code,{children:"updateRecord"})}),"\n",(0,d.jsx)(s.p,{children:"Update a record by primary key."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"user.name = 'Johnny';\nconst updated = await User.updateRecord(user);\n"})}),"\n",(0,d.jsx)(s.h3,{id:"deleterecord",children:(0,d.jsx)(s.code,{children:"deleteRecord"})}),"\n",(0,d.jsx)(s.p,{children:"Delete a record by primary key."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"await User.deleteRecord(user);\n"})}),"\n",(0,d.jsx)(s.h3,{id:"firstorcreate",children:(0,d.jsx)(s.code,{children:"firstOrCreate"})}),"\n",(0,d.jsx)(s.p,{children:"Find a record or create it if it doesn't exist."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"const user = await User.firstOrCreate(\n  { email: 'john@example.com' },\n  { name: 'John', email: 'john@example.com' }\n);\n"})}),"\n",(0,d.jsx)(s.h3,{id:"upsert",children:(0,d.jsx)(s.code,{children:"upsert"})}),"\n",(0,d.jsx)(s.p,{children:"Insert or update a record based on conflict keys."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"const user = await User.upsert(\n  { email: 'john@example.com' },\n  { name: 'John', email: 'john@example.com' }\n);\n"})}),"\n",(0,d.jsx)(s.h3,{id:"upsertmany",children:(0,d.jsx)(s.code,{children:"upsertMany"})}),"\n",(0,d.jsx)(s.p,{children:"Insert or update multiple records."}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-typescript",children:"const users = await User.upsertMany(\n  ['email'],\n  [\n    { email: 'john@example.com', name: 'John' },\n    { email: 'jane@example.com', name: 'Jane' },\n  ]\n);\n"})}),"\n",(0,d.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,d.jsxs)(s.ul,{children:["\n",(0,d.jsx)(s.li,{children:"Always use the static methods for database operations."}),"\n",(0,d.jsxs)(s.li,{children:["Use ",(0,d.jsx)(s.code,{children:"findOneOrFail"})," for required lookups."]}),"\n",(0,d.jsxs)(s.li,{children:["Use ",(0,d.jsx)(s.code,{children:"firstOrCreate"})," and ",(0,d.jsx)(s.code,{children:"upsert"})," for idempotent operations."]}),"\n"]}),"\n",(0,d.jsx)(s.hr,{}),"\n",(0,d.jsxs)(s.p,{children:["Next: ",(0,d.jsx)(s.a,{href:"/hysteria-orm/docs/databases/sql/query-builder/basics",children:"Query Builder"})]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>i});var r=n(6540);const d={},a=r.createContext(d);function t(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);